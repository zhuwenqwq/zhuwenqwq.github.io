<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ARC133B_Dividing_Subsequence</title>
    <url>/2024/04/25/ARC133B_Dividing_Subsequence/</url>
    <content><![CDATA[<h1 id="Dividing-Subsequence"><a href="#Dividing-Subsequence" class="headerlink" title="Dividing Subsequence"></a>Dividing Subsequence</h1><span id="more"></span>
<p>这道题与<a href="https://www.luogu.com.cn/problem/P1439">最长公共子序列</a>类似，可以先去水一水那道题。</p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>本题就是让你从 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="1.138ex" height="1.439ex" role="img" focusable="false" viewBox="0 -442 503 636"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g></g></svg></mjx-container> 里面选出一个子序列 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="1.71ex" height="1.927ex" role="img" focusable="false" viewBox="0 -694 756 851.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(462,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container> 和 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="1.041ex" height="1.439ex" role="img" focusable="false" viewBox="0 -442 460 636"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g></g></svg></mjx-container> 里面选出一个子序列 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="1.937ex" height="1.355ex" role="img" focusable="false" viewBox="0 -441 856 598.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>，我们要使 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="1.71ex" height="1.927ex" role="img" focusable="false" viewBox="0 -694 756 851.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(462,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container> 是 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="1.937ex" height="1.355ex" role="img" focusable="false" viewBox="0 -441 856 598.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container> 的倍数。</p>
<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>本题直接用动态规划，是 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.832ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 2577.6 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2188.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> 做法，会超时，因此我们用树状数组维护区间最值来进行优化，那么本题与最长上升子序列的解法类似——因为我们求了前面的可以求后面的，但是求了后面的就不能求前面的了，而且还要求最长，因此是一个最长上升子序列问题。注意对于 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="1.878ex" height="1.439ex" role="img" focusable="false" viewBox="0 -442 830 636"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(536,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container> 更新 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="1.749ex" height="1.439ex" role="img" focusable="false" viewBox="0 -442 773 636"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(479,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container> 时要从大到小。</p>
<p>解释很多在代码上，请看代码：</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: [ARC133B] Dividing Subsequence</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/AT_arc133_b</span></span><br><span class="line"><span class="comment">// Memory Limit: 1 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 5000 ms</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) x &amp; -x</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) x.begin(), x.end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fst ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> ll N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;     <span class="comment">// n个元素</span></span><br><span class="line"><span class="type">int</span> a[N];  <span class="comment">// p数组的每个元素</span></span><br><span class="line"><span class="type">int</span> b[N];  <span class="comment">// q数组的每个元素</span></span><br><span class="line"><span class="type">int</span> c[N];  <span class="comment">// c[]表示i元素在q数组中的位置</span></span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v[N];  <span class="comment">//存储i元素所有的倍数位置</span></span><br><span class="line"><span class="type">int</span> d[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> v)</span> </span>{</span><br><span class="line">  <span class="keyword">while</span> (x &lt;= n) {</span><br><span class="line">    d[x] = <span class="built_in">max</span>(d[x], v);</span><br><span class="line">    x += <span class="built_in">lowbit</span>(x);</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span> </span>{</span><br><span class="line">  <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (x) {</span><br><span class="line">    res = <span class="built_in">max</span>(d[x], res);</span><br><span class="line">    x -= <span class="built_in">lowbit</span>(x);</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">  fst;</span><br><span class="line">  cin &gt;&gt; n;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) {</span><br><span class="line">    cin &gt;&gt; a[i];</span><br><span class="line">  }</span><br><span class="line">  <span class="comment">// 3 1 4 2</span></span><br><span class="line">  <span class="comment">// 2 4 1 3</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) {</span><br><span class="line">    cin &gt;&gt; b[i];</span><br><span class="line">    c[b[i]] = i;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) {</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt;= n; j += i) {</span><br><span class="line">      <span class="comment">//对于i元素，i的倍数是j</span></span><br><span class="line">      v[i].<span class="built_in">pb</span>(c[j]);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) {</span><br><span class="line">    <span class="comment">//目标维护a[i]的所有倍数出现的位置</span></span><br><span class="line">    <span class="comment">//对这个位置进行降序排列</span></span><br><span class="line">    <span class="type">int</span> t = a[i];</span><br><span class="line">    <span class="built_in">sort</span>(<span class="built_in">all</span>(v[t]));</span><br><span class="line">    <span class="built_in">reverse</span>(<span class="built_in">all</span>(v[t]));</span><br><span class="line">    <span class="comment">//就是求这个的最长上升子序列</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> e : v[t]) {</span><br><span class="line">      <span class="comment">//对于e元素来说，求来的比我早的，且数值比我小的最大值</span></span><br><span class="line">      <span class="type">int</span> tmp = <span class="built_in">query</span>(e - <span class="number">1</span>);</span><br><span class="line">      <span class="built_in">update</span>(e, tmp + <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  cout &lt;&lt; <span class="built_in">query</span>(n) &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>本题就愉快地结束了。</p>
]]></content>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>AtCoder Beginner Contest 352</title>
    <url>/2024/05/05/AtCoder-Beginner-Contest-352/</url>
    <content><![CDATA[<h1 id="A-E"><a href="#A-E" class="headerlink" title="A~E"></a>A~E</h1><span id="more"></span>
<h2 id="A-AtCoder-Line"><a href="#A-AtCoder-Line" class="headerlink" title="A - AtCoder Line"></a>A - AtCoder Line</h2><p>简单题，让你判断，从出发点到终点一共的站数能不能大于要求停靠的站数。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">fin &gt;&gt; n &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class="line"><span class="keyword">if</span>(x &gt; y)   <span class="built_in">swap</span>(x, y);</span><br><span class="line"><span class="keyword">if</span>(x &lt; z &amp;&amp; y &gt; z) <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line"><span class="keyword">else</span>    <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br></pre></td></tr></table></figure>
<h2 id="B-Typing"><a href="#B-Typing" class="headerlink" title="B - Typing"></a>B - Typing</h2><p>也不难，双指针判断，一个控制 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.061ex" height="1.023ex" role="img" focusable="false" viewBox="0 -442 469 452"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g></g></svg></mjx-container>，一个控制 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.817ex" height="1.441ex" role="img" focusable="false" viewBox="0 -626 361 637"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></svg></mjx-container>，如果在 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.817ex" height="1.441ex" role="img" focusable="false" viewBox="0 -626 361 637"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></svg></mjx-container> 中找到符合的，指针指向 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.061ex" height="1.023ex" role="img" focusable="false" viewBox="0 -442 469 452"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g></g></svg></mjx-container> 的下一个。</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">cin &gt;&gt; s &gt;&gt; t;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; t.<span class="built_in">size</span>(); i++)</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>(s[j] == t[i])</span><br><span class="line">    {</span><br><span class="line">        fout &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">        j++;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="C-Standing-On-The-Shoulders"><a href="#C-Standing-On-The-Shoulders" class="headerlink" title="C - Standing On The Shoulders"></a>C - Standing On The Shoulders</h2><p>我们可以发现，肩高每个人都是要算的，因为每个人都是踩着别人的肩，那么我们就可以贪心的想出，只要找到从头到肩最高的那个人，让他在最上面，就是我们要求的最大值。</p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">fin &gt;&gt; n;</span><br><span class="line"><span class="type">int</span> maxx = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">fup</span>(i, <span class="number">1</span>, n)</span><br><span class="line">{</span><br><span class="line">    fin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    sum += a;</span><br><span class="line">    maxx = <span class="built_in">max</span>(maxx, b - a);</span><br><span class="line">}</span><br><span class="line">fout &lt;&lt; sum + maxx &lt;&lt; <span class="string">'\n'</span>;</span><br></pre></td></tr></table></figure>
<h2 id="D-Permutation-Subsequence"><a href="#D-Permutation-Subsequence" class="headerlink" title="D - Permutation Subsequence"></a>D - Permutation Subsequence</h2><p>不难发现，本题没有改变的值是离线做法，因此用 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.878ex" height="1.441ex" role="img" focusable="false" viewBox="0 -626 830 637"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(469,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></svg></mjx-container> 表来维护求出最大值和最小值。</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="3.176ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1404 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(503,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(781,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1126,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container> 表示 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewBox="0 -661 345 672"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 在原排列中出现的位置，枚举连续 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.179ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 521 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></svg></mjx-container> 个数，对于所有 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewBox="0 -661 345 672"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 找出最小值，就是答案。此时就是求长度为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.179ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 521 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></svg></mjx-container> 的区间的最大值和最小值的差的最小值，用 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.878ex" height="1.441ex" role="img" focusable="false" viewBox="0 -626 830 637"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(469,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></svg></mjx-container> 表维护序列即可。</p>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> st[N][<span class="number">20</span>];</span><br><span class="line"><span class="type">int</span> ts[N][<span class="number">20</span>];</span><br><span class="line"><span class="type">int</span> n, k;</span><br><span class="line"><span class="type">int</span> p[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query1</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">int</span> k = <span class="built_in">log2</span>(r - l + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(st[l][k], st[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query2</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">int</span> k = <span class="built_in">log2</span>(r - l + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(ts[l][k], ts[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    fin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="built_in">fup</span>(i, <span class="number">1</span>, n)    fin &gt;&gt; p[i], st[p[i]][<span class="number">0</span>] = i, ts[p[i]][<span class="number">0</span>] = i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">20</span>; j++)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt;= n; i++)</span><br><span class="line">        {</span><br><span class="line">            st[i][j] = <span class="built_in">max</span>(st[i][j - <span class="number">1</span>], st[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">            ts[i][j] = <span class="built_in">min</span>(ts[i][j - <span class="number">1</span>], ts[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> res = <span class="number">2e9</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = k; j &lt;= n; i++, j++)    res = <span class="built_in">min</span>(<span class="built_in">query1</span>(i, j) - <span class="built_in">query2</span>(i, j), res);</span><br><span class="line">    fout &lt;&lt; res &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="E-Clique-Connect"><a href="#E-Clique-Connect" class="headerlink" title="E - Clique Connect"></a>E - Clique Connect</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>初始是一个空图，给定 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.179ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 521 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></svg></mjx-container> 和 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.061ex" height="1.023ex" role="img" focusable="false" viewBox="0 -442 469 452"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g></g></svg></mjx-container>，表示第 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewBox="0 -661 345 672"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 条边有 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.179ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 521 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></svg></mjx-container> 条边与它相连，边权为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.061ex" height="1.023ex" role="img" focusable="false" viewBox="0 -442 469 452"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g></g></svg></mjx-container>。</p>
<p>问最后能不能构成一张图，如果能，输出最小生成数的权值和。</p>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>通过并查集维护连通性，枚举每条边，看看是否与根相连，如果不连通，那么将这两条边相连。</p>
<p>通过 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="7.604ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 3361 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(521,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(972,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1544,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(2013,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(2534,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(3063,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g></g></g></svg></mjx-container> 算法，先连权值最小的边，如果两条边不相连，通过并查集合并将两条边相连。</p>
<p>最后判断，如果相连的边数等于点数减一，那么表示整个图相连通，输出最小生成数的权值和。否则输出 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="2.891ex" height="1.692ex" role="img" focusable="false" viewBox="0 -666 1278 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(778,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container>。</p>
<h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> p[N];</span><br><span class="line"><span class="type">int</span> sz[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> k, s;</span><br><span class="line">    vector&lt; <span class="type">int</span> &gt; g;</span><br><span class="line">} e[N];</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> a.s &lt; b.s;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fifa</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> (p[x] == x ? p[x] : p[x] = <span class="built_in">fifa</span>(p[x]));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    fin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">fup</span>(i, <span class="number">1</span>, n)    p[i] = i;</span><br><span class="line">    <span class="built_in">fup</span>(i, <span class="number">1</span>, m)</span><br><span class="line">    {</span><br><span class="line">        fin &gt;&gt; e[i].k &gt;&gt; e[i].s;</span><br><span class="line">        <span class="built_in">fup</span>(j, <span class="number">1</span>, e[i].k)</span><br><span class="line">        {</span><br><span class="line">            <span class="type">int</span> x;</span><br><span class="line">            fin &gt;&gt; x;</span><br><span class="line">            e[i].g.<span class="built_in">eb</span>(x);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">sort</span>(e + <span class="number">1</span>, e + m + <span class="number">1</span>, cmp);</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">fup</span>(i, <span class="number">1</span>, m)</span><br><span class="line">    {</span><br><span class="line">        <span class="type">int</span> py = <span class="built_in">fifa</span>(e[i].g[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> j : e[i].g)</span><br><span class="line">        {</span><br><span class="line">            <span class="comment">//fout &lt;&lt; e[i].g[j] &lt;&lt; ' ';</span></span><br><span class="line">            <span class="type">int</span> px = <span class="built_in">fifa</span>(j);</span><br><span class="line">            <span class="keyword">if</span>(px != py)</span><br><span class="line">            {</span><br><span class="line">                ans += e[i].s;</span><br><span class="line">                cnt += <span class="number">1</span>;</span><br><span class="line">                p[px] = py;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    fout &lt;&lt; ((cnt == n - <span class="number">1</span>) ? ans : <span class="number">-1</span>) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>AtCoder</category>
      </categories>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>Restoration of the Permutation</title>
    <url>/2024/04/25/Restoration-of-the-Permutation/</url>
    <content><![CDATA[<h2 id="Restoration-of-the-Permutation"><a href="#Restoration-of-the-Permutation" class="headerlink" title="Restoration of the Permutation"></a>Restoration of the Permutation</h2><span id="more"></span>
<h1 id="主要题意"><a href="#主要题意" class="headerlink" title="主要题意"></a>主要题意</h1><p>正着不好求，我们可以根据样例反过来找关系，题目告诉了我们一种规则从 a 数组变成 b 数组。</p>
<p>看看 a 数组中有几个满足 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="11.131ex" height="1.927ex" role="img" focusable="false" viewBox="0 -694 4919.7 851.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="TeXAtom" transform="translate(462,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(433,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1033,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1775.5,0)"><path data-c="2A7D" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM94 170Q102 172 104 172Q110 171 254 103T535 -30T678 -98Q694 -106 694 -118Q694 -136 676 -138H670L382 -2Q92 135 90 137Q83 142 83 154Q84 164 94 170Z"></path></g><g data-mml-node="mi" transform="translate(2831.3,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3398.5,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(4398.7,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></svg></mjx-container> 满足数的个数即为 b 的值。</p>
<ul>
<li>求 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="1.958ex" height="1.91ex" role="img" focusable="false" viewBox="0 -694 865.6 844"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mn" transform="translate(462,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></mjx-container> 时，先找到 1 在 a 数组中得位置，得到 1 左边的数 4，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="9.176ex" height="1.844ex" role="img" focusable="false" viewBox="0 -677 4056 815"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(777.8,0)"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mn" transform="translate(1833.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2555.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(3556,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></svg></mjx-container>,满足条件的就有 1 个数，因此 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="1.958ex" height="1.91ex" role="img" focusable="false" viewBox="0 -694 865.6 844"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mn" transform="translate(462,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></mjx-container> 为 1。</li>
<li>求 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="1.958ex" height="1.91ex" role="img" focusable="false" viewBox="0 -694 865.6 844"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mn" transform="translate(462,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container> 时，先找到 2 在 a 数组中得位置，得到 1 左边的数 4 1 5，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="9.176ex" height="1.844ex" role="img" focusable="false" viewBox="0 -677 4056 815"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(777.8,0)"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mn" transform="translate(1833.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2555.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(3556,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></svg></mjx-container> 和 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="9.176ex" height="1.819ex" role="img" focusable="false" viewBox="0 -666 4056 804"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g><g data-mml-node="mo" transform="translate(777.8,0)"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mn" transform="translate(1833.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2555.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(3556,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></svg></mjx-container>,满足条件有 2 个数，因此 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="1.958ex" height="1.91ex" role="img" focusable="false" viewBox="0 -694 865.6 844"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mn" transform="translate(462,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></mjx-container> 为 2。</li>
</ul>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>当题目是给我们 b 数组，要我们求最小得字典序的 a 数组。</p>
<p>在 b 中第一个 0 出现的位置，放在 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.185ex" height="1.337ex" role="img" focusable="false" viewBox="0 -441 965.6 591"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></mjx-container>,这时候放 b 中最小的满足条件的值为 1。</p>
<p>在更新 b 数组时，使满足 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="11.131ex" height="1.927ex" role="img" focusable="false" viewBox="0 -694 4919.7 851.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="TeXAtom" transform="translate(462,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(433,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1033,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1775.5,0)"><path data-c="2A7D" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM94 170Q102 172 104 172Q110 171 254 103T535 -30T678 -98Q694 -106 694 -118Q694 -136 676 -138H670L382 -2Q92 135 90 137Q83 142 83 154Q84 164 94 170Z"></path></g><g data-mml-node="mi" transform="translate(2831.3,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3398.5,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(4398.7,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></svg></mjx-container> 的 b 的下标 cnt 的值减一。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(1)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(3, "Ofast", "inline")</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> swap(a, b) a ^= b, b ^= a, a ^= b</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) x.begin(), x.end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fst                      \</span></span><br><span class="line"><span class="meta">    ios::sync_with_stdio(false); \</span></span><br><span class="line"><span class="meta">    cin.tie(0);                  \</span></span><br><span class="line"><span class="meta">    cout.tie(0);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Max = <span class="number">1e3</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">1e18</span>, P = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="type">bool</span> f = <span class="literal">true</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="number">48</span> || c &gt; <span class="number">57</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'-'</span>)</span><br><span class="line">            f = <span class="literal">false</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="number">48</span> &amp;&amp; c &lt;= <span class="number">57</span>)</span><br><span class="line">        x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + c - <span class="number">48</span>, c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> f ? x : -x;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">'-'</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">wsp</span><span class="params">(<span class="type">int</span> x)</span> </span>{ <span class="built_in">write</span>(x), <span class="built_in">putchar</span>(<span class="string">' '</span>); }</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">wel</span><span class="params">(<span class="type">int</span> x)</span> </span>{ <span class="built_in">write</span>(x), <span class="built_in">putchar</span>(<span class="string">'\n'</span>); }</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> k;</span><br><span class="line"><span class="type">int</span> a[N], b[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    fst;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    {</span><br><span class="line">        cin &gt;&gt; b[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (b[cnt] != <span class="number">0</span>)</span><br><span class="line">        {</span><br><span class="line">            cnt++;</span><br><span class="line">        }</span><br><span class="line">        a[i] = cnt;</span><br><span class="line">        b[cnt]--;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j + k &lt;= cnt; j++)</span><br><span class="line">        {</span><br><span class="line">            b[j]--;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    {</span><br><span class="line">        cout &lt;&lt; a[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    }</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>KMP 算法和 TIRE 树</title>
    <url>/2024/04/25/KMP-%E7%AE%97%E6%B3%95%E5%92%8C-TIRE-%E6%A0%91/</url>
    <content><![CDATA[<h2 id="字符串算法"><a href="#字符串算法" class="headerlink" title="字符串算法"></a>字符串算法</h2><span id="more"></span>
<h2 id="1-KMP-算法"><a href="#1-KMP-算法" class="headerlink" title="1. KMP 算法"></a>1. <a href="https://blog.csdn.net/starstar1992/article/details/54913261">KMP 算法</a></h2><p>KMP 算法，是判断一个字符串是否在一个字符串中出现过，能够快速匹配字符串在文本串中的有无，位置，次数，我们在匹配字符串中可以找到失配点，就可以不用从 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.507ex" role="img" focusable="false" viewBox="0 -666 500 666"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container> 重新查找，从某个特定点进行查找，大大减小了时间复杂度。</p>
<p>考虑一组样例：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">字符串：abcdf</span><br><span class="line">文本串：abcdabcdef</span><br></pre></td></tr></table></figure><br>我们来将他匹配，首先前 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.532ex" role="img" focusable="false" viewBox="0 -677 500 677"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g></svg></mjx-container> 个字母都会匹配上，发现到了第 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 500 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g></g></g></svg></mjx-container> 个，就匹配不上了。那么我们就将字符串移动到失配的点。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">字符串：   abcdf  </span><br><span class="line">文本串：abcdeabcdef</span><br></pre></td></tr></table></figure><br>因此我们可以不用一位一位的找，就可以根据相同的字母来进行匹配。</p>
<p>一共有两步：先是处理 KMP 数组，接着是字符串匹配。</p>
<p>在处理 KMP 数组中，我们可以自己匹配自己，对于每个 j 并且<br>j 是拥有可继承性的。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">fup</span>(i, <span class="number">2</span>, l2) {</span><br><span class="line">  <span class="keyword">while</span> (j &amp;&amp; s2[i] != s2[j + <span class="number">1</span>]) {</span><br><span class="line">    j = kmp[j];</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">if</span> (s2[j + <span class="number">1</span>] == s2[i]) {</span><br><span class="line">    j++;</span><br><span class="line">  }</span><br><span class="line">  kmp[i] = j;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>在进行字符串匹配，j 可以看做表示当前已经匹配完的模式串的最后一位的位置，如果失配，那么就不断向回跳，直到可以继续匹配，如果匹配成功，那么对应的模式串位置 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="3.52ex" height="1.505ex" role="img" focusable="false" viewBox="0 -583 1556 665"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(778,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g></g></g></svg></mjx-container>。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">fup</span>(i, <span class="number">1</span>, l1) {</span><br><span class="line">    <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; s2[j + <span class="number">1</span>] != s1[i]) {</span><br><span class="line">      j = kmp[j];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (s2[j + <span class="number">1</span>] == s1[i]) {</span><br><span class="line">      j++;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (j == l2) {</span><br><span class="line">      j = kmp[j];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><br>例题：<a href="https://www.luogu.com.cn/problem/P3375">模板</a>。</p>
<h2 id="2-TIRE-树"><a href="#2-TIRE-树" class="headerlink" title="2.TIRE 树"></a>2.<a href="https://blog.csdn.net/qq_49688477/article/details/118879270">TIRE 树</a></h2><p>TIRE 树，能够判断一个字符串的前缀，在多个字符串是否出现过，在查询时，通过判断每个字符的前缀，从而减少时间复杂度。在建树中，通过公共前缀来减少空间。</p>
<p>我们来举个例子：怎么存 <code>abc,abb,bca,bc</code>。</p>
<p><img src="https://cdn.luogu.com.cn/upload/image_hosting/bmi89i34.png" alt=""></p>
<p>通过这样存，就能够将这些所有的字符串存起来。</p>
<p>在用字典树中，也需要两步，先将字符串插入，在进行查询。</p>
<p>在进行插入时，通过一个二维数组，id 表示每个节点的编号，每个 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.262ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3652 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(361,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(706,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1157,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(1623,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(1901,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2246,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(2524,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(2802,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(3374,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container> 表示一条边，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="5.254ex" height="1.692ex" role="img" focusable="false" viewBox="0 -666 2322.4 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1722.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 表示每个节点的编号，如果 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="14.171ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 6263.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(361,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(706,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1157,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(1623,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(1901,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2246,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(2524,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(2802,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(3374,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(3929.8,0)"><g data-mml-node="text"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="text" transform="translate(778,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g></g><g data-mml-node="mn" transform="translate(5763.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container> 表示 i 这个点没有边，而 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="9.97ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4406.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(433,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1033,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1394,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(1672,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2017,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(2295,0)"><path data-c="21" d="M78 661Q78 682 96 699T138 716T180 700T199 661Q199 654 179 432T158 206Q156 198 139 198Q121 198 119 206Q118 209 98 431T78 661ZM79 61Q79 89 97 105T141 121Q164 119 181 104T198 61Q198 31 181 16T139 1Q114 1 97 16T79 61Z"></path></g><g data-mml-node="mo" transform="translate(2850.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3906.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container> 表示这个点不是叶节点，它还能继续往下拓展字符，p 代表节点编号，通过 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.62ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3810 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(361,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(706,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1157,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(1623,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(1901,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(2404,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(2682,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(2960,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(3532,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container> 判断当前节点是否存在，在插入时，如果 p 节点没有边，那么就 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="6.483ex" height="1.756ex" role="img" focusable="false" viewBox="0 -694 2865.4 776"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(1000.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(2000.4,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2345.4,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g></g></svg></mjx-container> 将这个边存上，最后将 p 更新成新节点的编号。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(string s)</span> </span>{</span><br><span class="line">  <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">fup</span>(i, <span class="number">0</span>, s.<span class="built_in">size</span>() - <span class="number">1</span>) {</span><br><span class="line">    <span class="type">int</span> x = s[i]-<span class="string">'a'</span>;</span><br><span class="line">    <span class="keyword">if</span> (trie[p][x] == <span class="number">0</span>) trie[p][x] = ++id;</span><br><span class="line">    p = trie[p][x];</span><br><span class="line">    cnt[p]++;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>接着进行查询，其他都差不多，就在 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="14.528ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 6421.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(361,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(706,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1157,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(1623,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(1901,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(2404,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(2682,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(2960,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(3532,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(4087.8,0)"><g data-mml-node="text"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="text" transform="translate(778,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g></g><g data-mml-node="mn" transform="translate(5921.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container> 时表示这个点就确实没有出现过了，因此我们返回 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 500 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container> 查找失败，最后如果要求每个字符串前缀出现的次数，那么就返回 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.55ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2453 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(433,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1033,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1394,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(1672,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(2175,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container>，表示每个字符串前缀的次数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(string s)</span> </span>{</span><br><span class="line">  <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">fup</span>(i, <span class="number">0</span>, s.<span class="built_in">size</span>() - <span class="number">1</span>) {</span><br><span class="line">    <span class="type">int</span> x = <span class="built_in">fun</span>(s[i]);</span><br><span class="line">    <span class="keyword">if</span> (trie[p][x] == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    p = trie[p][x];</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> cnt[p];</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>例题：<a href="https://www.luogu.com.cn/problem/P8306">模板</a>。</p>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>S1-VP3题解</title>
    <url>/2024/05/02/S1-VP3%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="A-G"><a href="#A-G" class="headerlink" title="A~G"></a>A~G</h1><span id="more"></span>
<h2 id="A-Two-Vessels"><a href="#A-Two-Vessels" class="headerlink" title="A. Two Vessels"></a>A. Two Vessels</h2><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.697ex" height="1.62ex" role="img" focusable="false" viewBox="0 -716 750 716"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g></g></g></svg></mjx-container> 是个简单题，就问你这两个杯子弄几次能弄到相等，另一个杯子的最大容量是 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.98ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 433 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g></g></g></svg></mjx-container> ，因此我们就能得出公式 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="19.544ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 8638.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(433,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(899,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1244,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(1542,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1931,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(2460,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(2889,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(3358,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(3747,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(4498.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(5498.4,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(5927.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(6316.4,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mn" transform="translate(6816.4,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(7316.4,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mi" transform="translate(7816.4,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mo" transform="translate(8249.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">    <span class="type">double</span> sum = <span class="number">1.0</span> * <span class="built_in">abs</span>(a - b) / <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> res = <span class="built_in">ceil</span>(sum / c);</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>还有一种暴力思想，就直接 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.324ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3679 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mi" transform="translate(716,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(1292,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1637,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(1935,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(2401,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(2790,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3290,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> 暴力算法，从 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.971ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 429 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g></g></svg></mjx-container> 里面减 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.98ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 433 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g></g></g></svg></mjx-container>，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.197ex" height="1.02ex" role="img" focusable="false" viewBox="0 -441 529 451"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g></g></svg></mjx-container> 加上 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.98ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 433 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g></g></g></svg></mjx-container>。</p>
<h2 id="B-The-Corridor-or-There-and-Back-Again"><a href="#B-The-Corridor-or-There-and-Back-Again" class="headerlink" title="B. The Corridor or There and Back Again"></a>B. The Corridor or There and Back Again</h2><p>最大距离能够得出 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="37.822ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 16717.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(878,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1407,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(1979,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(2499,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2844,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(3590.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(4646.6,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(5524.6,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(5869.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(6469.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(6858.6,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(7736.6,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(8265.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(8837.6,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(9357.6,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(9702.6,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(10171.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(10616.2,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(11358.4,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(12358.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(12747.7,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(13438.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(14439.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(14939.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(15328.1,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mn" transform="translate(15828.1,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(16328.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>。</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">1e18</span>;</span><br><span class="line">    fin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span> (n--)</span><br><span class="line">    {</span><br><span class="line">        fin &gt;&gt; d &gt;&gt; s;</span><br><span class="line">        ans = <span class="built_in">min</span>(ans, d + (s - <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">    }</span><br><span class="line">    fout &lt;&lt; ans &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="C-Non-coprime-Split"><a href="#C-Non-coprime-Split" class="headerlink" title="C. Non coprime Split"></a>C. Non coprime Split</h2><p>从 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="4.46ex" height="1.756ex" role="img" focusable="false" viewBox="0 -694 1971.4 776"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(520.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1520.4,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 之间找合数。</p>
<p> 分类讨论：</p>
<ul>
<li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="5.169ex" height="1.622ex" role="img" focusable="false" viewBox="0 -677 2284.6 717"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(728.8,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mn" transform="translate(1784.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g></svg></mjx-container> 这是一定没有的，因此输出 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="2.891ex" height="1.692ex" role="img" focusable="false" viewBox="0 -666 1278 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(778,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container>。</li>
<li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.486ex;" xmlns="http://www.w3.org/2000/svg" width="4.712ex" height="2.106ex" role="img" focusable="false" viewBox="0 -716 2082.6 931"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(575.8,0)"><path data-c="2260" d="M166 -215T159 -215T147 -212T141 -204T139 -197Q139 -190 144 -183L306 133H70Q56 140 56 153Q56 168 72 173H327L406 327H72Q56 332 56 347Q56 360 70 367H426Q597 702 602 707Q605 716 618 716Q625 716 630 712T636 703T638 696Q638 692 471 367H707Q722 359 722 347Q722 336 708 328L451 327L371 173H708Q722 163 722 153Q722 140 707 133H351Q175 -210 170 -212Q166 -215 159 -215Z"></path></g><g data-mml-node="mi" transform="translate(1631.6,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 如果 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.02ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 451 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 是个合数，那么把 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.507ex" role="img" focusable="false" viewBox="0 -666 500 666"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></svg></mjx-container> 拆出来，在输出 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="4.917ex" height="1.692ex" role="img" focusable="false" viewBox="0 -666 2173.4 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(673.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1673.4,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></svg></mjx-container>。如果 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.02ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 451 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 是个质数，那么把 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.554ex" role="img" focusable="false" viewBox="0 -665 500 687"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></svg></mjx-container> 拆出来，在输出 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="4.917ex" height="1.69ex" role="img" focusable="false" viewBox="0 -665 2173.4 747"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(673.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1673.4,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></svg></mjx-container>。</li>
<li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="4.712ex" height="1.756ex" role="img" focusable="false" viewBox="0 -694 2082.6 776"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(575.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(1631.6,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 找一个 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.674ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 298 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g></g></g></svg></mjx-container> 的因子，输出 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="4.525ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 2000 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">因</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">子</text></g></g></g></svg></mjx-container> 和 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="7.965ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 3520.4 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(520.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1520.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">因</text></g><g data-mml-node="mi" transform="translate(2520.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">子</text></g></g></g></svg></mjx-container>。</li>
</ul>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">int</span> l, r; cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">    <span class="keyword">if</span> (r &lt; <span class="number">4</span>)</span><br><span class="line">    {</span><br><span class="line">        cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (l != r)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (r % <span class="number">2</span> == <span class="number">0</span>) cout &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; r - <span class="number">2</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; r - <span class="number">3</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=<span class="built_in">sqrt</span>(l);i++)</span><br><span class="line">        <span class="keyword">if</span> (l % i == <span class="number">0</span>)</span><br><span class="line">        {</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; <span class="string">' '</span> &lt;&lt; l - i &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">    cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="D-Plus-Minus-Permutation"><a href="#D-Plus-Minus-Permutation" class="headerlink" title="D. Plus Minus Permutation"></a>D. Plus Minus Permutation</h2><p>要加的数：<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="13.579ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 6002.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mrow"><g data-mml-node="mo"><path data-c="230A" d="M174 734Q174 735 175 737T177 740T180 744T184 747T189 749T196 750Q206 748 214 735V-210H310H373Q401 -210 411 -213T422 -230T411 -247T369 -251Q362 -251 338 -251T298 -250H190Q178 -246 174 -234V734Z"></path></g><g data-mml-node="mi" transform="translate(444,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1044,0)"><g data-mml-node="mo"><path data-c="F7" d="M318 466Q318 500 339 518T386 537Q418 537 438 517T458 466Q458 438 440 417T388 396Q355 396 337 417T318 466ZM56 237T56 250T70 270H706Q721 262 721 250T706 230H70Q56 237 56 250ZM318 34Q318 68 339 86T386 105Q418 105 438 85T458 34Q458 6 440 -15T388 -36Q355 -36 337 -15T318 34Z"></path></g></g><g data-mml-node="mi" transform="translate(1822,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(2394,0)"><path data-c="230B" d="M229 734Q229 735 230 737T232 740T235 744T239 747T244 749T251 750Q262 748 269 735V-235Q266 -240 256 -249L147 -250H77Q43 -250 32 -247T21 -230T32 -213T72 -209Q79 -209 99 -209T133 -210H229V734Z"></path></g></g><g data-mml-node="mo" transform="translate(3115.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(4171.6,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(4604.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="msub" transform="translate(5204.6,0)"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mn" transform="translate(394,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></mjx-container>。</p>
<p>要减的数：<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="13.394ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 5920.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mrow"><g data-mml-node="mo"><path data-c="230A" d="M174 734Q174 735 175 737T177 740T180 744T184 747T189 749T196 750Q206 748 214 735V-210H310H373Q401 -210 411 -213T422 -230T411 -247T369 -251Q362 -251 338 -251T298 -250H190Q178 -246 174 -234V734Z"></path></g><g data-mml-node="mi" transform="translate(444,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1044,0)"><g data-mml-node="mo"><path data-c="F7" d="M318 466Q318 500 339 518T386 537Q418 537 438 517T458 466Q458 438 440 417T388 396Q355 396 337 417T318 466ZM56 237T56 250T70 270H706Q721 262 721 250T706 230H70Q56 237 56 250ZM318 34Q318 68 339 86T386 105Q418 105 438 85T458 34Q458 6 440 -15T388 -36Q355 -36 337 -15T318 34Z"></path></g></g><g data-mml-node="mi" transform="translate(1822,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2312,0)"><path data-c="230B" d="M229 734Q229 735 230 737T232 740T235 744T239 747T244 749T251 750Q262 748 269 735V-235Q266 -240 256 -249L147 -250H77Q43 -250 32 -247T21 -230T32 -213T72 -209Q79 -209 99 -209T133 -210H229V734Z"></path></g></g><g data-mml-node="mo" transform="translate(3033.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(4089.6,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(4522.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="msub" transform="translate(5122.6,0)"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mn" transform="translate(394,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container>。</p>
<p>也减也加的数：从 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 572 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></svg></mjx-container> 和 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="1.109ex" height="1.464ex" role="img" focusable="false" viewBox="0 -442 490 647"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 中，找出最大公倍数中出现的次数，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="28.516ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 12604.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mrow"><g data-mml-node="mo"><path data-c="230A" d="M174 734Q174 735 175 737T177 740T180 744T184 747T189 749T196 750Q206 748 214 735V-210H310H373Q401 -210 411 -213T422 -230T411 -247T369 -251Q362 -251 338 -251T298 -250H190Q178 -246 174 -234V734Z"></path></g><g data-mml-node="mi" transform="translate(444,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1044,0)"><g data-mml-node="mo"><path data-c="F7" d="M318 466Q318 500 339 518T386 537Q418 537 438 517T458 466Q458 438 440 417T388 396Q355 396 337 417T318 466ZM56 237T56 250T70 270H706Q721 262 721 250T706 230H70Q56 237 56 250ZM318 34Q318 68 339 86T386 105Q418 105 438 85T458 34Q458 6 440 -15T388 -36Q355 -36 337 -15T318 34Z"></path></g></g><g data-mml-node="mo" transform="translate(1822,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2211,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(3005.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mi" transform="translate(4005.4,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(4717.7,0)"><path data-c="F7" d="M318 466Q318 500 339 518T386 537Q418 537 438 517T458 466Q458 438 440 417T388 396Q355 396 337 417T318 466ZM56 237T56 250T70 270H706Q721 262 721 250T706 230H70Q56 237 56 250ZM318 34Q318 68 339 86T386 105Q418 105 438 85T458 34Q458 6 440 -15T388 -36Q355 -36 337 -15T318 34Z"></path></g><g data-mml-node="mi" transform="translate(5717.9,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(6194.9,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(6627.9,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(7147.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(7536.9,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(8108.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(8553.6,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(9043.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(9432.6,0)"><path data-c="230B" d="M229 734Q229 735 230 737T232 740T235 744T239 747T244 749T251 750Q262 748 269 735V-235Q266 -240 256 -249L147 -250H77Q43 -250 32 -247T21 -230T32 -213T72 -209Q79 -209 99 -209T133 -210H229V734Z"></path></g></g><g data-mml-node="mo" transform="translate(10154.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(11210.1,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(11643.1,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(12243.1,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></svg></mjx-container>。</p>
<p>答案就是：<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="60.012ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 26525.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1211.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(2211.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3033.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(4033.9,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(4466.9,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="msub" transform="translate(5066.9,0)"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mn" transform="translate(394,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(6086.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(7086.9,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(7586.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(8198.1,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mi" transform="translate(9198.3,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(9631.3,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="msub" transform="translate(10231.3,0)"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mn" transform="translate(394,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(11251.1,0)"><path data-c="F7" d="M318 466Q318 500 339 518T386 537Q418 537 438 517T458 466Q458 438 440 417T388 396Q355 396 337 417T318 466ZM56 237T56 250T70 270H706Q721 262 721 250T706 230H70Q56 237 56 250ZM318 34Q318 68 339 86T386 105Q418 105 438 85T458 34Q458 6 440 -15T388 -36Q355 -36 337 -15T318 34Z"></path></g><g data-mml-node="mn" transform="translate(12251.3,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(12973.6,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mo" transform="translate(13973.8,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(14362.8,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(15085,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(16085.2,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(16807.4,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(17807.7,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(18240.7,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="msub" transform="translate(18840.7,0)"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mn" transform="translate(394,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(19860.4,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(20860.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(21360.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(21971.9,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mi" transform="translate(22972.1,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(23405.1,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="msub" transform="translate(24005.1,0)"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mn" transform="translate(394,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(25024.9,0)"><path data-c="F7" d="M318 466Q318 500 339 518T386 537Q418 537 438 517T458 466Q458 438 440 417T388 396Q355 396 337 417T318 466ZM56 237T56 250T70 270H706Q721 262 721 250T706 230H70Q56 237 56 250ZM318 34Q318 68 339 86T386 105Q418 105 438 85T458 34Q458 6 440 -15T388 -36Q355 -36 337 -15T318 34Z"></path></g><g data-mml-node="mn" transform="translate(26025.1,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></svg></mjx-container>。</p>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    LL n,x,y;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;x&gt;&gt;y;</span><br><span class="line">    LL cnt1 = n/x,cnt2=n/y;</span><br><span class="line">    LL cnt = n/(x*y/__gcd(x,y));</span><br><span class="line">    cnt1-=cnt;</span><br><span class="line">    cnt2-=cnt;</span><br><span class="line">    cout&lt;&lt;(n+n-cnt1+<span class="number">1</span>)*cnt1/<span class="number">2</span>-(<span class="number">1</span>+<span class="number">1</span>+cnt2<span class="number">-1</span>)*cnt2/<span class="number">2</span>&lt;&lt;endl;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="E-Data-Structures-Fan"><a href="#E-Data-Structures-Fan" class="headerlink" title="E. Data Structures Fan"></a>E. Data Structures Fan</h2><p>先求出所有 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.507ex" role="img" focusable="false" viewBox="0 -666 500 666"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container> 的异或和，还有所有 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 500 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container> 的异或，求哪个就输出哪个即可，再修改时，我们需要将 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 500 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container> 和 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.507ex" role="img" focusable="false" viewBox="0 -666 500 666"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container></p>
<p>的异或区间和分别异或 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="4.46ex" height="1.756ex" role="img" focusable="false" viewBox="0 -694 1971.4 776"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(520.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1520.4,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 这个区间的异或和。 </p>
<h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">int</span> n; cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">10</span>)</span>,<span class="title">sum</span><span class="params">(n+<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; a[i],sum[i]=sum[i<span class="number">-1</span>]^a[i];</span><br><span class="line">    string op; cin &gt;&gt; op;</span><br><span class="line">    <span class="type">int</span> sum1 = <span class="number">0</span>, sum2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (op[i] == <span class="string">'0'</span>) sum2 ^= a[i + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">else</span> sum1 ^= a[i + <span class="number">1</span>];</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> q; cin &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--)</span><br><span class="line">    {</span><br><span class="line">        <span class="type">int</span> cnt;</span><br><span class="line">        cin &gt;&gt; cnt;</span><br><span class="line">        <span class="keyword">if</span> (cnt == <span class="number">2</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="type">int</span> x; cin &gt;&gt; x;</span><br><span class="line">            <span class="keyword">if</span> (x == <span class="number">0</span>) cout &lt;&lt; sum2 &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">            <span class="keyword">else</span> cout &lt;&lt; sum1 &lt;&lt;<span class="string">' '</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">            <span class="type">int</span> l, r; cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">            sum1 ^= sum[r] ^ sum[l - <span class="number">1</span>];</span><br><span class="line">            sum2 ^= sum[r] ^ sum[l - <span class="number">1</span>];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="F-Selling-a-Menagerie"><a href="#F-Selling-a-Menagerie" class="headerlink" title="F. Selling a Menagerie"></a>F. Selling a Menagerie</h2><p>先进行拓扑排序，将没有入度的点全部卖掉。</p>
<p>我们怎么处理环呢？最后经过拓扑排序后，最多只会剩下一个环或者剩下一些零散的环。</p>
<p>对于一个环，维护一个最小值，将环上的全部以 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.507ex" role="img" focusable="false" viewBox="0 -666 500 666"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></svg></mjx-container> 倍价值卖出，最后再卖出最小值的那个点，即可。</p>
<h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> _, n;</span><br><span class="line"><span class="type">int</span> ind[N];</span><br><span class="line"><span class="type">int</span> a[N], c[N];</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="type">int</span> minn = <span class="number">1e9</span>, id, j;</span><br><span class="line">vector&lt; <span class="type">int</span> &gt; ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    queue&lt; <span class="type">int</span> &gt; q;</span><br><span class="line">    <span class="built_in">fup</span>(i, <span class="number">1</span>, n)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span>(!ind[i])</span><br><span class="line">        {</span><br><span class="line">            q.<span class="built_in">push</span>(i);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    {</span><br><span class="line">        <span class="type">int</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">        ans.<span class="built_in">eb</span>(u);</span><br><span class="line">        vis[u] = <span class="number">1</span>;</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(!(--ind[a[u]]))</span><br><span class="line">        {</span><br><span class="line">            q.<span class="built_in">push</span>(a[u]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span>(vis[u]) <span class="keyword">return</span> ;</span><br><span class="line">    vis[u] = <span class="number">1</span>;</span><br><span class="line">    j = a[u];</span><br><span class="line">    <span class="keyword">if</span>(minn &gt; c[j]) minn = c[j], id = j;</span><br><span class="line">    <span class="built_in">dfs</span>(j);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    ans.<span class="built_in">clear</span>();</span><br><span class="line">    fin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">fup</span>(i, <span class="number">1</span>, n)    vis[i] = <span class="number">0</span>, ind[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">fup</span>(i, <span class="number">1</span>, n)    fin &gt;&gt; a[i], ind[a[i]]++;</span><br><span class="line">    <span class="built_in">fup</span>(i, <span class="number">1</span>, n)    fin &gt;&gt; c[i];</span><br><span class="line">    <span class="built_in">tp</span>();</span><br><span class="line">    <span class="built_in">fup</span>(i, <span class="number">1</span>, n)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])</span><br><span class="line">        {</span><br><span class="line">            minn = c[i];</span><br><span class="line">            id = i;</span><br><span class="line">            <span class="built_in">dfs</span>(i);</span><br><span class="line">            <span class="type">int</span> x = a[id];</span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">            {</span><br><span class="line">                ans.<span class="built_in">eb</span>(x);</span><br><span class="line">                x = a[x];</span><br><span class="line">            } <span class="keyword">while</span>(x != a[id]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : ans)</span><br><span class="line">    {</span><br><span class="line">        fout &lt;&lt; i &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    }</span><br><span class="line">    fout &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="G-Replace-With-Product"><a href="#G-Replace-With-Product" class="headerlink" title="G. Replace With Product"></a>G. Replace With Product</h2><p>通过贪心，我们肯定是选择非 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.507ex" role="img" focusable="false" viewBox="0 -666 500 666"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container> 的区间。</p>
<p>但一些情况可能分段：</p>
<ul>
<li><p>对于乘积超过 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.25ex" height="2.005ex" role="img" focusable="false" viewBox="0 -864 1436.6 886"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mn" transform="translate(1033,393.1) scale(0.707)"><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"></path></g></g></g></g></svg></mjx-container> 我们肯定选择这段区间，因为加和再怎么加，也不会超过这一段相乘。</p>
</li>
<li><p>对于乘积小于 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.25ex" height="2.005ex" role="img" focusable="false" viewBox="0 -864 1436.6 886"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mn" transform="translate(1033,393.1) scale(0.707)"><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"></path></g></g></g></g></svg></mjx-container> 我们就直接暴力枚举每对位置即可，在这里我们需要用到前缀和，前缀积优化，否则时间复杂度过大，最后取得最大值的那段区间就是答案。 </p>
</li>
</ul>
<p>如果 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.674ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 298 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g></g></g></svg></mjx-container> 没有被改变，那么就是无解，输出 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="2.891ex" height="1.692ex" role="img" focusable="false" viewBox="0 -666 1278 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(778,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container>。</p>
<h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">int</span> n,l=<span class="number">-1</span>,r=<span class="number">-1</span>;<span class="comment">//表示答案区间</span></span><br><span class="line">    ll s=<span class="number">1</span>;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    mul[<span class="number">0</span>]=<span class="number">1</span>;<span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span>(a[i]!=<span class="number">1</span>)</span><br><span class="line">        {</span><br><span class="line">            v.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="keyword">if</span>(l==<span class="number">-1</span>) l=i;<span class="comment">//第一个非1数字</span></span><br><span class="line">            r=i;<span class="comment">//最后一个非1数字</span></span><br><span class="line">        }</span><br><span class="line">        sum[i]=sum[i<span class="number">-1</span>]+a[i];</span><br><span class="line">        mul[i]=mul[i<span class="number">-1</span>]*a[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    {</span><br><span class="line">        s*=a[i];</span><br><span class="line">        <span class="keyword">if</span>(s&gt;=<span class="number">1e9</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,l,r);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    ll mx=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;v.<span class="built_in">size</span>();i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;v.<span class="built_in">size</span>();j++)</span><br><span class="line">        {</span><br><span class="line">            <span class="type">int</span> x=v[i],y=v[j];</span><br><span class="line">            <span class="keyword">if</span>(sum[x<span class="number">-1</span>]+mul[y]/mul[x<span class="number">-1</span>]+sum[n]-sum[y]&gt;mx)</span><br><span class="line">            {</span><br><span class="line">                mx=sum[x<span class="number">-1</span>]+mul[y]/mul[x<span class="number">-1</span>]+sum[n]-sum[y];</span><br><span class="line">                l=x,r=y;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(l==<span class="number">-1</span>) l=<span class="number">1</span>,r=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,l,r);</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>codeforces</category>
      </categories>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>arc174a_A_Multiply</title>
    <url>/2024/04/25/arc174a-A-Multiply/</url>
    <content><![CDATA[<h1 id="Multiply"><a href="#Multiply" class="headerlink" title="Multiply"></a>Multiply</h1><span id="more"></span>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>本题就是让你找到一个区间，使他乘上 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.98ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 433 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g></g></g></svg></mjx-container>，让序列最大。</p>
<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>根据题意我们可以想到，本题为分类讨论：</p>
<ul>
<li>当 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="5.442ex" height="1.819ex" role="img" focusable="false" viewBox="0 -666 2405.6 804"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(849.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mn" transform="translate(1905.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container> 时。</li>
</ul>
<p>我们求出最小子序列，让他乘上 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.98ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 433 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g></g></g></svg></mjx-container> 能够使序列最大。</p>
<ul>
<li>当 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="5.442ex" height="1.597ex" role="img" focusable="false" viewBox="0 -666 2405.6 706"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(849.8,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="mn" transform="translate(1905.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container> 时。</li>
</ul>
<p>我们求出最小子序列，让他乘上 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.98ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 433 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g></g></g></svg></mjx-container> 能够使序列最大。</p>
<p>但要注意，还有可能，没有操作的情况，就是当 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="5.442ex" height="1.819ex" role="img" focusable="false" viewBox="0 -666 2405.6 804"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(849.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mn" transform="translate(1905.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container> 时，最小值大于 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 500 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container> 或者当 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="5.442ex" height="1.597ex" role="img" focusable="false" viewBox="0 -666 2405.6 706"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(849.8,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="mn" transform="translate(1905.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container> 时，最大值小于 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 500 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container>，这样的话我们就不需要操作，因此我们可以再求最大或最小子序列时通过 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 500 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container> 来控制一下。</p>
<p><code>ans = min(min(ans, b[i]), 0ll); ans = max(0ll, max(ans, b[i]));</code></p>
<p>这就是做特判的地方。</p>
<p>最后将序列和减去字段和，加上字段和乘上 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.98ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 433 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g></g></g></svg></mjx-container> 就是本题的答案。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls (rt &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs (rt &lt;&lt; 1 | 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) x &amp; -x</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fup(x, l, r) for (int x = (l), eNd = (r); x &lt;= eNd; ++ x )</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fdw(x, r, l) for (int x = (r), eNd = (l); x &gt;= eNd; -- x )</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">fastread</span> {</span><br><span class="line">	<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">	fastread&amp; <span class="keyword">operator</span> &gt;&gt;(T&amp; x) {</span><br><span class="line">		x = <span class="number">0</span>; <span class="type">bool</span> flg = <span class="literal">false</span>; <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">		<span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) flg |= (c == <span class="string">'-'</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">		<span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>) x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + c - <span class="string">'0'</span>, c = <span class="built_in">getchar</span>();</span><br><span class="line">		<span class="keyword">if</span> (flg) x = -x; <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">	fastread&amp; <span class="keyword">operator</span> &gt;&gt;(vector&lt;T&gt;&amp; x) {</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> it = x.<span class="built_in">begin</span>(); it != x.<span class="built_in">end</span>(); ++ it ) (*<span class="keyword">this</span>) &gt;&gt; *it;</span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">	}</span><br><span class="line">}fin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">fastwrite</span> {</span><br><span class="line">	<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">	fastwrite&amp; <span class="keyword">operator</span> &lt;&lt;(T x) {</span><br><span class="line">		<span class="keyword">if</span> (x &lt; <span class="number">0</span>) x = -x, <span class="built_in">putchar</span>(<span class="string">'-'</span>);</span><br><span class="line">		<span class="type">static</span> <span class="type">int</span> buf[<span class="number">35</span>]; <span class="type">int</span> top = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">do</span> buf[top ++ ] = x % <span class="number">10</span>, x /= <span class="number">10</span>; <span class="keyword">while</span> (x);</span><br><span class="line">		<span class="keyword">while</span> (top) <span class="built_in">putchar</span>(buf[ -- top] + <span class="string">'0'</span>);</span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">	}</span><br><span class="line">	fastwrite&amp; <span class="keyword">operator</span> &lt;&lt;(<span class="type">char</span> x) {</span><br><span class="line">		<span class="built_in">putchar</span>(x); <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">	fastwrite&amp; <span class="keyword">operator</span> &lt;&lt;(vector&lt;T&gt; x) {</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> it = x.<span class="built_in">begin</span>(); it != x.<span class="built_in">end</span>(); ++ it ) (*<span class="keyword">this</span>) &lt;&lt; *it, <span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">	}</span><br><span class="line">}fout;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> P = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, c;</span><br><span class="line"><span class="type">int</span> a[N], b[N];</span><br><span class="line"><span class="type">int</span> ans; </span><br><span class="line"> </span><br><span class="line"><span class="built_in">main</span>(<span class="type">void</span>)</span><br><span class="line">{</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	fin &gt;&gt; n &gt;&gt; c;</span><br><span class="line">	<span class="built_in">fup</span>(i, <span class="number">1</span>, n)	fin &gt;&gt; a[i], ans += a[i];</span><br><span class="line">	<span class="keyword">if</span>(c &lt;= <span class="number">0</span>)</span><br><span class="line">	{</span><br><span class="line">		<span class="built_in">fup</span>(i, <span class="number">1</span>, n)</span><br><span class="line">		{</span><br><span class="line">			<span class="keyword">if</span>(i == <span class="number">1</span>)	b[i] = a[i];</span><br><span class="line">			b[i] = <span class="built_in">min</span>(b[i - <span class="number">1</span>] + a[i], a[i]);</span><br><span class="line">			ans = <span class="built_in">min</span>(<span class="built_in">min</span>(ans, b[i]), <span class="number">0ll</span>);</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	{</span><br><span class="line">		<span class="built_in">fup</span>(i, <span class="number">1</span>, n)</span><br><span class="line">		{</span><br><span class="line">			<span class="keyword">if</span>(i == <span class="number">1</span>)	b[i] = a[i];</span><br><span class="line">			b[i] = <span class="built_in">max</span>(b[i - <span class="number">1</span>] + a[i], a[i]);</span><br><span class="line">			ans = <span class="built_in">max</span>(<span class="number">0ll</span>, <span class="built_in">max</span>(ans, b[i]));</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">	<span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fup</span>(i, <span class="number">1</span>, n)</span><br><span class="line">	{</span><br><span class="line">		sum += a[i];</span><br><span class="line">	}</span><br><span class="line">	sum -= ans;</span><br><span class="line">	sum += ans * c;</span><br><span class="line">	fout &lt;&lt; sum &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>代码可能有些抽象，请谅解。</p>
]]></content>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>欧拉公式</title>
    <url>/2024/04/26/%E6%AC%A7%E6%8B%89%E5%85%AC%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="欧拉公式"><a href="#欧拉公式" class="headerlink" title="欧拉公式"></a>欧拉公式</h2><span id="more"></span>
<h3 id="欧拉数组构造"><a href="#欧拉数组构造" class="headerlink" title="欧拉数组构造"></a>欧拉数组构造</h3><p>设 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="3.961ex" height="2.009ex" role="img" focusable="false" viewBox="0 -694 1751 888"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(503,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="msub" transform="translate(1079,0)"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(378,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container> 为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewBox="0 -661 345 672"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 的值</p>
<p>欧拉筛求欧拉函数，由已知的公式得到，如果当前 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewBox="0 -661 345 672"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 为素数时，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="11.656ex" height="2.009ex" role="img" focusable="false" viewBox="0 -694 5152 888"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(503,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="msub" transform="translate(1079,0)"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(378,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(2028.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3084.5,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3651.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(4652,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container> ，如果  <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="15.548ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 6872.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(622.8,0)"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(833,0)"></path><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1333,0)"></path></g><g data-mml-node="mi" transform="translate(2789.6,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(3292.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(3570.6,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(3982.6,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(4538.3,0)"><g data-mml-node="text"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="text" transform="translate(778,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g></g><g data-mml-node="mn" transform="translate(6372.1,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container>，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="11.354ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 5018.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(503,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(1079,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1424,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(1702,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2269.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mi" transform="translate(3269.4,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(3772.4,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(4050.4,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(4462.4,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(4740.4,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container> = <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="11.354ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 5018.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(503,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(1079,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1424,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(1702,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2047,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(2547.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mi" transform="translate(3547.4,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(4050.4,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(4328.4,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(4740.4,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></p>
<p>否则 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="11.354ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 5018.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(503,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(1079,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1424,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(1702,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2269.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mi" transform="translate(3269.4,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(3772.4,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(4050.4,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(4462.4,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(4740.4,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container> = <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="15.834ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 6998.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(503,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(1079,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1424,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(1702,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2047,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(2547.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mi" transform="translate(3547.4,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(4050.4,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(4626.4,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(4971.4,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(5249.4,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(5752.4,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(6030.4,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(6442.4,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(6720.4,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container>，详情请看代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">prime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    phi[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">fup</span>(i, <span class="number">2</span>, N)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span>(!vis[i]) p[++m] = i, phi[i] = i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m &amp;&amp; i * p[j] &lt;= N; j++)</span><br><span class="line">        {</span><br><span class="line">            vis[i * p[j]] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % p[j] == <span class="number">0</span>)</span><br><span class="line">            {</span><br><span class="line">                phi[p[j] * i] = phi[i] * p[j];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            phi[p[j] * i] = phi[i] * phi[p[j]];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h3 id="欧拉定理"><a href="#欧拉定理" class="headerlink" title="欧拉定理"></a>欧拉定理</h3><p>若 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="13.333ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 5893.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(477,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(910,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(1430,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1819,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(2348,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2792.7,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3670.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(4337.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(5393.2,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container>，则 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="20.264ex" height="2.587ex" role="img" focusable="false" viewBox="0 -893.3 8956.6 1143.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(562,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D711" d="M92 210Q92 176 106 149T142 108T185 85T220 72L235 70L237 71L250 112Q268 170 283 211T322 299T370 375T429 423T502 442Q547 442 582 410T618 302Q618 224 575 152T457 35T299 -10Q273 -10 273 -12L266 -48Q260 -83 252 -125T241 -179Q236 -203 215 -212Q204 -218 190 -218Q159 -215 159 -185Q159 -175 214 -2L209 0Q204 2 195 5T173 14T147 28T120 46T94 71T71 103T56 142T50 190Q50 238 76 311T149 431H162Q183 431 183 423Q183 417 175 409Q134 361 114 300T92 210ZM574 278Q574 320 550 344T486 369Q437 369 394 329T323 218Q309 184 295 109L286 64Q304 62 306 62Q423 62 498 131T574 278Z"></path></g><g data-mml-node="mo" transform="translate(654,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1043,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1921,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2523.2,0)"><path data-c="2261" d="M56 444Q56 457 70 464H707Q722 456 722 444Q722 430 706 424H72Q56 429 56 444ZM56 237T56 250T70 270H707Q722 262 722 250T707 230H70Q56 237 56 250ZM56 56Q56 71 72 76H706Q722 70 722 56Q722 44 707 36H70Q56 43 56 56Z"></path></g><g data-mml-node="mn" transform="translate(3579,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mspace" transform="translate(4079,0)"></g><g data-mml-node="mo" transform="translate(4523,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4912,0)"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(833,0)"></path><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1333,0)"></path></g><g data-mml-node="mspace" transform="translate(6801,0)"></g><g data-mml-node="mi" transform="translate(7300.6,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(8178.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(8567.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>。</p>
<h3 id="扩欧"><a href="#扩欧" class="headerlink" title="扩欧"></a>扩欧</h3><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="21.571ex" height="2.044ex" role="img" focusable="false" viewBox="0 -893.3 9534.3 903.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,363) scale(0.707)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g><g data-mml-node="mo" transform="translate(1193.1,0)"><path data-c="2261" d="M56 444Q56 457 70 464H707Q722 456 722 444Q722 430 706 424H72Q56 429 56 444ZM56 237T56 250T70 270H707Q722 262 722 250T707 230H70Q56 237 56 250ZM56 56Q56 71 72 76H706Q722 70 722 56Q722 44 707 36H70Q56 43 56 56Z"></path></g><g data-mml-node="msup" transform="translate(2248.9,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(562,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mspace" transform="translate(429,0)"></g><g data-mml-node="mo" transform="translate(873,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1262,0)"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(833,0)"></path><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1333,0)"></path></g><g data-mml-node="mspace" transform="translate(3151,0)"></g><g data-mml-node="mi" transform="translate(3650.7,0)"><path data-c="1D711" d="M92 210Q92 176 106 149T142 108T185 85T220 72L235 70L237 71L250 112Q268 170 283 211T322 299T370 375T429 423T502 442Q547 442 582 410T618 302Q618 224 575 152T457 35T299 -10Q273 -10 273 -12L266 -48Q260 -83 252 -125T241 -179Q236 -203 215 -212Q204 -218 190 -218Q159 -215 159 -185Q159 -175 214 -2L209 0Q204 2 195 5T173 14T147 28T120 46T94 71T71 103T56 142T50 190Q50 238 76 311T149 431H162Q183 431 183 423Q183 417 175 409Q134 361 114 300T92 210ZM574 278Q574 320 550 344T486 369Q437 369 394 329T323 218Q309 184 295 109L286 64Q304 62 306 62Q423 62 498 131T574 278Z"></path></g><g data-mml-node="mo" transform="translate(4304.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4693.7,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(5571.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5960.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(6738.7,0)"><path data-c="1D711" d="M92 210Q92 176 106 149T142 108T185 85T220 72L235 70L237 71L250 112Q268 170 283 211T322 299T370 375T429 423T502 442Q547 442 582 410T618 302Q618 224 575 152T457 35T299 -10Q273 -10 273 -12L266 -48Q260 -83 252 -125T241 -179Q236 -203 215 -212Q204 -218 190 -218Q159 -215 159 -185Q159 -175 214 -2L209 0Q204 2 195 5T173 14T147 28T120 46T94 71T71 103T56 142T50 190Q50 238 76 311T149 431H162Q183 431 183 423Q183 417 175 409Q134 361 114 300T92 210ZM574 278Q574 320 550 344T486 369Q437 369 394 329T323 218Q309 184 295 109L286 64Q304 62 306 62Q423 62 498 131T574 278Z"></path></g><g data-mml-node="mo" transform="translate(7392.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(7781.7,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(8659.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(9048.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></g></g></svg></mjx-container>。</p>
<p><a href="https://www.luogu.com.cn/problem/P4139">例题</a>。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> _;</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line"><span class="type">int</span> p[N], m;</span><br><span class="line"><span class="type">int</span> phi[N];</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fpm</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> n, <span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span>(n &amp; <span class="number">1</span>)</span><br><span class="line">        {</span><br><span class="line">            res = res * a % t;</span><br><span class="line">        }</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        a = a * a % t;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">prime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    phi[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">fup</span>(i, <span class="number">2</span>, N - <span class="number">5</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span>(!vis[i]) p[++m] = i, phi[i] = i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m &amp;&amp; i * p[j] &lt;= N - <span class="number">5</span>; j++)</span><br><span class="line">        {</span><br><span class="line">            vis[i * p[j]] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(!(i % p[j]))</span><br><span class="line">            {</span><br><span class="line">                phi[p[j] * i] = phi[i] * p[j];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            phi[p[j] * i] = phi[i] * (p[j] - <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> (t == <span class="number">1</span>) ? <span class="number">0</span> : <span class="built_in">fpm</span>(<span class="number">2</span>, <span class="built_in">solve</span>(phi[t]) + phi[t], t);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    fin &gt;&gt; _;</span><br><span class="line">    <span class="built_in">prime</span>();</span><br><span class="line">    <span class="comment">//fup(i, 1, 1e6)  fout &lt;&lt; phi[i] &lt;&lt; ' ';</span></span><br><span class="line">    <span class="keyword">while</span> (_--)</span><br><span class="line">    {</span><br><span class="line">        fin &gt;&gt; t;</span><br><span class="line">        fout &lt;&lt; <span class="built_in">solve</span>(t) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>KDJ</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>模板</title>
    <url>/2024/05/19/%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<h1 id="算法模板收集"><a href="#算法模板收集" class="headerlink" title="算法模板收集"></a>算法模板收集</h1><span id="more"></span>
<h1 id="jiangly算法模板收集"><a href="#jiangly算法模板收集" class="headerlink" title="jiangly算法模板收集"></a><a href="https://www.cnblogs.com/WIDA/p/17633758.html" title="发布于 2023-09-01 18:26">jiangly算法模板收集</a></h1><hr>
<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul>
<li><a href="#声明">声明</a></li>
<li><a href="#目录">目录</a></li>
<li><a href="#一杂类">一、杂类</a><ul>
<li><a href="#01---int128-输出流自定义">01 - int128 输出流自定义</a></li>
<li><a href="#02---常用库函数重载">02 - 常用库函数重载</a></li>
</ul>
</li>
<li><a href="#二图与网络">二、图与网络</a><ul>
<li><a href="#01---强连通分量缩点scc">01 - 强连通分量缩点（SCC）</a></li>
<li><a href="#02---割边与割边缩点ebcc">02 - 割边与割边缩点（EBCC）</a></li>
<li><a href="#03---二分图最大权匹配maxassignment-基于km久远">03 - 二分图最大权匹配（MaxAssignment 基于KM）【久远】</a></li>
<li><a href="#04---一般图最大匹配graph-带花树算法久远">04 - 一般图最大匹配（Graph 带花树算法）【久远】</a></li>
<li><a href="#05---twosat2-sat">05 - TwoSat（2-Sat）</a></li>
<li><a href="#06a---最大流flow-旧版其一整数应用">06A - 最大流（Flow 旧版其一，整数应用）</a></li>
<li><a href="#06b---最大流flow-旧版其二浮点数应用">06B - 最大流（Flow 旧版其二，浮点数应用）</a></li>
<li><a href="#06c---最大流maxflow-新版">06C - 最大流（MaxFlow 新版）</a></li>
<li><a href="#07a---费用流mcfgraph-最小费用可行流">07A - 费用流（MCFGraph 最小费用可行流）</a></li>
<li><a href="#07b---费用流mcfgraph-最小费用最大流">07B - 费用流（MCFGraph 最小费用最大流）</a></li>
<li><a href="#08---树链剖分hld">08 - 树链剖分（HLD）</a></li>
</ul>
</li>
<li><a href="#三数论几何多项式">三、数论、几何、多项式</a><ul>
<li><a href="#01---快速幂">01 - 快速幂</a></li>
<li><a href="#02---欧拉筛">02 - 欧拉筛</a></li>
<li><a href="#03---莫比乌斯函数筛莫比乌斯函数反演">03 - 莫比乌斯函数筛（莫比乌斯函数/反演）</a></li>
<li><a href="#04---求解单个数的欧拉函数">04 - 求解单个数的欧拉函数</a></li>
<li><a href="#05---扩展欧几里得exgcd">05 - 扩展欧几里得（exGCD）</a></li>
<li><a href="#06---组合数comb-with-mint--mlong">06 - 组合数（Comb, with. MInt \&amp; MLong）</a></li>
<li><a href="#07---二项式binomial-任意模数计算">07 - 二项式（Binomial 任意模数计算）</a></li>
<li><a href="#08---素数测试与因式分解miller-rabin--pollard-rho">08 - 素数测试与因式分解（Miller-Rabin \&amp; Pollard-Rho）</a></li>
<li><a href="#09---平面几何">09 - 平面几何</a></li>
<li><a href="#10a---静态凸包with-point">10A - 静态凸包（with. Point）</a></li>
<li><a href="#10b---静态凸包with-stdcomplex">10B - 静态凸包（with. std::complex）</a></li>
<li><a href="#11a---多项式相关poly-with-z">11A - 多项式相关（Poly, with. Z）</a></li>
<li><a href="#11b---多项式相关poly-with-mint--mlong">11B - 多项式相关（Poly, with. MInt \&amp; MLong）</a></li>
</ul>
</li>
<li><a href="#四数据结构">四、数据结构</a><ul>
<li><a href="#01a---树状数组fenwick-旧版">01A - 树状数组（Fenwick 旧版）</a></li>
<li><a href="#01b---树状数组fenwick-新版">01B - 树状数组（Fenwick 新版）</a></li>
<li><a href="#02---并查集dsu">02 - 并查集（DSU）</a></li>
<li><a href="#03a---线段树segmenttree-基础区间加乘">03A - 线段树（SegmentTree 基础区间加乘）</a></li>
<li><a href="#03b---线段树segmenttreeinfo-查找前驱后继">03B - 线段树（SegmentTree+Info 查找前驱后继）</a></li>
<li><a href="#03c---线段树segmenttreeinfomerge-区间合并">03C - 线段树（SegmentTree+Info+Merge 区间合并）</a></li>
<li><a href="#04a---懒标记线段树lazysegmenttree-基础区间修改">04A - 懒标记线段树（LazySegmentTree 基础区间修改）</a></li>
<li><a href="#04b---懒标记线段树lazysegmenttree-查找前驱后继">04B - 懒标记线段树（LazySegmentTree 查找前驱后继）</a></li>
<li><a href="#04c---懒标记线段树lazysegmenttree-二分修改">04C - 懒标记线段树（LazySegmentTree 二分修改）</a></li>
<li><a href="#05a---取模类mlong--mint">05A - 取模类（MLong \&amp; MInt）</a></li>
<li><a href="#05b---取模类mlong--mint-新版">05B - 取模类（MLong \&amp; MInt 新版）</a></li>
<li><a href="#06---状压rmqrmq">06 - 状压RMQ（RMQ）</a></li>
<li><a href="#07---splay">07 - Splay</a></li>
<li><a href="#08---其他平衡树">08 - 其他平衡树</a></li>
<li><a href="#09---分数四则运算frac">09 - 分数四则运算（Frac）</a></li>
<li><a href="#10---线性基basis">10 - 线性基（Basis）</a></li>
</ul>
</li>
<li><a href="#五字符串">五、字符串</a><ul>
<li><a href="#01a---马拉车manacher-旧版">01A - 马拉车（Manacher 旧版）</a></li>
<li><a href="#01b---马拉车manacher-新版">01B - 马拉车（Manacher 新版）</a></li>
<li><a href="#02---z函数">02 - Z函数</a></li>
<li><a href="#03---后缀数组sa">03 - 后缀数组（SA）</a></li>
<li><a href="#04a---后缀自动机suffixautomaton-旧版">04A - 后缀自动机（SuffixAutomaton 旧版）</a></li>
<li><a href="#04b---后缀自动机sam-新版">04B - 后缀自动机（SAM 新版）</a></li>
<li><a href="#05---回文自动机pam">05 - 回文自动机（PAM）</a></li>
<li><a href="#06a---ac自动机ac-旧版">06A - AC自动机（AC 旧版）</a></li>
<li><a href="#06b---ac自动机ahocorasick-新版">06B - AC自动机（AhoCorasick 新版）</a></li>
<li><a href="#06c---ac自动机ahocorasick-新新版">06C - AC自动机（AhoCorasick 新新版）</a></li>
<li><a href="#07---随机生成模底-字符串哈希例题">07 - 随机生成模底 字符串哈希（例题）</a></li>
</ul>
</li>
</ul>
<hr>
<h1 id="一、杂类"><a href="#一、杂类" class="headerlink" title="一、杂类"></a>一、杂类</h1><h2 id="01-int128-输出流自定义"><a href="#01-int128-输出流自定义" class="headerlink" title="01 - int128 输出流自定义"></a>01 - int128 输出流自定义</h2><p><a href="https://codeforces.com/contest/1806/submission/198413531">2023-03-20</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> i128 = __int128;</span><br><span class="line"></span><br><span class="line">std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;os, i128 n) {</span><br><span class="line">    std::string s;</span><br><span class="line">    <span class="keyword">while</span> (n) {</span><br><span class="line">        s += <span class="string">'0'</span> + n % <span class="number">10</span>;</span><br><span class="line">        n /= <span class="number">10</span>;</span><br><span class="line">    }</span><br><span class="line">    std::<span class="built_in">reverse</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">return</span> os &lt;&lt; s;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="02-常用库函数重载"><a href="#02-常用库函数重载" class="headerlink" title="02 - 常用库函数重载"></a>02 - 常用库函数重载</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> i64 = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> i128 = __int128;</span><br><span class="line"></span><br><span class="line"><span class="function">i64 <span class="title">ceilDiv</span><span class="params">(i64 n, i64 m)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (n &gt;= <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">return</span> (n + m - <span class="number">1</span>) / m;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> n / m;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function">i64 <span class="title">floorDiv</span><span class="params">(i64 n, i64 m)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (n &gt;= <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">return</span> n / m;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="built_in">return</span> (n - m + <span class="number">1</span>) / m;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">chmax</span><span class="params">(T &amp;a, T b)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (a &lt; b) {</span><br><span class="line">        a = b;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function">i128 <span class="title">gcd</span><span class="params">(i128 a, i128 b)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> b ? <span class="built_in">gcd</span>(b, a % b) : a;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="二、图与网络"><a href="#二、图与网络" class="headerlink" title="二、图与网络"></a>二、图与网络</h1><h2 id="01-强连通分量缩点（SCC）"><a href="#01-强连通分量缩点（SCC）" class="headerlink" title="01 - 强连通分量缩点（SCC）"></a>01 - 强连通分量缩点（SCC）</h2><p><a href="https://codeforces.com/contest/1835/submission/210147209">2023-06-18</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">SCC</span> {</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; adj;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; stk;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; dfn, low, bel;</span><br><span class="line">    <span class="type">int</span> cur, cnt;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">SCC</span>() {}</span><br><span class="line">    <span class="built_in">SCC</span>(<span class="type">int</span> n) {</span><br><span class="line">        <span class="built_in">init</span>(n);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        adj.<span class="built_in">assign</span>(n, {});</span><br><span class="line">        dfn.<span class="built_in">assign</span>(n, <span class="number">-1</span>);</span><br><span class="line">        low.<span class="built_in">resize</span>(n);</span><br><span class="line">        bel.<span class="built_in">assign</span>(n, <span class="number">-1</span>);</span><br><span class="line">        stk.<span class="built_in">clear</span>();</span><br><span class="line">        cur = cnt = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>{</span><br><span class="line">        adj[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span> </span>{</span><br><span class="line">        dfn[x] = low[x] = cur++;</span><br><span class="line">        stk.<span class="built_in">push_back</span>(x);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> y : adj[x]) {</span><br><span class="line">            <span class="keyword">if</span> (dfn[y] == <span class="number">-1</span>) {</span><br><span class="line">                <span class="built_in">dfs</span>(y);</span><br><span class="line">                low[x] = std::<span class="built_in">min</span>(low[x], low[y]);</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (bel[y] == <span class="number">-1</span>) {</span><br><span class="line">                low[x] = std::<span class="built_in">min</span>(low[x], dfn[y]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (dfn[x] == low[x]) {</span><br><span class="line">            <span class="type">int</span> y;</span><br><span class="line">            <span class="keyword">do</span> {</span><br><span class="line">                y = stk.<span class="built_in">back</span>();</span><br><span class="line">                bel[y] = cnt;</span><br><span class="line">                stk.<span class="built_in">pop_back</span>();</span><br><span class="line">            } <span class="keyword">while</span> (y != x);</span><br><span class="line">            cnt++;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">work</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            <span class="keyword">if</span> (dfn[i] == <span class="number">-1</span>) {</span><br><span class="line">                <span class="built_in">dfs</span>(i);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> bel;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure>
<h2 id="02-割边与割边缩点（EBCC）"><a href="#02-割边与割边缩点（EBCC）" class="headerlink" title="02 - 割边与割边缩点（EBCC）"></a>02 - 割边与割边缩点（EBCC）</h2><p><a href="https://codeforces.com/contest/118/submission/205426518">2023-05-11</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::set&lt;std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; E;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">EBCC</span> {</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; adj;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; stk;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; dfn, low, bel;</span><br><span class="line">    <span class="type">int</span> cur, cnt;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">EBCC</span>() {}</span><br><span class="line">    <span class="built_in">EBCC</span>(<span class="type">int</span> n) {</span><br><span class="line">        <span class="built_in">init</span>(n);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        adj.<span class="built_in">assign</span>(n, {});</span><br><span class="line">        dfn.<span class="built_in">assign</span>(n, <span class="number">-1</span>);</span><br><span class="line">        low.<span class="built_in">resize</span>(n);</span><br><span class="line">        bel.<span class="built_in">assign</span>(n, <span class="number">-1</span>);</span><br><span class="line">        stk.<span class="built_in">clear</span>();</span><br><span class="line">        cur = cnt = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>{</span><br><span class="line">        adj[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        adj[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> p)</span> </span>{</span><br><span class="line">        dfn[x] = low[x] = cur++;</span><br><span class="line">        stk.<span class="built_in">push_back</span>(x);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> y : adj[x]) {</span><br><span class="line">            <span class="keyword">if</span> (y == p) {</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (dfn[y] == <span class="number">-1</span>) {</span><br><span class="line">                E.<span class="built_in">emplace</span>(x, y);</span><br><span class="line">                <span class="built_in">dfs</span>(y, x);</span><br><span class="line">                low[x] = std::<span class="built_in">min</span>(low[x], low[y]);</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (bel[y] == <span class="number">-1</span> &amp;&amp; dfn[y] &lt; dfn[x]) {</span><br><span class="line">                E.<span class="built_in">emplace</span>(x, y);</span><br><span class="line">                low[x] = std::<span class="built_in">min</span>(low[x], dfn[y]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (dfn[x] == low[x]) {</span><br><span class="line">            <span class="type">int</span> y;</span><br><span class="line">            <span class="keyword">do</span> {</span><br><span class="line">                y = stk.<span class="built_in">back</span>();</span><br><span class="line">                bel[y] = cnt;</span><br><span class="line">                stk.<span class="built_in">pop_back</span>();</span><br><span class="line">            } <span class="keyword">while</span> (y != x);</span><br><span class="line">            cnt++;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">work</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> bel;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Graph</span> {</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        std::vector&lt;std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; edges;</span><br><span class="line">        std::vector&lt;<span class="type">int</span>&gt; siz;</span><br><span class="line">        std::vector&lt;<span class="type">int</span>&gt; cnte;</span><br><span class="line">    };</span><br><span class="line">    <span class="function">Graph <span class="title">compress</span><span class="params">()</span> </span>{</span><br><span class="line">        Graph g;</span><br><span class="line">        g.n = cnt;</span><br><span class="line">        g.siz.<span class="built_in">resize</span>(cnt);</span><br><span class="line">        g.cnte.<span class="built_in">resize</span>(cnt);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            g.siz[bel[i]]++;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> j : adj[i]) {</span><br><span class="line">                <span class="keyword">if</span> (bel[i] &lt; bel[j]) {</span><br><span class="line">                    g.edges.<span class="built_in">emplace_back</span>(bel[i], bel[j]);</span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (i &lt; j) {</span><br><span class="line">                    g.cnte[bel[i]]++;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> g;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure>
<h2 id="03-二分图最大权匹配（MaxAssignment-基于KM）【久远】"><a href="#03-二分图最大权匹配（MaxAssignment-基于KM）【久远】" class="headerlink" title="03 - 二分图最大权匹配（MaxAssignment 基于KM）【久远】"></a>03 - 二分图最大权匹配（MaxAssignment 基于KM）【久远】</h2><p><a href="https://atcoder.jp/contests/abc247/submissions/30867023">2022-04-10</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MaxAssignment</span> {</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function">T <span class="title">solve</span><span class="params">(<span class="type">int</span> nx, <span class="type">int</span> ny, std::vector&lt;std::vector&lt;T&gt;&gt; a)</span> </span>{</span><br><span class="line">            <span class="built_in">assert</span>(<span class="number">0</span> &lt;= nx &amp;&amp; nx &lt;= ny);</span><br><span class="line">            <span class="built_in">assert</span>(<span class="built_in">int</span>(a.<span class="built_in">size</span>()) == nx);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nx; ++i) {</span><br><span class="line">                <span class="built_in">assert</span>(<span class="built_in">int</span>(a[i].<span class="built_in">size</span>()) == ny);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> x : a[i])</span><br><span class="line">                    <span class="built_in">assert</span>(x &gt;= <span class="number">0</span>);</span><br><span class="line">            }</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">auto</span> update = [&amp;](<span class="type">int</span> x) {</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">0</span>; y &lt; ny; ++y) {</span><br><span class="line">                    <span class="keyword">if</span> (lx[x] + ly[y] - a[x][y] &lt; slack[y]) {</span><br><span class="line">                        slack[y] = lx[x] + ly[y] - a[x][y];</span><br><span class="line">                        slackx[y] = x;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            };</span><br><span class="line">            </span><br><span class="line">            costs.<span class="built_in">resize</span>(nx + <span class="number">1</span>);</span><br><span class="line">            costs[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">            lx.<span class="built_in">assign</span>(nx, std::numeric_limits&lt;T&gt;::<span class="built_in">max</span>());</span><br><span class="line">            ly.<span class="built_in">assign</span>(ny, <span class="number">0</span>);</span><br><span class="line">            xy.<span class="built_in">assign</span>(nx, <span class="number">-1</span>);</span><br><span class="line">            yx.<span class="built_in">assign</span>(ny, <span class="number">-1</span>);</span><br><span class="line">            slackx.<span class="built_in">resize</span>(ny);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> cur = <span class="number">0</span>; cur &lt; nx; ++cur) {</span><br><span class="line">                std::queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">                visx.<span class="built_in">assign</span>(nx, <span class="literal">false</span>);</span><br><span class="line">                visy.<span class="built_in">assign</span>(ny, <span class="literal">false</span>);</span><br><span class="line">                slack.<span class="built_in">assign</span>(ny, std::numeric_limits&lt;T&gt;::<span class="built_in">max</span>());</span><br><span class="line">                p.<span class="built_in">assign</span>(nx, <span class="number">-1</span>);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">0</span>; x &lt; nx; ++x) {</span><br><span class="line">                    <span class="keyword">if</span> (xy[x] == <span class="number">-1</span>) {</span><br><span class="line">                        que.<span class="built_in">push</span>(x);</span><br><span class="line">                        visx[x] = <span class="literal">true</span>;</span><br><span class="line">                        <span class="built_in">update</span>(x);</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">                </span><br><span class="line">                <span class="type">int</span> ex, ey;</span><br><span class="line">                <span class="type">bool</span> found = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">while</span> (!found) {</span><br><span class="line">                    <span class="keyword">while</span> (!que.<span class="built_in">empty</span>() &amp;&amp; !found) {</span><br><span class="line">                        <span class="keyword">auto</span> x = que.<span class="built_in">front</span>();</span><br><span class="line">                        que.<span class="built_in">pop</span>();</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">0</span>; y &lt; ny; ++y) {</span><br><span class="line">                            <span class="keyword">if</span> (a[x][y] == lx[x] + ly[y] &amp;&amp; !visy[y]) {</span><br><span class="line">                                <span class="keyword">if</span> (yx[y] == <span class="number">-1</span>) {</span><br><span class="line">                                    ex = x;</span><br><span class="line">                                    ey = y;</span><br><span class="line">                                    found = <span class="literal">true</span>;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                }</span><br><span class="line">                                que.<span class="built_in">push</span>(yx[y]);</span><br><span class="line">                                p[yx[y]] = x;</span><br><span class="line">                                visy[y] = visx[yx[y]] = <span class="literal">true</span>;</span><br><span class="line">                                <span class="built_in">update</span>(yx[y]);</span><br><span class="line">                            }</span><br><span class="line">                        }</span><br><span class="line">                    }</span><br><span class="line">                    <span class="keyword">if</span> (found)</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    </span><br><span class="line">                    T delta = std::numeric_limits&lt;T&gt;::<span class="built_in">max</span>();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">0</span>; y &lt; ny; ++y)</span><br><span class="line">                        <span class="keyword">if</span> (!visy[y])</span><br><span class="line">                            delta = std::<span class="built_in">min</span>(delta, slack[y]);</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">0</span>; x &lt; nx; ++x)</span><br><span class="line">                        <span class="keyword">if</span> (visx[x])</span><br><span class="line">                            lx[x] -= delta;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">0</span>; y &lt; ny; ++y) {</span><br><span class="line">                        <span class="keyword">if</span> (visy[y]) {</span><br><span class="line">                            ly[y] += delta;</span><br><span class="line">                        } <span class="keyword">else</span> {</span><br><span class="line">                            slack[y] -= delta;</span><br><span class="line">                        }</span><br><span class="line">                    }</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">0</span>; y &lt; ny; ++y) {</span><br><span class="line">                        <span class="keyword">if</span> (!visy[y] &amp;&amp; slack[y] == <span class="number">0</span>) {</span><br><span class="line">                            <span class="keyword">if</span> (yx[y] == <span class="number">-1</span>) {</span><br><span class="line">                                ex = slackx[y];</span><br><span class="line">                                ey = y;</span><br><span class="line">                                found = <span class="literal">true</span>;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            }</span><br><span class="line">                            que.<span class="built_in">push</span>(yx[y]);</span><br><span class="line">                            p[yx[y]] = slackx[y];</span><br><span class="line">                            visy[y] = visx[yx[y]] = <span class="literal">true</span>;</span><br><span class="line">                            <span class="built_in">update</span>(yx[y]);</span><br><span class="line">                        }</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">                </span><br><span class="line">                costs[cur + <span class="number">1</span>] = costs[cur];</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> x = ex, y = ey, ty; x != <span class="number">-1</span>; x = p[x], y = ty) {</span><br><span class="line">                    costs[cur + <span class="number">1</span>] += a[x][y];</span><br><span class="line">                    <span class="keyword">if</span> (xy[x] != <span class="number">-1</span>)</span><br><span class="line">                        costs[cur + <span class="number">1</span>] -= a[x][xy[x]];</span><br><span class="line">                    ty = xy[x];</span><br><span class="line">                    xy[x] = y;</span><br><span class="line">                    yx[y] = x;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> costs[nx];</span><br><span class="line">        }</span><br><span class="line">        <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">assignment</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">return</span> xy;</span><br><span class="line">        }</span><br><span class="line">        std::pair&lt;std::vector&lt;T&gt;, std::vector&lt;T&gt;&gt; <span class="built_in">labels</span>() {</span><br><span class="line">            <span class="keyword">return</span> std::<span class="built_in">make_pair</span>(lx, ly);</span><br><span class="line">        }</span><br><span class="line">        <span class="function">std::vector&lt;T&gt; <span class="title">weights</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">return</span> costs;</span><br><span class="line">        }</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        std::vector&lt;T&gt; lx, ly, slack, costs;</span><br><span class="line">        std::vector&lt;<span class="type">int</span>&gt; xy, yx, p, slackx;</span><br><span class="line">        std::vector&lt;<span class="type">bool</span>&gt; visx, visy;</span><br><span class="line">};</span><br></pre></td></tr></table></figure>
<h2 id="04-一般图最大匹配（Graph-带花树算法）【久远】"><a href="#04-一般图最大匹配（Graph-带花树算法）【久远】" class="headerlink" title="04 - 一般图最大匹配（Graph 带花树算法）【久远】"></a>04 - 一般图最大匹配（Graph 带花树算法）【久远】</h2><p><a href="https://codeforces.com/contest/1615/submission/140509278">2021-12-24</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Graph</span> {</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; e;</span><br><span class="line">    <span class="built_in">Graph</span>(<span class="type">int</span> n) : <span class="built_in">n</span>(n), <span class="built_in">e</span>(n) {}</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>{</span><br><span class="line">        e[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        e[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    }</span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">findMatching</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">match</span><span class="params">(n, <span class="number">-1</span>)</span>, <span class="title">vis</span><span class="params">(n)</span>, <span class="title">link</span><span class="params">(n)</span>, <span class="title">f</span><span class="params">(n)</span>, <span class="title">dep</span><span class="params">(n)</span></span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// disjoint set union</span></span><br><span class="line">        <span class="keyword">auto</span> find = [&amp;](<span class="type">int</span> u) {</span><br><span class="line">            <span class="keyword">while</span> (f[u] != u)</span><br><span class="line">                u = f[u] = f[f[u]];</span><br><span class="line">            <span class="keyword">return</span> u;</span><br><span class="line">        };</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">auto</span> lca = [&amp;](<span class="type">int</span> u, <span class="type">int</span> v) {</span><br><span class="line">            u = <span class="built_in">find</span>(u);</span><br><span class="line">            v = <span class="built_in">find</span>(v);</span><br><span class="line">            <span class="keyword">while</span> (u != v) {</span><br><span class="line">                <span class="keyword">if</span> (dep[u] &lt; dep[v])</span><br><span class="line">                    std::<span class="built_in">swap</span>(u, v);</span><br><span class="line">                u = <span class="built_in">find</span>(link[match[u]]);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> u;</span><br><span class="line">        };</span><br><span class="line">        </span><br><span class="line">        std::queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">        <span class="keyword">auto</span> blossom = [&amp;](<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> p) {</span><br><span class="line">            <span class="keyword">while</span> (<span class="built_in">find</span>(u) != p) {</span><br><span class="line">                link[u] = v;</span><br><span class="line">                v = match[u];</span><br><span class="line">                <span class="keyword">if</span> (vis[v] == <span class="number">0</span>) {</span><br><span class="line">                    vis[v] = <span class="number">1</span>;</span><br><span class="line">                    que.<span class="built_in">push</span>(v);</span><br><span class="line">                }</span><br><span class="line">                f[u] = f[v] = p;</span><br><span class="line">                u = link[v];</span><br><span class="line">            }</span><br><span class="line">        };</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// find an augmenting path starting from u and augment (if exist)</span></span><br><span class="line">        <span class="keyword">auto</span> augment = [&amp;](<span class="type">int</span> u) {</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span> (!que.<span class="built_in">empty</span>())</span><br><span class="line">                que.<span class="built_in">pop</span>();</span><br><span class="line">            </span><br><span class="line">            std::<span class="built_in">iota</span>(f.<span class="built_in">begin</span>(), f.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// vis = 0 corresponds to inner vertices, vis = 1 corresponds to outer vertices</span></span><br><span class="line">            std::<span class="built_in">fill</span>(vis.<span class="built_in">begin</span>(), vis.<span class="built_in">end</span>(), <span class="number">-1</span>);</span><br><span class="line">            </span><br><span class="line">            que.<span class="built_in">push</span>(u);</span><br><span class="line">            vis[u] = <span class="number">1</span>;</span><br><span class="line">            dep[u] = <span class="number">0</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()){</span><br><span class="line">                <span class="type">int</span> u = que.<span class="built_in">front</span>();</span><br><span class="line">                que.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) {</span><br><span class="line">                    <span class="keyword">if</span> (vis[v] == <span class="number">-1</span>) {</span><br><span class="line">                        </span><br><span class="line">                        vis[v] = <span class="number">0</span>;</span><br><span class="line">                        link[v] = u;</span><br><span class="line">                        dep[v] = dep[u] + <span class="number">1</span>;</span><br><span class="line">                        </span><br><span class="line">                        <span class="comment">// found an augmenting path</span></span><br><span class="line">                        <span class="keyword">if</span> (match[v] == <span class="number">-1</span>) {</span><br><span class="line">                            <span class="keyword">for</span> (<span class="type">int</span> x = v, y = u, temp; y != <span class="number">-1</span>; x = temp, y = x == <span class="number">-1</span> ? <span class="number">-1</span> : link[x]) {</span><br><span class="line">                                temp = match[y];</span><br><span class="line">                                match[x] = y;</span><br><span class="line">                                match[y] = x;</span><br><span class="line">                            }</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        }</span><br><span class="line">                        </span><br><span class="line">                        vis[match[v]] = <span class="number">1</span>;</span><br><span class="line">                        dep[match[v]] = dep[u] + <span class="number">2</span>;</span><br><span class="line">                        que.<span class="built_in">push</span>(match[v]);</span><br><span class="line">                        </span><br><span class="line">                    } <span class="keyword">else</span> <span class="keyword">if</span> (vis[v] == <span class="number">1</span> &amp;&amp; <span class="built_in">find</span>(v) != <span class="built_in">find</span>(u)) {</span><br><span class="line">                        <span class="comment">// found a blossom</span></span><br><span class="line">                        <span class="type">int</span> p = <span class="built_in">lca</span>(u, v);</span><br><span class="line">                        <span class="built_in">blossom</span>(u, v, p);</span><br><span class="line">                        <span class="built_in">blossom</span>(v, u, p);</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            </span><br><span class="line">        };</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// find a maximal matching greedily (decrease constant)</span></span><br><span class="line">        <span class="keyword">auto</span> greedy = [&amp;]() {</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> u = <span class="number">0</span>; u &lt; n; ++u) {</span><br><span class="line">                <span class="keyword">if</span> (match[u] != <span class="number">-1</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) {</span><br><span class="line">                    <span class="keyword">if</span> (match[v] == <span class="number">-1</span>) {</span><br><span class="line">                        match[u] = v;</span><br><span class="line">                        match[v] = u;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        };</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">greedy</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> u = <span class="number">0</span>; u &lt; n; ++u)</span><br><span class="line">            <span class="keyword">if</span> (match[u] == <span class="number">-1</span>)</span><br><span class="line">                <span class="built_in">augment</span>(u);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> match;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure>
<h2 id="05-TwoSat（2-Sat）"><a href="#05-TwoSat（2-Sat）" class="headerlink" title="05 - TwoSat（2-Sat）"></a>05 - TwoSat（2-Sat）</h2><p><a href="https://atcoder.jp/contests/arc161/submissions/46031530">2023-09-29</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">TwoSat</span> {</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; e;</span><br><span class="line">    std::vector&lt;<span class="type">bool</span>&gt; ans;</span><br><span class="line">    <span class="built_in">TwoSat</span>(<span class="type">int</span> n) : <span class="built_in">n</span>(n), <span class="built_in">e</span>(<span class="number">2</span> * n), <span class="built_in">ans</span>(n) {}</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addClause</span><span class="params">(<span class="type">int</span> u, <span class="type">bool</span> f, <span class="type">int</span> v, <span class="type">bool</span> g)</span> </span>{</span><br><span class="line">        e[<span class="number">2</span> * u + !f].<span class="built_in">push_back</span>(<span class="number">2</span> * v + g);</span><br><span class="line">        e[<span class="number">2</span> * v + !g].<span class="built_in">push_back</span>(<span class="number">2</span> * u + f);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">satisfiable</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">id</span><span class="params">(<span class="number">2</span> * n, <span class="number">-1</span>)</span>, <span class="title">dfn</span><span class="params">(<span class="number">2</span> * n, <span class="number">-1</span>)</span>, <span class="title">low</span><span class="params">(<span class="number">2</span> * n, <span class="number">-1</span>)</span></span>;</span><br><span class="line">        std::vector&lt;<span class="type">int</span>&gt; stk;</span><br><span class="line">        <span class="type">int</span> now = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">        std::function&lt;<span class="type">void</span>(<span class="type">int</span>)&gt; tarjan = [&amp;](<span class="type">int</span> u) {</span><br><span class="line">            stk.<span class="built_in">push_back</span>(u);</span><br><span class="line">            dfn[u] = low[u] = now++;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) {</span><br><span class="line">                <span class="keyword">if</span> (dfn[v] == <span class="number">-1</span>) {</span><br><span class="line">                    <span class="built_in">tarjan</span>(v);</span><br><span class="line">                    low[u] = std::<span class="built_in">min</span>(low[u], low[v]);</span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (id[v] == <span class="number">-1</span>) {</span><br><span class="line">                    low[u] = std::<span class="built_in">min</span>(low[u], dfn[v]);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (dfn[u] == low[u]) {</span><br><span class="line">                <span class="type">int</span> v;</span><br><span class="line">                <span class="keyword">do</span> {</span><br><span class="line">                    v = stk.<span class="built_in">back</span>();</span><br><span class="line">                    stk.<span class="built_in">pop_back</span>();</span><br><span class="line">                    id[v] = cnt;</span><br><span class="line">                } <span class="keyword">while</span> (v != u);</span><br><span class="line">                ++cnt;</span><br><span class="line">            }</span><br><span class="line">        };</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span> * n; ++i) <span class="keyword">if</span> (dfn[i] == <span class="number">-1</span>) <span class="built_in">tarjan</span>(i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) {</span><br><span class="line">            <span class="keyword">if</span> (id[<span class="number">2</span> * i] == id[<span class="number">2</span> * i + <span class="number">1</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            ans[i] = id[<span class="number">2</span> * i] &gt; id[<span class="number">2</span> * i + <span class="number">1</span>];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">bool</span>&gt; <span class="title">answer</span><span class="params">()</span> </span>{ <span class="keyword">return</span> ans; }</span><br><span class="line">};</span><br></pre></td></tr></table></figure>
<h2 id="06A-最大流（Flow-旧版其一，整数应用）"><a href="#06A-最大流（Flow-旧版其一，整数应用）" class="headerlink" title="06A - 最大流（Flow 旧版其一，整数应用）"></a>06A - 最大流（Flow 旧版其一，整数应用）</h2><p><a href="https://codeforces.com/contest/1717/submission/170688062">2022-09-03</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Flow</span> {</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Edge</span> {</span><br><span class="line">        <span class="type">int</span> to;</span><br><span class="line">        T cap;</span><br><span class="line">        <span class="built_in">Edge</span>(<span class="type">int</span> to, T cap) : <span class="built_in">to</span>(to), <span class="built_in">cap</span>(cap) {}</span><br><span class="line">    };</span><br><span class="line">    std::vector&lt;Edge&gt; e;</span><br><span class="line">    std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; g;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; cur, h;</span><br><span class="line">    <span class="built_in">Flow</span>(<span class="type">int</span> n) : <span class="built_in">n</span>(n), <span class="built_in">g</span>(n) {}</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>{</span><br><span class="line">        h.<span class="built_in">assign</span>(n, <span class="number">-1</span>);</span><br><span class="line">        std::queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">        h[s] = <span class="number">0</span>;</span><br><span class="line">        que.<span class="built_in">push</span>(s);</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) {</span><br><span class="line">            <span class="type">const</span> <span class="type">int</span> u = que.<span class="built_in">front</span>();</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i : g[u]) {</span><br><span class="line">                <span class="keyword">auto</span> [v, c] = e[i];</span><br><span class="line">                <span class="keyword">if</span> (c &gt; <span class="number">0</span> &amp;&amp; h[v] == <span class="number">-1</span>) {</span><br><span class="line">                    h[v] = h[u] + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span> (v == t) {</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    }</span><br><span class="line">                    que.<span class="built_in">push</span>(v);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function">T <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> t, T f)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (u == t) {</span><br><span class="line">            <span class="keyword">return</span> f;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">auto</span> r = f;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> &amp;i = cur[u]; i &lt; <span class="built_in">int</span>(g[u].<span class="built_in">size</span>()); ++i) {</span><br><span class="line">            <span class="type">const</span> <span class="type">int</span> j = g[u][i];</span><br><span class="line">            <span class="keyword">auto</span> [v, c] = e[j];</span><br><span class="line">            <span class="keyword">if</span> (c &gt; <span class="number">0</span> &amp;&amp; h[v] == h[u] + <span class="number">1</span>) {</span><br><span class="line">                <span class="keyword">auto</span> a = <span class="built_in">dfs</span>(v, t, std::<span class="built_in">min</span>(r, c));</span><br><span class="line">                e[j].cap -= a;</span><br><span class="line">                e[j ^ <span class="number">1</span>].cap += a;</span><br><span class="line">                r -= a;</span><br><span class="line">                <span class="keyword">if</span> (r == <span class="number">0</span>) {</span><br><span class="line">                    <span class="keyword">return</span> f;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> f - r;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, T c)</span> </span>{</span><br><span class="line">        g[u].<span class="built_in">push_back</span>(e.<span class="built_in">size</span>());</span><br><span class="line">        e.<span class="built_in">emplace_back</span>(v, c);</span><br><span class="line">        g[v].<span class="built_in">push_back</span>(e.<span class="built_in">size</span>());</span><br><span class="line">        e.<span class="built_in">emplace_back</span>(u, <span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function">T <span class="title">maxFlow</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>{</span><br><span class="line">        T ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">bfs</span>(s, t)) {</span><br><span class="line">            cur.<span class="built_in">assign</span>(n, <span class="number">0</span>);</span><br><span class="line">            ans += <span class="built_in">dfs</span>(s, t, std::numeric_limits&lt;T&gt;::<span class="built_in">max</span>());</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure>
<h2 id="06B-最大流（Flow-旧版其二，浮点数应用）"><a href="#06B-最大流（Flow-旧版其二，浮点数应用）" class="headerlink" title="06B - 最大流（Flow 旧版其二，浮点数应用）"></a>06B - 最大流（Flow 旧版其二，浮点数应用）</h2><p><a href="https://cf.dianhsu.com/gym/104288/submission/201412765">2022-04-09</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Flow</span> {</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Edge</span> {</span><br><span class="line">        <span class="type">int</span> to;</span><br><span class="line">        T cap;</span><br><span class="line">        <span class="built_in">Edge</span>(<span class="type">int</span> to, T cap) : <span class="built_in">to</span>(to), <span class="built_in">cap</span>(cap) {}</span><br><span class="line">    };</span><br><span class="line">    std::vector&lt;Edge&gt; e;</span><br><span class="line">    std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; g;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; cur, h;</span><br><span class="line">    <span class="built_in">Flow</span>(<span class="type">int</span> n) : <span class="built_in">n</span>(n), <span class="built_in">g</span>(n) {}</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>{</span><br><span class="line">        h.<span class="built_in">assign</span>(n, <span class="number">-1</span>);</span><br><span class="line">        std::queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">        h[s] = <span class="number">0</span>;</span><br><span class="line">        que.<span class="built_in">push</span>(s);</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) {</span><br><span class="line">            <span class="type">const</span> <span class="type">int</span> u = que.<span class="built_in">front</span>();</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i : g[u]) {</span><br><span class="line">                <span class="keyword">auto</span> [v, c] = e[i];</span><br><span class="line">                <span class="keyword">if</span> (c &gt; <span class="number">0</span> &amp;&amp; h[v] == <span class="number">-1</span>) {</span><br><span class="line">                    h[v] = h[u] + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span> (v == t) {</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    }</span><br><span class="line">                    que.<span class="built_in">push</span>(v);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function">T <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> t, T f)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (u == t) {</span><br><span class="line">            <span class="keyword">return</span> f;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">auto</span> r = f;</span><br><span class="line">        <span class="type">double</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> &amp;i = cur[u]; i &lt; <span class="built_in">int</span>(g[u].<span class="built_in">size</span>()); ++i) {</span><br><span class="line">            <span class="type">const</span> <span class="type">int</span> j = g[u][i];</span><br><span class="line">            <span class="keyword">auto</span> [v, c] = e[j];</span><br><span class="line">            <span class="keyword">if</span> (c &gt; <span class="number">0</span> &amp;&amp; h[v] == h[u] + <span class="number">1</span>) {</span><br><span class="line">                <span class="keyword">auto</span> a = <span class="built_in">dfs</span>(v, t, std::<span class="built_in">min</span>(r, c));</span><br><span class="line">                res += a;</span><br><span class="line">                e[j].cap -= a;</span><br><span class="line">                e[j ^ <span class="number">1</span>].cap += a;</span><br><span class="line">                r -= a;</span><br><span class="line">                <span class="keyword">if</span> (r == <span class="number">0</span>) {</span><br><span class="line">                    <span class="keyword">return</span> f;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, T c)</span> </span>{</span><br><span class="line">        g[u].<span class="built_in">push_back</span>(e.<span class="built_in">size</span>());</span><br><span class="line">        e.<span class="built_in">emplace_back</span>(v, c);</span><br><span class="line">        g[v].<span class="built_in">push_back</span>(e.<span class="built_in">size</span>());</span><br><span class="line">        e.<span class="built_in">emplace_back</span>(u, <span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function">T <span class="title">maxFlow</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>{</span><br><span class="line">        T ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">bfs</span>(s, t)) {</span><br><span class="line">            cur.<span class="built_in">assign</span>(n, <span class="number">0</span>);</span><br><span class="line">            ans += <span class="built_in">dfs</span>(s, t, <span class="number">1E100</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure>
<h2 id="06C-最大流（MaxFlow-新版）"><a href="#06C-最大流（MaxFlow-新版）" class="headerlink" title="06C - 最大流（MaxFlow 新版）"></a>06C - 最大流（MaxFlow 新版）</h2><p><a href="https://ac.nowcoder.com/acm/contest/view-submission?submissionId=62915815">2023-07-21</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> inf = <span class="number">1E9</span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MaxFlow</span> {</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_Edge</span> {</span><br><span class="line">        <span class="type">int</span> to;</span><br><span class="line">        T cap;</span><br><span class="line">        _Edge(<span class="type">int</span> to, T cap) : <span class="built_in">to</span>(to), <span class="built_in">cap</span>(cap) {}</span><br><span class="line">    };</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;_Edge&gt; e;</span><br><span class="line">    std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; g;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; cur, h;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">MaxFlow</span>() {}</span><br><span class="line">    <span class="built_in">MaxFlow</span>(<span class="type">int</span> n) {</span><br><span class="line">        <span class="built_in">init</span>(n);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        e.<span class="built_in">clear</span>();</span><br><span class="line">        g.<span class="built_in">assign</span>(n, {});</span><br><span class="line">        cur.<span class="built_in">resize</span>(n);</span><br><span class="line">        h.<span class="built_in">resize</span>(n);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>{</span><br><span class="line">        h.<span class="built_in">assign</span>(n, <span class="number">-1</span>);</span><br><span class="line">        std::queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">        h[s] = <span class="number">0</span>;</span><br><span class="line">        que.<span class="built_in">push</span>(s);</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) {</span><br><span class="line">            <span class="type">const</span> <span class="type">int</span> u = que.<span class="built_in">front</span>();</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i : g[u]) {</span><br><span class="line">                <span class="keyword">auto</span> [v, c] = e[i];</span><br><span class="line">                <span class="keyword">if</span> (c &gt; <span class="number">0</span> &amp;&amp; h[v] == <span class="number">-1</span>) {</span><br><span class="line">                    h[v] = h[u] + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span> (v == t) {</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    }</span><br><span class="line">                    que.<span class="built_in">push</span>(v);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function">T <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> t, T f)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (u == t) {</span><br><span class="line">            <span class="keyword">return</span> f;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">auto</span> r = f;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> &amp;i = cur[u]; i &lt; <span class="built_in">int</span>(g[u].<span class="built_in">size</span>()); ++i) {</span><br><span class="line">            <span class="type">const</span> <span class="type">int</span> j = g[u][i];</span><br><span class="line">            <span class="keyword">auto</span> [v, c] = e[j];</span><br><span class="line">            <span class="keyword">if</span> (c &gt; <span class="number">0</span> &amp;&amp; h[v] == h[u] + <span class="number">1</span>) {</span><br><span class="line">                <span class="keyword">auto</span> a = <span class="built_in">dfs</span>(v, t, std::<span class="built_in">min</span>(r, c));</span><br><span class="line">                e[j].cap -= a;</span><br><span class="line">                e[j ^ <span class="number">1</span>].cap += a;</span><br><span class="line">                r -= a;</span><br><span class="line">                <span class="keyword">if</span> (r == <span class="number">0</span>) {</span><br><span class="line">                    <span class="keyword">return</span> f;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> f - r;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, T c)</span> </span>{</span><br><span class="line">        g[u].<span class="built_in">push_back</span>(e.<span class="built_in">size</span>());</span><br><span class="line">        e.<span class="built_in">emplace_back</span>(v, c);</span><br><span class="line">        g[v].<span class="built_in">push_back</span>(e.<span class="built_in">size</span>());</span><br><span class="line">        e.<span class="built_in">emplace_back</span>(u, <span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function">T <span class="title">flow</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>{</span><br><span class="line">        T ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">bfs</span>(s, t)) {</span><br><span class="line">            cur.<span class="built_in">assign</span>(n, <span class="number">0</span>);</span><br><span class="line">            ans += <span class="built_in">dfs</span>(s, t, std::numeric_limits&lt;T&gt;::<span class="built_in">max</span>());</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">bool</span>&gt; <span class="title">minCut</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="function">std::vector&lt;<span class="type">bool</span>&gt; <span class="title">c</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            c[i] = (h[i] != <span class="number">-1</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Edge</span> {</span><br><span class="line">        <span class="type">int</span> from;</span><br><span class="line">        <span class="type">int</span> to;</span><br><span class="line">        T cap;</span><br><span class="line">        T flow;</span><br><span class="line">    };</span><br><span class="line">    <span class="function">std::vector&lt;Edge&gt; <span class="title">edges</span><span class="params">()</span> </span>{</span><br><span class="line">        std::vector&lt;Edge&gt; a;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; e.<span class="built_in">size</span>(); i += <span class="number">2</span>) {</span><br><span class="line">            Edge x;</span><br><span class="line">            x.from = e[i + <span class="number">1</span>].to;</span><br><span class="line">            x.to = e[i].to;</span><br><span class="line">            x.cap = e[i].cap + e[i + <span class="number">1</span>].cap;</span><br><span class="line">            x.flow = e[i + <span class="number">1</span>].cap;</span><br><span class="line">            a.<span class="built_in">push_back</span>(x);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure>
<h2 id="07A-费用流（MCFGraph-最小费用可行流）"><a href="#07A-费用流（MCFGraph-最小费用可行流）" class="headerlink" title="07A - 费用流（MCFGraph 最小费用可行流）"></a>07A - 费用流（MCFGraph 最小费用可行流）</h2><p><a href="https://codeforces.com/contest/1766/submission/184974697">2022-12-12</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">MCFGraph</span> {</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Edge</span> {</span><br><span class="line">        <span class="type">int</span> v, c, f;</span><br><span class="line">        <span class="built_in">Edge</span>(<span class="type">int</span> v, <span class="type">int</span> c, <span class="type">int</span> f) : <span class="built_in">v</span>(v), <span class="built_in">c</span>(c), <span class="built_in">f</span>(f) {}</span><br><span class="line">    };</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;Edge&gt; e;</span><br><span class="line">    std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; g;</span><br><span class="line">    std::vector&lt;i64&gt; h, dis;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; pre;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">dijkstra</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>{</span><br><span class="line">        dis.<span class="built_in">assign</span>(n, std::numeric_limits&lt;i64&gt;::<span class="built_in">max</span>());</span><br><span class="line">        pre.<span class="built_in">assign</span>(n, <span class="number">-1</span>);</span><br><span class="line">        std::priority_queue&lt;std::pair&lt;i64, <span class="type">int</span>&gt;, std::vector&lt;std::pair&lt;i64, <span class="type">int</span>&gt;&gt;, std::greater&lt;std::pair&lt;i64, <span class="type">int</span>&gt;&gt;&gt; que;</span><br><span class="line">        dis[s] = <span class="number">0</span>;</span><br><span class="line">        que.<span class="built_in">emplace</span>(<span class="number">0</span>, s);</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) {</span><br><span class="line">            i64 d = que.<span class="built_in">top</span>().first;</span><br><span class="line">            <span class="type">int</span> u = que.<span class="built_in">top</span>().second;</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (dis[u] &lt; d) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i : g[u]) {</span><br><span class="line">                <span class="type">int</span> v = e[i].v;</span><br><span class="line">                <span class="type">int</span> c = e[i].c;</span><br><span class="line">                <span class="type">int</span> f = e[i].f;</span><br><span class="line">                <span class="keyword">if</span> (c &gt; <span class="number">0</span> &amp;&amp; dis[v] &gt; d + h[u] - h[v] + f) {</span><br><span class="line">                    dis[v] = d + h[u] - h[v] + f;</span><br><span class="line">                    pre[v] = i;</span><br><span class="line">                    que.<span class="built_in">emplace</span>(dis[v], v);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dis[t] != std::numeric_limits&lt;i64&gt;::<span class="built_in">max</span>();</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">MCFGraph</span>(<span class="type">int</span> n) : <span class="built_in">n</span>(n), <span class="built_in">g</span>(n) {}</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> c, <span class="type">int</span> f)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (f &lt; <span class="number">0</span>) {</span><br><span class="line">            g[u].<span class="built_in">push_back</span>(e.<span class="built_in">size</span>());</span><br><span class="line">            e.<span class="built_in">emplace_back</span>(v, <span class="number">0</span>, f);</span><br><span class="line">            g[v].<span class="built_in">push_back</span>(e.<span class="built_in">size</span>());</span><br><span class="line">            e.<span class="built_in">emplace_back</span>(u, c, -f);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            g[u].<span class="built_in">push_back</span>(e.<span class="built_in">size</span>());</span><br><span class="line">            e.<span class="built_in">emplace_back</span>(v, c, f);</span><br><span class="line">            g[v].<span class="built_in">push_back</span>(e.<span class="built_in">size</span>());</span><br><span class="line">            e.<span class="built_in">emplace_back</span>(u, <span class="number">0</span>, -f);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="function">std::pair&lt;<span class="type">int</span>, i64&gt; <span class="title">flow</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>{</span><br><span class="line">        <span class="type">int</span> flow = <span class="number">0</span>;</span><br><span class="line">        i64 cost = <span class="number">0</span>;</span><br><span class="line">        h.<span class="built_in">assign</span>(n, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">dijkstra</span>(s, t)) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) h[i] += dis[i];</span><br><span class="line">            <span class="type">int</span> aug = std::numeric_limits&lt;<span class="type">int</span>&gt;::<span class="built_in">max</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = t; i != s; i = e[pre[i] ^ <span class="number">1</span>].v) aug = std::<span class="built_in">min</span>(aug, e[pre[i]].c);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = t; i != s; i = e[pre[i] ^ <span class="number">1</span>].v) {</span><br><span class="line">                e[pre[i]].c -= aug;</span><br><span class="line">                e[pre[i] ^ <span class="number">1</span>].c += aug;</span><br><span class="line">            }</span><br><span class="line">            flow += aug;</span><br><span class="line">            cost += <span class="built_in">i64</span>(aug) * h[t];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> std::<span class="built_in">make_pair</span>(flow, cost);</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure>
<h2 id="07B-费用流（MCFGraph-最小费用最大流）"><a href="#07B-费用流（MCFGraph-最小费用最大流）" class="headerlink" title="07B - 费用流（MCFGraph 最小费用最大流）"></a>07B - 费用流（MCFGraph 最小费用最大流）</h2><p>代码同上，但是需要注释掉建边限制。以下为参考：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">addEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> c, <span class="type">int</span> f)</span> { <span class="comment">// 可行流</span></span><br><span class="line">    <span class="keyword">if</span> (f &lt; <span class="number">0</span>) {</span><br><span class="line">        g[u].push_back(e.size());</span><br><span class="line">        e.emplace_back(v, <span class="number">0</span>, f);</span><br><span class="line">        g[v].push_back(e.size());</span><br><span class="line">        e.emplace_back(u, c, -f);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        g[u].push_back(e.size());</span><br><span class="line">        e.emplace_back(v, c, f);</span><br><span class="line">        g[v].push_back(e.size());</span><br><span class="line">        e.emplace_back(u, <span class="number">0</span>, -f);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">addEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> c, <span class="type">int</span> f)</span> { <span class="comment">// 最大流</span></span><br><span class="line">    g[u].push_back(e.size());</span><br><span class="line">    e.emplace_back(v, c, f);</span><br><span class="line">    g[v].push_back(e.size());</span><br><span class="line">    e.emplace_back(u, <span class="number">0</span>, -f);</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="08-树链剖分（HLD）"><a href="#08-树链剖分（HLD）" class="headerlink" title="08 - 树链剖分（HLD）"></a>08 - 树链剖分（HLD）</h2><p><a href="https://codeforces.com/contest/1863/submission/221214363">2023-08-31</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">HLD</span> {</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; siz, top, dep, parent, in, out, seq;</span><br><span class="line">    std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; adj;</span><br><span class="line">    <span class="type">int</span> cur;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">HLD</span>() {}</span><br><span class="line">    <span class="built_in">HLD</span>(<span class="type">int</span> n) {</span><br><span class="line">        <span class="built_in">init</span>(n);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        siz.<span class="built_in">resize</span>(n);</span><br><span class="line">        top.<span class="built_in">resize</span>(n);</span><br><span class="line">        dep.<span class="built_in">resize</span>(n);</span><br><span class="line">        parent.<span class="built_in">resize</span>(n);</span><br><span class="line">        in.<span class="built_in">resize</span>(n);</span><br><span class="line">        out.<span class="built_in">resize</span>(n);</span><br><span class="line">        seq.<span class="built_in">resize</span>(n);</span><br><span class="line">        cur = <span class="number">0</span>;</span><br><span class="line">        adj.<span class="built_in">assign</span>(n, {});</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>{</span><br><span class="line">        adj[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        adj[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">(<span class="type">int</span> root = <span class="number">0</span>)</span> </span>{</span><br><span class="line">        top[root] = root;</span><br><span class="line">        dep[root] = <span class="number">0</span>;</span><br><span class="line">        parent[root] = <span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">dfs1</span>(root);</span><br><span class="line">        <span class="built_in">dfs2</span>(root);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (parent[u] != <span class="number">-1</span>) {</span><br><span class="line">            adj[u].<span class="built_in">erase</span>(std::<span class="built_in">find</span>(adj[u].<span class="built_in">begin</span>(), adj[u].<span class="built_in">end</span>(), parent[u]));</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        siz[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;v : adj[u]) {</span><br><span class="line">            parent[v] = u;</span><br><span class="line">            dep[v] = dep[u] + <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">dfs1</span>(v);</span><br><span class="line">            siz[u] += siz[v];</span><br><span class="line">            <span class="keyword">if</span> (siz[v] &gt; siz[adj[u][<span class="number">0</span>]]) {</span><br><span class="line">                std::<span class="built_in">swap</span>(v, adj[u][<span class="number">0</span>]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u)</span> </span>{</span><br><span class="line">        in[u] = cur++;</span><br><span class="line">        seq[in[u]] = u;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> v : adj[u]) {</span><br><span class="line">            top[v] = v == adj[u][<span class="number">0</span>] ? top[u] : v;</span><br><span class="line">            <span class="built_in">dfs2</span>(v);</span><br><span class="line">        }</span><br><span class="line">        out[u] = cur;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>{</span><br><span class="line">        <span class="keyword">while</span> (top[u] != top[v]) {</span><br><span class="line">            <span class="keyword">if</span> (dep[top[u]] &gt; dep[top[v]]) {</span><br><span class="line">                u = parent[top[u]];</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                v = parent[top[v]];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dep[u] &lt; dep[v] ? u : v;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">dist</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> dep[u] + dep[v] - <span class="number">2</span> * dep[<span class="built_in">lca</span>(u, v)];</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">jump</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> k)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (dep[u] &lt; k) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> d = dep[u] - k;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (dep[top[u]] &gt; d) {</span><br><span class="line">            u = parent[top[u]];</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> seq[in[u] - dep[u] + d];</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isAncester</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> in[u] &lt;= in[v] &amp;&amp; in[v] &lt; out[u];</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rootedParent</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>{</span><br><span class="line">        std::<span class="built_in">swap</span>(u, v);</span><br><span class="line">        <span class="keyword">if</span> (u == v) {</span><br><span class="line">            <span class="keyword">return</span> u;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">isAncester</span>(u, v)) {</span><br><span class="line">            <span class="keyword">return</span> parent[u];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">auto</span> it = std::<span class="built_in">upper_bound</span>(adj[u].<span class="built_in">begin</span>(), adj[u].<span class="built_in">end</span>(), v, [&amp;](<span class="type">int</span> x, <span class="type">int</span> y) {</span><br><span class="line">            <span class="keyword">return</span> in[x] &lt; in[y];</span><br><span class="line">        }) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> *it;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rootedSize</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (u == v) {</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">isAncester</span>(v, u)) {</span><br><span class="line">            <span class="keyword">return</span> siz[v];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> n - siz[<span class="built_in">rootedParent</span>(u, v)];</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rootedLca</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">lca</span>(a, b) ^ <span class="built_in">lca</span>(b, c) ^ <span class="built_in">lca</span>(c, a);</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="三、数论、几何、多项式"><a href="#三、数论、几何、多项式" class="headerlink" title="三、数论、几何、多项式"></a>三、数论、几何、多项式</h1><h2 id="01-快速幂"><a href="#01-快速幂" class="headerlink" title="01 - 快速幂"></a>01 - 快速幂</h2><p><a href="https://atcoder.jp/contests/tenka1-2017/submissions/46411797">2023-10-09</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">power</span><span class="params">(<span class="type">int</span> a, i64 b, <span class="type">int</span> p)</span> </span>{</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; b; b /= <span class="number">2</span>, a = <span class="number">1LL</span> * a * a % p) {</span><br><span class="line">        <span class="keyword">if</span> (b % <span class="number">2</span>) {</span><br><span class="line">            res = <span class="number">1LL</span> * res * a % p;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="02-欧拉筛"><a href="#02-欧拉筛" class="headerlink" title="02 - 欧拉筛"></a>02 - 欧拉筛</h2><p><a href="https://cf.dianhsu.com/gym/104479/submission/220987267">2023-08-29</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; minp, primes;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sieve</span><span class="params">(<span class="type">int</span> n)</span> </span>{</span><br><span class="line">    minp.<span class="built_in">assign</span>(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    primes.<span class="built_in">clear</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) {</span><br><span class="line">        <span class="keyword">if</span> (minp[i] == <span class="number">0</span>) {</span><br><span class="line">            minp[i] = i;</span><br><span class="line">            primes.<span class="built_in">push_back</span>(i);</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> p : primes) {</span><br><span class="line">            <span class="keyword">if</span> (i * p &gt; n) {</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            minp[i * p] = p;</span><br><span class="line">            <span class="keyword">if</span> (p == minp[i]) {</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="03-莫比乌斯函数筛（莫比乌斯函数-反演）"><a href="#03-莫比乌斯函数筛（莫比乌斯函数-反演）" class="headerlink" title="03 - 莫比乌斯函数筛（莫比乌斯函数/反演）"></a>03 - 莫比乌斯函数筛（莫比乌斯函数/反演）</h2><p><a href="https://atcoder.jp/contests/tupc2022/submissions/39391116">2023-03-04</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::unordered_map&lt;<span class="type">int</span>, Z&gt; fMu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N = <span class="number">1E7</span>;</span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt; minp, primes;</span><br><span class="line">std::vector&lt;Z&gt; mu;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sieve</span><span class="params">(<span class="type">int</span> n)</span> </span>{</span><br><span class="line">    minp.<span class="built_in">assign</span>(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    mu.<span class="built_in">resize</span>(n);</span><br><span class="line">    primes.<span class="built_in">clear</span>();</span><br><span class="line">    </span><br><span class="line">    mu[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) {</span><br><span class="line">        <span class="keyword">if</span> (minp[i] == <span class="number">0</span>) {</span><br><span class="line">            mu[i] = <span class="number">-1</span>;</span><br><span class="line">            minp[i] = i;</span><br><span class="line">            primes.<span class="built_in">push_back</span>(i);</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> p : primes) {</span><br><span class="line">            <span class="keyword">if</span> (i * p &gt; n) {</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            minp[i * p] = p;</span><br><span class="line">            <span class="keyword">if</span> (p == minp[i]) {</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            mu[i * p] = -mu[i];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) {</span><br><span class="line">        mu[i] += mu[i - <span class="number">1</span>];</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">Z <span class="title">sumMu</span><span class="params">(<span class="type">int</span> n)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= N) {</span><br><span class="line">        <span class="keyword">return</span> mu[n];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (fMu.<span class="built_in">count</span>(n)) {</span><br><span class="line">        <span class="keyword">return</span> fMu[n];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    Z ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">2</span>, r; l &lt;= n; l = r + <span class="number">1</span>) {</span><br><span class="line">        r = n / (n / l);</span><br><span class="line">        ans -= (r - l + <span class="number">1</span>) * <span class="built_in">sumMu</span>(n / l);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">sieve</span>(N);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> L, R;</span><br><span class="line">    std::cin &gt;&gt; L &gt;&gt; R;</span><br><span class="line">    L -= <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    Z ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">1</span>, r; l &lt;= R; l = r + <span class="number">1</span>) {</span><br><span class="line">        r = R / (R / l);</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= L) {</span><br><span class="line">            r = std::<span class="built_in">min</span>(r, L / (L / l));</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        ans += (<span class="built_in">power</span>(<span class="built_in">Z</span>(<span class="number">2</span>), R / l - L / l) - <span class="number">1</span>) * (<span class="built_in">sumMu</span>(r) - <span class="built_in">sumMu</span>(l - <span class="number">1</span>));</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    std::cout &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="04-求解单个数的欧拉函数"><a href="#04-求解单个数的欧拉函数" class="headerlink" title="04 - 求解单个数的欧拉函数"></a>04 - 求解单个数的欧拉函数</h2><p><a href="https://atcoder.jp/contests/tenka1-2017/submissions/46411797">2023-10-09</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">phi</span><span class="params">(<span class="type">int</span> n)</span> </span>{</span><br><span class="line">    <span class="type">int</span> res = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i * i &lt;= n; i++) {</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">while</span> (n % i == <span class="number">0</span>) {</span><br><span class="line">                n /= i;</span><br><span class="line">            }</span><br><span class="line">            res = res / i * (i - <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>) {</span><br><span class="line">        res = res / n * (n - <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="05-扩展欧几里得（exGCD）"><a href="#05-扩展欧几里得（exGCD）" class="headerlink" title="05 - 扩展欧几里得（exGCD）"></a>05 - 扩展欧几里得（exGCD）</h2><p><a href="https://atcoder.jp/contests/tenka1-2017/submissions/46411797">2023-10-09</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">exgcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> &amp;x, <span class="type">int</span> &amp;y)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (!b) {</span><br><span class="line">        x = <span class="number">1</span>, y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> g = <span class="built_in">exgcd</span>(b, a % b, y, x);</span><br><span class="line">    y -= a / b * x;</span><br><span class="line">    <span class="keyword">return</span> g;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="06-组合数（Comb-with-MInt-amp-MLong）"><a href="#06-组合数（Comb-with-MInt-amp-MLong）" class="headerlink" title="06 - 组合数（Comb, with. MInt \& MLong）"></a>06 - 组合数（Comb, with. MInt \&amp; MLong）</h2><p><a href="https://codeforces.com/contest/1864/submission/220584872">2023-08-26</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Comb</span> {</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;Z&gt; _fac;</span><br><span class="line">    std::vector&lt;Z&gt; _invfac;</span><br><span class="line">    std::vector&lt;Z&gt; _inv;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Comb</span>() : n{<span class="number">0</span>}, _fac{<span class="number">1</span>}, _invfac{<span class="number">1</span>}, _inv{<span class="number">0</span>} {}</span><br><span class="line">    <span class="built_in">Comb</span>(<span class="type">int</span> n) : <span class="built_in">Comb</span>() {</span><br><span class="line">        <span class="built_in">init</span>(n);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> m)</span> </span>{</span><br><span class="line">        m = std::<span class="built_in">min</span>(m, Z::<span class="built_in">getMod</span>() - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (m &lt;= n) <span class="keyword">return</span>;</span><br><span class="line">        _fac.<span class="built_in">resize</span>(m + <span class="number">1</span>);</span><br><span class="line">        _invfac.<span class="built_in">resize</span>(m + <span class="number">1</span>);</span><br><span class="line">        _inv.<span class="built_in">resize</span>(m + <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n + <span class="number">1</span>; i &lt;= m; i++) {</span><br><span class="line">            _fac[i] = _fac[i - <span class="number">1</span>] * i;</span><br><span class="line">        }</span><br><span class="line">        _invfac[m] = _fac[m].<span class="built_in">inv</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = m; i &gt; n; i--) {</span><br><span class="line">            _invfac[i - <span class="number">1</span>] = _invfac[i] * i;</span><br><span class="line">            _inv[i] = _invfac[i] * _fac[i - <span class="number">1</span>];</span><br><span class="line">        }</span><br><span class="line">        n = m;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function">Z <span class="title">fac</span><span class="params">(<span class="type">int</span> m)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (m &gt; n) <span class="built_in">init</span>(<span class="number">2</span> * m);</span><br><span class="line">        <span class="keyword">return</span> _fac[m];</span><br><span class="line">    }</span><br><span class="line">    <span class="function">Z <span class="title">invfac</span><span class="params">(<span class="type">int</span> m)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (m &gt; n) <span class="built_in">init</span>(<span class="number">2</span> * m);</span><br><span class="line">        <span class="keyword">return</span> _invfac[m];</span><br><span class="line">    }</span><br><span class="line">    <span class="function">Z <span class="title">inv</span><span class="params">(<span class="type">int</span> m)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (m &gt; n) <span class="built_in">init</span>(<span class="number">2</span> * m);</span><br><span class="line">        <span class="keyword">return</span> _inv[m];</span><br><span class="line">    }</span><br><span class="line">    <span class="function">Z <span class="title">binom</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (n &lt; m || m &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">fac</span>(n) * <span class="built_in">invfac</span>(m) * <span class="built_in">invfac</span>(n - m);</span><br><span class="line">    }</span><br><span class="line">} comb;</span><br></pre></td></tr></table></figure>
<h2 id="07-二项式（Binomial-任意模数计算）"><a href="#07-二项式（Binomial-任意模数计算）" class="headerlink" title="07 - 二项式（Binomial 任意模数计算）"></a>07 - 二项式（Binomial 任意模数计算）</h2><p><a href="https://codeforces.com/contest/896/submission/219861532">2023-08-22</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::vector&lt;std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; <span class="built_in">factorize</span>(<span class="type">int</span> n) {</span><br><span class="line">    std::vector&lt;std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; factors;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; <span class="built_in">static_cast</span>&lt;<span class="type">long</span> <span class="type">long</span>&gt;(i) * i &lt;= n; i++) {</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>) {</span><br><span class="line">            <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (; n % i == <span class="number">0</span>; n /= i)</span><br><span class="line">                ++t;</span><br><span class="line">            factors.<span class="built_in">emplace_back</span>(i, t);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>)</span><br><span class="line">        factors.<span class="built_in">emplace_back</span>(n, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> factors;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="type">int</span> <span class="title">power</span><span class="params">(<span class="type">int</span> base, i64 exp)</span> </span>{</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; exp &gt; <span class="number">0</span>; base *= base, exp /= <span class="number">2</span>) {</span><br><span class="line">        <span class="keyword">if</span> (exp % <span class="number">2</span> == <span class="number">1</span>) {</span><br><span class="line">            res *= base;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="type">int</span> <span class="title">power</span><span class="params">(<span class="type">int</span> base, i64 exp, <span class="type">int</span> mod)</span> </span>{</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span> % mod;</span><br><span class="line">    <span class="keyword">for</span> (; exp &gt; <span class="number">0</span>; base = <span class="number">1LL</span> * base * base % mod, exp /= <span class="number">2</span>) {</span><br><span class="line">        <span class="keyword">if</span> (exp % <span class="number">2</span> == <span class="number">1</span>) {</span><br><span class="line">            res = <span class="number">1LL</span> * res * base % mod;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">inverse</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> m)</span> </span>{</span><br><span class="line">    <span class="type">int</span> g = m, r = a, x = <span class="number">0</span>, y = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (r != <span class="number">0</span>) {</span><br><span class="line">        <span class="type">int</span> q = g / r;</span><br><span class="line">        g %= r;</span><br><span class="line">        std::<span class="built_in">swap</span>(g, r);</span><br><span class="line">        x -= q * y;</span><br><span class="line">        std::<span class="built_in">swap</span>(x, y);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> x &lt; <span class="number">0</span> ? x + m : x;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solveModuloEquations</span><span class="params">(<span class="type">const</span> std::vector&lt;std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; &amp;e)</span> </span>{</span><br><span class="line">    <span class="type">int</span> m = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (std::<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; e.<span class="built_in">size</span>(); i++) {</span><br><span class="line">        m *= e[i].first;</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (std::<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; e.<span class="built_in">size</span>(); i++) {</span><br><span class="line">        <span class="type">int</span> p = e[i].first;</span><br><span class="line">        res = (res + <span class="number">1LL</span> * e[i].second * (m / p) * <span class="built_in">inverse</span>(m / p, p)) % m;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N = <span class="number">1E5</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Binomial</span> {</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> mod;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">const</span> std::vector&lt;std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; factors;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; pk;</span><br><span class="line">    std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; prod;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="keyword">constexpr</span> i64 <span class="title">exponent</span><span class="params">(i64 n, <span class="type">int</span> p)</span> </span>{</span><br><span class="line">        i64 res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (n /= p; n &gt; <span class="number">0</span>; n /= p) {</span><br><span class="line">            res += n;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">product</span><span class="params">(i64 n, std::<span class="type">size_t</span> i)</span> </span>{</span><br><span class="line">        <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> p = factors[i].first;</span><br><span class="line">        <span class="keyword">for</span> (; n &gt; <span class="number">0</span>; n /= p) {</span><br><span class="line">            res = <span class="number">1LL</span> * res * <span class="built_in">power</span>(prod[i].<span class="built_in">back</span>(), n / pk[i], pk[i]) % pk[i] * prod[i][n % pk[i]] % pk[i];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Binomial</span>(<span class="type">int</span> mod) : <span class="built_in">mod</span>(mod), <span class="built_in">factors</span>(<span class="built_in">factorize</span>(mod)) {</span><br><span class="line">        pk.<span class="built_in">resize</span>(factors.<span class="built_in">size</span>());</span><br><span class="line">        prod.<span class="built_in">resize</span>(factors.<span class="built_in">size</span>());</span><br><span class="line">        <span class="keyword">for</span> (std::<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; factors.<span class="built_in">size</span>(); i++) {</span><br><span class="line">            <span class="type">int</span> p = factors[i].first;</span><br><span class="line">            <span class="type">int</span> k = factors[i].second;</span><br><span class="line">            pk[i] = <span class="built_in">power</span>(p, k);</span><br><span class="line">            prod[i].<span class="built_in">resize</span>(std::<span class="built_in">min</span>(N + <span class="number">1</span>, pk[i]));</span><br><span class="line">            prod[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; prod[i].<span class="built_in">size</span>(); j++) {</span><br><span class="line">                <span class="keyword">if</span> (j % p == <span class="number">0</span>) {</span><br><span class="line">                    prod[i][j] = prod[i][j - <span class="number">1</span>];</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    prod[i][j] = <span class="number">1LL</span> * prod[i][j - <span class="number">1</span>] * j % pk[i];</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(i64 n, i64 m)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (n &lt; m || m &lt; <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        std::vector&lt;std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; <span class="built_in">ans</span>(factors.<span class="built_in">size</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; factors.<span class="built_in">size</span>(); i++) {</span><br><span class="line">            <span class="type">int</span> p = factors[i].first;</span><br><span class="line">            <span class="type">int</span> k = factors[i].second;</span><br><span class="line">            <span class="type">int</span> e = <span class="built_in">exponent</span>(n, p) - <span class="built_in">exponent</span>(m, p) - <span class="built_in">exponent</span>(n - m, p);</span><br><span class="line">            <span class="keyword">if</span> (e &gt;= k) {</span><br><span class="line">                ans[i] = std::<span class="built_in">make_pair</span>(pk[i], <span class="number">0</span>);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="type">int</span> pn = <span class="built_in">product</span>(n, i);</span><br><span class="line">                <span class="type">int</span> pm = <span class="built_in">product</span>(m, i);</span><br><span class="line">                <span class="type">int</span> pd = <span class="built_in">product</span>(n - m, i);</span><br><span class="line">                <span class="type">int</span> res = <span class="number">1LL</span> * pn * <span class="built_in">inverse</span>(pm, pk[i]) % pk[i] * <span class="built_in">inverse</span>(pd, pk[i]) % pk[i] * <span class="built_in">power</span>(p, e) % pk[i];</span><br><span class="line">                ans[i] = std::<span class="built_in">make_pair</span>(pk[i], res);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">solveModuloEquations</span>(ans);</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure>
<h2 id="08-素数测试与因式分解（Miller-Rabin-amp-Pollard-Rho）"><a href="#08-素数测试与因式分解（Miller-Rabin-amp-Pollard-Rho）" class="headerlink" title="08 - 素数测试与因式分解（Miller-Rabin \& Pollard-Rho）"></a>08 - 素数测试与因式分解（Miller-Rabin \&amp; Pollard-Rho）</h2><p><a href="https://cf.dianhsu.com/gym/104354/submission/206130894">2023-05-16</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">i64 <span class="title">mul</span><span class="params">(i64 a, i64 b, i64 m)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">static_cast</span>&lt;__int128&gt;(a) * b % m;</span><br><span class="line">}</span><br><span class="line"><span class="function">i64 <span class="title">power</span><span class="params">(i64 a, i64 b, i64 m)</span> </span>{</span><br><span class="line">    i64 res = <span class="number">1</span> % m;</span><br><span class="line">    <span class="keyword">for</span> (; b; b &gt;&gt;= <span class="number">1</span>, a = <span class="built_in">mul</span>(a, a, m))</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>)</span><br><span class="line">            res = <span class="built_in">mul</span>(res, a, m);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isprime</span><span class="params">(i64 n)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> A[] = {<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>};</span><br><span class="line">    <span class="type">int</span> s = __builtin_ctzll(n - <span class="number">1</span>);</span><br><span class="line">    i64 d = (n - <span class="number">1</span>) &gt;&gt; s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> a : A) {</span><br><span class="line">        <span class="keyword">if</span> (a == n)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        i64 x = <span class="built_in">power</span>(a, d, n);</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">1</span> || x == n - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">bool</span> ok = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s - <span class="number">1</span>; ++i) {</span><br><span class="line">            x = <span class="built_in">mul</span>(x, x, n);</span><br><span class="line">            <span class="keyword">if</span> (x == n - <span class="number">1</span>) {</span><br><span class="line">                ok = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (!ok)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function">std::vector&lt;i64&gt; <span class="title">factorize</span><span class="params">(i64 n)</span> </span>{</span><br><span class="line">    std::vector&lt;i64&gt; p;</span><br><span class="line">    std::function&lt;<span class="type">void</span>(i64)&gt; f = [&amp;](i64 n) {</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">10000</span>) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i * i &lt;= n; ++i)</span><br><span class="line">                <span class="keyword">for</span> (; n % i == <span class="number">0</span>; n /= i)</span><br><span class="line">                    p.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="keyword">if</span> (n &gt; <span class="number">1</span>)</span><br><span class="line">                p.<span class="built_in">push_back</span>(n);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isprime</span>(n)) {</span><br><span class="line">            p.<span class="built_in">push_back</span>(n);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">auto</span> g = [&amp;](i64 x) {</span><br><span class="line">            <span class="built_in">return</span> (<span class="built_in">mul</span>(x, x, n) + <span class="number">1</span>) % n;</span><br><span class="line">        };</span><br><span class="line">        i64 x0 = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) {</span><br><span class="line">            i64 x = x0;</span><br><span class="line">            i64 y = x0;</span><br><span class="line">            i64 d = <span class="number">1</span>;</span><br><span class="line">            i64 power = <span class="number">1</span>, lam = <span class="number">0</span>;</span><br><span class="line">            i64 v = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (d == <span class="number">1</span>) {</span><br><span class="line">                y = <span class="built_in">g</span>(y);</span><br><span class="line">                ++lam;</span><br><span class="line">                v = <span class="built_in">mul</span>(v, std::<span class="built_in">abs</span>(x - y), n);</span><br><span class="line">                <span class="keyword">if</span> (lam % <span class="number">127</span> == <span class="number">0</span>) {</span><br><span class="line">                    d = std::<span class="built_in">gcd</span>(v, n);</span><br><span class="line">                    v = <span class="number">1</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span> (power == lam) {</span><br><span class="line">                    x = y;</span><br><span class="line">                    power *= <span class="number">2</span>;</span><br><span class="line">                    lam = <span class="number">0</span>;</span><br><span class="line">                    d = std::<span class="built_in">gcd</span>(v, n);</span><br><span class="line">                    v = <span class="number">1</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (d != n) {</span><br><span class="line">                <span class="built_in">f</span>(d);</span><br><span class="line">                <span class="built_in">f</span>(n / d);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            }</span><br><span class="line">            ++x0;</span><br><span class="line">        }</span><br><span class="line">    };</span><br><span class="line">    <span class="built_in">f</span>(n);</span><br><span class="line">    std::<span class="built_in">sort</span>(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="09-平面几何"><a href="#09-平面几何" class="headerlink" title="09 - 平面几何"></a>09 - 平面几何</h2><p><a href="https://ac.nowcoder.com/acm/contest/view-submission?submissionId=62808640">2023-07-17</a></p>
<p>长度过长，点击查看</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span> {</span><br><span class="line">    T x;</span><br><span class="line">    T y;</span><br><span class="line">    <span class="built_in">Point</span>(T x_ = <span class="number">0</span>, T y_ = <span class="number">0</span>) : <span class="built_in">x</span>(x_), <span class="built_in">y</span>(y_) {}</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">U</span>&gt;</span><br><span class="line">    <span class="keyword">operator</span> <span class="built_in">Point</span>&lt;U&gt;() {</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Point</span>&lt;U&gt;(<span class="built_in">U</span>(x), <span class="built_in">U</span>(y));</span><br><span class="line">    }</span><br><span class="line">    Point &amp;<span class="keyword">operator</span>+=(Point p) &amp; {</span><br><span class="line">        x += p.x;</span><br><span class="line">        y += p.y;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line">    Point &amp;<span class="keyword">operator</span>-=(Point p) &amp; {</span><br><span class="line">        x -= p.x;</span><br><span class="line">        y -= p.y;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line">    Point &amp;<span class="keyword">operator</span>*=(T v) &amp; {</span><br><span class="line">        x *= v;</span><br><span class="line">        y *= v;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line">    Point <span class="keyword">operator</span>-() <span class="type">const</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Point</span>(-x, -y);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">friend</span> Point <span class="keyword">operator</span>+(Point a, Point b) {</span><br><span class="line">        <span class="keyword">return</span> a += b;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">friend</span> Point <span class="keyword">operator</span>-(Point a, Point b) {</span><br><span class="line">        <span class="keyword">return</span> a -= b;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">friend</span> Point <span class="keyword">operator</span>*(Point a, T b) {</span><br><span class="line">        <span class="keyword">return</span> a *= b;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">friend</span> Point <span class="keyword">operator</span>*(T a, Point b) {</span><br><span class="line">        <span class="keyword">return</span> b *= a;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>==(Point a, Point b) {</span><br><span class="line">        <span class="keyword">return</span> a.x == b.x &amp;&amp; a.y == b.y;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">friend</span> std::istream &amp;<span class="keyword">operator</span>&gt;&gt;(std::istream &amp;is, Point &amp;p) {</span><br><span class="line">        <span class="keyword">return</span> is &gt;&gt; p.x &gt;&gt; p.y;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">friend</span> std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;os, Point p) {</span><br><span class="line">        <span class="keyword">return</span> os &lt;&lt; <span class="string">"("</span> &lt;&lt; p.x &lt;&lt; <span class="string">", "</span> &lt;&lt; p.y &lt;&lt; <span class="string">")"</span>;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">dot</span><span class="params">(Point&lt;T&gt; a, Point&lt;T&gt; b)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> a.x * b.x + a.y * b.y;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">cross</span><span class="params">(Point&lt;T&gt; a, Point&lt;T&gt; b)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> a.x * b.y - a.y * b.x;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">square</span><span class="params">(Point&lt;T&gt; p)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dot</span>(p, p);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">length</span><span class="params">(Point&lt;T&gt; p)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">sqrt</span>(<span class="built_in">double</span>(<span class="built_in">square</span>(p)));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">length</span><span class="params">(Point&lt;<span class="type">long</span> <span class="type">double</span>&gt; p)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">sqrt</span>(<span class="built_in">square</span>(p));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Line</span> {</span><br><span class="line">    Point&lt;T&gt; a;</span><br><span class="line">    Point&lt;T&gt; b;</span><br><span class="line">    <span class="built_in">Line</span>(Point&lt;T&gt; a_ = <span class="built_in">Point</span>&lt;T&gt;(), Point&lt;T&gt; b_ = <span class="built_in">Point</span>&lt;T&gt;()) : <span class="built_in">a</span>(a_), <span class="built_in">b</span>(b_) {}</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function">Point&lt;T&gt; <span class="title">rotate</span><span class="params">(Point&lt;T&gt; a)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Point</span>(-a.y, a.x);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sgn</span><span class="params">(Point&lt;T&gt; a)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> a.y &gt; <span class="number">0</span> || (a.y == <span class="number">0</span> &amp;&amp; a.x &gt; <span class="number">0</span>) ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">pointOnLineLeft</span><span class="params">(Point&lt;T&gt; p, Line&lt;T&gt; l)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">cross</span>(l.b - l.a, p - l.a) &gt; <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function">Point&lt;T&gt; <span class="title">lineIntersection</span><span class="params">(Line&lt;T&gt; l1, Line&lt;T&gt; l2)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> l1.a + (l1.b - l1.a) * (<span class="built_in">cross</span>(l2.b - l2.a, l1.a - l2.a) / <span class="built_in">cross</span>(l2.b - l2.a, l1.a - l1.b));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">pointOnSegment</span><span class="params">(Point&lt;T&gt; p, Line&lt;T&gt; l)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">cross</span>(p - l.a, l.b - l.a) == <span class="number">0</span> &amp;&amp; std::<span class="built_in">min</span>(l.a.x, l.b.x) &lt;= p.x &amp;&amp; p.x &lt;= std::<span class="built_in">max</span>(l.a.x, l.b.x)</span><br><span class="line">    &amp;&amp; std::<span class="built_in">min</span>(l.a.y, l.b.y) &lt;= p.y &amp;&amp; p.y &lt;= std::<span class="built_in">max</span>(l.a.y, l.b.y);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">pointInPolygon</span><span class="params">(Point&lt;T&gt; a, std::vector&lt;Point&lt;T&gt;&gt; p)</span> </span>{</span><br><span class="line">    <span class="type">int</span> n = p.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">pointOnSegment</span>(a, <span class="built_in">Line</span>(p[i], p[(i + <span class="number">1</span>) % n]))) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">        <span class="keyword">auto</span> u = p[i];</span><br><span class="line">        <span class="keyword">auto</span> v = p[(i + <span class="number">1</span>) % n];</span><br><span class="line">        <span class="keyword">if</span> (u.x &lt; a.x &amp;&amp; v.x &gt;= a.x &amp;&amp; <span class="built_in">pointOnLineLeft</span>(a, <span class="built_in">Line</span>(v, u))) {</span><br><span class="line">            t ^= <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (u.x &gt;= a.x &amp;&amp; v.x &lt; a.x &amp;&amp; <span class="built_in">pointOnLineLeft</span>(a, <span class="built_in">Line</span>(u, v))) {</span><br><span class="line">            t ^= <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> t == <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0 : not intersect</span></span><br><span class="line"><span class="comment">// 1 : strictly intersect</span></span><br><span class="line"><span class="comment">// 2 : overlap</span></span><br><span class="line"><span class="comment">// 3 : intersect at endpoint</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line">std::tuple&lt;<span class="type">int</span>, Point&lt;T&gt;, Point&lt;T&gt;&gt; <span class="built_in">segmentIntersection</span>(Line&lt;T&gt; l1, Line&lt;T&gt; l2) {</span><br><span class="line">    <span class="keyword">if</span> (std::<span class="built_in">max</span>(l1.a.x, l1.b.x) &lt; std::<span class="built_in">min</span>(l2.a.x, l2.b.x)) {</span><br><span class="line">        <span class="keyword">return</span> {<span class="number">0</span>, <span class="built_in">Point</span>&lt;T&gt;(), <span class="built_in">Point</span>&lt;T&gt;()};</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (std::<span class="built_in">min</span>(l1.a.x, l1.b.x) &gt; std::<span class="built_in">max</span>(l2.a.x, l2.b.x)) {</span><br><span class="line">        <span class="keyword">return</span> {<span class="number">0</span>, <span class="built_in">Point</span>&lt;T&gt;(), <span class="built_in">Point</span>&lt;T&gt;()};</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (std::<span class="built_in">max</span>(l1.a.y, l1.b.y) &lt; std::<span class="built_in">min</span>(l2.a.y, l2.b.y)) {</span><br><span class="line">        <span class="keyword">return</span> {<span class="number">0</span>, <span class="built_in">Point</span>&lt;T&gt;(), <span class="built_in">Point</span>&lt;T&gt;()};</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (std::<span class="built_in">min</span>(l1.a.y, l1.b.y) &gt; std::<span class="built_in">max</span>(l2.a.y, l2.b.y)) {</span><br><span class="line">        <span class="keyword">return</span> {<span class="number">0</span>, <span class="built_in">Point</span>&lt;T&gt;(), <span class="built_in">Point</span>&lt;T&gt;()};</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">cross</span>(l1.b - l1.a, l2.b - l2.a) == <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">cross</span>(l1.b - l1.a, l2.a - l1.a) != <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> {<span class="number">0</span>, <span class="built_in">Point</span>&lt;T&gt;(), <span class="built_in">Point</span>&lt;T&gt;()};</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">auto</span> maxx1 = std::<span class="built_in">max</span>(l1.a.x, l1.b.x);</span><br><span class="line">            <span class="keyword">auto</span> minx1 = std::<span class="built_in">min</span>(l1.a.x, l1.b.x);</span><br><span class="line">            <span class="keyword">auto</span> maxy1 = std::<span class="built_in">max</span>(l1.a.y, l1.b.y);</span><br><span class="line">            <span class="keyword">auto</span> miny1 = std::<span class="built_in">min</span>(l1.a.y, l1.b.y);</span><br><span class="line">            <span class="keyword">auto</span> maxx2 = std::<span class="built_in">max</span>(l2.a.x, l2.b.x);</span><br><span class="line">            <span class="keyword">auto</span> minx2 = std::<span class="built_in">min</span>(l2.a.x, l2.b.x);</span><br><span class="line">            <span class="keyword">auto</span> maxy2 = std::<span class="built_in">max</span>(l2.a.y, l2.b.y);</span><br><span class="line">            <span class="keyword">auto</span> miny2 = std::<span class="built_in">min</span>(l2.a.y, l2.b.y);</span><br><span class="line">            <span class="function">Point&lt;T&gt; <span class="title">p1</span><span class="params">(std::max(minx1, minx2), std::max(miny1, miny2))</span></span>;</span><br><span class="line">            <span class="function">Point&lt;T&gt; <span class="title">p2</span><span class="params">(std::min(maxx1, maxx2), std::min(maxy1, maxy2))</span></span>;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">pointOnSegment</span>(p1, l1)) {</span><br><span class="line">                std::<span class="built_in">swap</span>(p1.y, p2.y);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (p1 == p2) {</span><br><span class="line">                <span class="keyword">return</span> {<span class="number">3</span>, p1, p2};</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="keyword">return</span> {<span class="number">2</span>, p1, p2};</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">auto</span> cp1 = <span class="built_in">cross</span>(l2.a - l1.a, l2.b - l1.a);</span><br><span class="line">    <span class="keyword">auto</span> cp2 = <span class="built_in">cross</span>(l2.a - l1.b, l2.b - l1.b);</span><br><span class="line">    <span class="keyword">auto</span> cp3 = <span class="built_in">cross</span>(l1.a - l2.a, l1.b - l2.a);</span><br><span class="line">    <span class="keyword">auto</span> cp4 = <span class="built_in">cross</span>(l1.a - l2.b, l1.b - l2.b);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ((cp1 &gt; <span class="number">0</span> &amp;&amp; cp2 &gt; <span class="number">0</span>) || (cp1 &lt; <span class="number">0</span> &amp;&amp; cp2 &lt; <span class="number">0</span>) || (cp3 &gt; <span class="number">0</span> &amp;&amp; cp4 &gt; <span class="number">0</span>) || (cp3 &lt; <span class="number">0</span> &amp;&amp; cp4 &lt; <span class="number">0</span>)) {</span><br><span class="line">        <span class="keyword">return</span> {<span class="number">0</span>, <span class="built_in">Point</span>&lt;T&gt;(), <span class="built_in">Point</span>&lt;T&gt;()};</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    Point p = <span class="built_in">lineIntersection</span>(l1, l2);</span><br><span class="line">    <span class="keyword">if</span> (cp1 != <span class="number">0</span> &amp;&amp; cp2 != <span class="number">0</span> &amp;&amp; cp3 != <span class="number">0</span> &amp;&amp; cp4 != <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">return</span> {<span class="number">1</span>, p, p};</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> {<span class="number">3</span>, p, p};</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">segmentInPolygon</span><span class="params">(Line&lt;T&gt; l, std::vector&lt;Point&lt;T&gt;&gt; p)</span> </span>{</span><br><span class="line">    <span class="type">int</span> n = p.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">pointInPolygon</span>(l.a, p)) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">pointInPolygon</span>(l.b, p)) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">        <span class="keyword">auto</span> u = p[i];</span><br><span class="line">        <span class="keyword">auto</span> v = p[(i + <span class="number">1</span>) % n];</span><br><span class="line">        <span class="keyword">auto</span> w = p[(i + <span class="number">2</span>) % n];</span><br><span class="line">        <span class="keyword">auto</span> [t, p1, p2] = <span class="built_in">segmentIntersection</span>(l, <span class="built_in">Line</span>(u, v));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (t == <span class="number">1</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="number">2</span>) {</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">pointOnSegment</span>(v, l) &amp;&amp; v != l.a &amp;&amp; v != l.b) {</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">cross</span>(v - u, w - v) &gt; <span class="number">0</span>) {</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">if</span> (p1 != u &amp;&amp; p1 != v) {</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">pointOnLineLeft</span>(l.a, <span class="built_in">Line</span>(v, u))</span><br><span class="line">                    || <span class="built_in">pointOnLineLeft</span>(l.b, <span class="built_in">Line</span>(v, u))) {</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (p1 == v) {</span><br><span class="line">                <span class="keyword">if</span> (l.a == v) {</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">pointOnLineLeft</span>(u, l)) {</span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">pointOnLineLeft</span>(w, l)</span><br><span class="line">                            &amp;&amp; <span class="built_in">pointOnLineLeft</span>(w, <span class="built_in">Line</span>(u, v))) {</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                        }</span><br><span class="line">                    } <span class="keyword">else</span> {</span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">pointOnLineLeft</span>(w, l)</span><br><span class="line">                            || <span class="built_in">pointOnLineLeft</span>(w, <span class="built_in">Line</span>(u, v))) {</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                        }</span><br><span class="line">                    }</span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (l.b == v) {</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">pointOnLineLeft</span>(u, <span class="built_in">Line</span>(l.b, l.a))) {</span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">pointOnLineLeft</span>(w, <span class="built_in">Line</span>(l.b, l.a))</span><br><span class="line">                            &amp;&amp; <span class="built_in">pointOnLineLeft</span>(w, <span class="built_in">Line</span>(u, v))) {</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                        }</span><br><span class="line">                    } <span class="keyword">else</span> {</span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">pointOnLineLeft</span>(w, <span class="built_in">Line</span>(l.b, l.a))</span><br><span class="line">                            || <span class="built_in">pointOnLineLeft</span>(w, <span class="built_in">Line</span>(u, v))) {</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                        }</span><br><span class="line">                    }</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">pointOnLineLeft</span>(u, l)) {</span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">pointOnLineLeft</span>(w, <span class="built_in">Line</span>(l.b, l.a))</span><br><span class="line">                            || <span class="built_in">pointOnLineLeft</span>(w, <span class="built_in">Line</span>(u, v))) {</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                        }</span><br><span class="line">                    } <span class="keyword">else</span> {</span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">pointOnLineLeft</span>(w, l)</span><br><span class="line">                            || <span class="built_in">pointOnLineLeft</span>(w, <span class="built_in">Line</span>(u, v))) {</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                        }</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line">std::vector&lt;Point&lt;T&gt;&gt; <span class="built_in">hp</span>(std::vector&lt;Line&lt;T&gt;&gt; lines) {</span><br><span class="line">    std::<span class="built_in">sort</span>(lines.<span class="built_in">begin</span>(), lines.<span class="built_in">end</span>(), [&amp;](<span class="keyword">auto</span> l1, <span class="keyword">auto</span> l2) {</span><br><span class="line">        <span class="keyword">auto</span> d1 = l1.b - l1.a;</span><br><span class="line">        <span class="keyword">auto</span> d2 = l2.b - l2.a;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sgn</span>(d1) != <span class="built_in">sgn</span>(d2)) {</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">sgn</span>(d1) == <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">cross</span>(d1, d2) &gt; <span class="number">0</span>;</span><br><span class="line">    });</span><br><span class="line">    </span><br><span class="line">    std::deque&lt;Line&lt;T&gt;&gt; ls;</span><br><span class="line">    std::deque&lt;Point&lt;T&gt;&gt; ps;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> l : lines) {</span><br><span class="line">        <span class="keyword">if</span> (ls.<span class="built_in">empty</span>()) {</span><br><span class="line">            ls.<span class="built_in">push_back</span>(l);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (!ps.<span class="built_in">empty</span>() &amp;&amp; !<span class="built_in">pointOnLineLeft</span>(ps.<span class="built_in">back</span>(), l)) {</span><br><span class="line">            ps.<span class="built_in">pop_back</span>();</span><br><span class="line">            ls.<span class="built_in">pop_back</span>();</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (!ps.<span class="built_in">empty</span>() &amp;&amp; !<span class="built_in">pointOnLineLeft</span>(ps[<span class="number">0</span>], l)) {</span><br><span class="line">            ps.<span class="built_in">pop_front</span>();</span><br><span class="line">            ls.<span class="built_in">pop_front</span>();</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">cross</span>(l.b - l.a, ls.<span class="built_in">back</span>().b - ls.<span class="built_in">back</span>().a) == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">dot</span>(l.b - l.a, ls.<span class="built_in">back</span>().b - ls.<span class="built_in">back</span>().a) &gt; <span class="number">0</span>) {</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (!<span class="built_in">pointOnLineLeft</span>(ls.<span class="built_in">back</span>().a, l)) {</span><br><span class="line">                    <span class="built_in">assert</span>(ls.<span class="built_in">size</span>() == <span class="number">1</span>);</span><br><span class="line">                    ls[<span class="number">0</span>] = l;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> {};</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        ps.<span class="built_in">push_back</span>(<span class="built_in">lineIntersection</span>(ls.<span class="built_in">back</span>(), l));</span><br><span class="line">        ls.<span class="built_in">push_back</span>(l);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (!ps.<span class="built_in">empty</span>() &amp;&amp; !<span class="built_in">pointOnLineLeft</span>(ps.<span class="built_in">back</span>(), ls[<span class="number">0</span>])) {</span><br><span class="line">        ps.<span class="built_in">pop_back</span>();</span><br><span class="line">        ls.<span class="built_in">pop_back</span>();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (ls.<span class="built_in">size</span>() &lt;= <span class="number">2</span>) {</span><br><span class="line">        <span class="keyword">return</span> {};</span><br><span class="line">    }</span><br><span class="line">    ps.<span class="built_in">push_back</span>(<span class="built_in">lineIntersection</span>(ls[<span class="number">0</span>], ls.<span class="built_in">back</span>()));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">vector</span>(ps.<span class="built_in">begin</span>(), ps.<span class="built_in">end</span>());</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="10A-静态凸包（with-Point）"><a href="#10A-静态凸包（with-Point）" class="headerlink" title="10A - 静态凸包（with. Point）"></a>10A - 静态凸包（with. Point）</h2><p><a href="https://cf.dianhsu.com/gym/104288/submission/201412835">2023-04-09</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span> {</span><br><span class="line">    i64 x;</span><br><span class="line">    i64 y;</span><br><span class="line">    <span class="built_in">Point</span>(i64 x = <span class="number">0</span>, i64 y = <span class="number">0</span>) : <span class="built_in">x</span>(x), <span class="built_in">y</span>(y) {}</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> Point &amp;a, <span class="type">const</span> Point &amp;b) {</span><br><span class="line">    <span class="keyword">return</span> a.x == b.x &amp;&amp; a.y == b.y;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Point <span class="keyword">operator</span>+(<span class="type">const</span> Point &amp;a, <span class="type">const</span> Point &amp;b) {</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Point</span>(a.x + b.x, a.y + b.y);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Point <span class="keyword">operator</span>-(<span class="type">const</span> Point &amp;a, <span class="type">const</span> Point &amp;b) {</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Point</span>(a.x - b.x, a.y - b.y);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function">i64 <span class="title">dot</span><span class="params">(<span class="type">const</span> Point &amp;a, <span class="type">const</span> Point &amp;b)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> a.x * b.x + a.y * b.y;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function">i64 <span class="title">cross</span><span class="params">(<span class="type">const</span> Point &amp;a, <span class="type">const</span> Point &amp;b)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> a.x * b.y - a.y * b.x;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">norm</span><span class="params">(std::vector&lt;Point&gt; &amp;h)</span> </span>{</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">int</span>(h.<span class="built_in">size</span>()); j++) {</span><br><span class="line">        <span class="keyword">if</span> (h[j].y &lt; h[i].y || (h[j].y == h[i].y &amp;&amp; h[j].x &lt; h[i].x)) {</span><br><span class="line">            i = j;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    std::<span class="built_in">rotate</span>(h.<span class="built_in">begin</span>(), h.<span class="built_in">begin</span>() + i, h.<span class="built_in">end</span>());</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sgn</span><span class="params">(<span class="type">const</span> Point &amp;a)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> a.y &gt; <span class="number">0</span> || (a.y == <span class="number">0</span> &amp;&amp; a.x &gt; <span class="number">0</span>) ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function">std::vector&lt;Point&gt; <span class="title">getHull</span><span class="params">(std::vector&lt;Point&gt; p)</span> </span>{</span><br><span class="line">    std::vector&lt;Point&gt; h, l;</span><br><span class="line">    std::<span class="built_in">sort</span>(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>(), [&amp;](<span class="keyword">auto</span> a, <span class="keyword">auto</span> b) {</span><br><span class="line">        <span class="keyword">if</span> (a.x != b.x) {</span><br><span class="line">            <span class="keyword">return</span> a.x &lt; b.x;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">return</span> a.y &lt; b.y;</span><br><span class="line">        }</span><br><span class="line">    });</span><br><span class="line">    p.<span class="built_in">erase</span>(std::<span class="built_in">unique</span>(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>()), p.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">if</span> (p.<span class="built_in">size</span>() &lt;= <span class="number">1</span>) {</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> a : p) {</span><br><span class="line">        <span class="keyword">while</span> (h.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">cross</span>(a - h.<span class="built_in">back</span>(), a - h[h.<span class="built_in">size</span>() - <span class="number">2</span>]) &lt;= <span class="number">0</span>) {</span><br><span class="line">            h.<span class="built_in">pop_back</span>();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">while</span> (l.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">cross</span>(a - l.<span class="built_in">back</span>(), a - l[l.<span class="built_in">size</span>() - <span class="number">2</span>]) &gt;= <span class="number">0</span>) {</span><br><span class="line">            l.<span class="built_in">pop_back</span>();</span><br><span class="line">        }</span><br><span class="line">        l.<span class="built_in">push_back</span>(a);</span><br><span class="line">        h.<span class="built_in">push_back</span>(a);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    l.<span class="built_in">pop_back</span>();</span><br><span class="line">    std::<span class="built_in">reverse</span>(h.<span class="built_in">begin</span>(), h.<span class="built_in">end</span>());</span><br><span class="line">    h.<span class="built_in">pop_back</span>();</span><br><span class="line">    l.<span class="built_in">insert</span>(l.<span class="built_in">end</span>(), h.<span class="built_in">begin</span>(), h.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="10B-静态凸包（with-std-complex）"><a href="#10B-静态凸包（with-std-complex）" class="headerlink" title="10B - 静态凸包（with. std::complex）"></a>10B - 静态凸包（with. std::complex）</h2><p><a href="https://loj.ac/s/1370861">2022-02-04</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Point = std::complex&lt;i64&gt;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x real</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y imag</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">dot</span><span class="params">(<span class="type">const</span> Point &amp;a, <span class="type">const</span> Point &amp;b)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> (std::<span class="built_in">conj</span>(a) * b).<span class="built_in">x</span>();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">cross</span><span class="params">(<span class="type">const</span> Point &amp;a, <span class="type">const</span> Point &amp;b)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> (std::<span class="built_in">conj</span>(a) * b).<span class="built_in">y</span>();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">rot</span><span class="params">(<span class="type">const</span> Point &amp;p)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Point</span>(-p.<span class="built_in">y</span>(), p.<span class="built_in">x</span>());</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">complexHull</span><span class="params">(std::vector&lt;Point&gt; a)</span> </span>{</span><br><span class="line">    std::<span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), [&amp;](<span class="keyword">auto</span> a, <span class="keyword">auto</span> b) {</span><br><span class="line">        <span class="keyword">if</span> (a.<span class="built_in">x</span>() != b.<span class="built_in">x</span>()) {</span><br><span class="line">            <span class="keyword">return</span> a.<span class="built_in">x</span>() &lt; b.<span class="built_in">x</span>();</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">return</span> a.<span class="built_in">y</span>() &lt; b.<span class="built_in">y</span>();</span><br><span class="line">        }</span><br><span class="line">    });</span><br><span class="line"></span><br><span class="line">    std::vector&lt;Point&gt; l, h;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> p : a) {</span><br><span class="line">        <span class="keyword">while</span> (l.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">cross</span>(l.<span class="built_in">back</span>() - l[l.<span class="built_in">size</span>() - <span class="number">2</span>], p - l.<span class="built_in">back</span>()) &lt;= <span class="number">0</span>) {</span><br><span class="line">            l.<span class="built_in">pop_back</span>();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (h.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">cross</span>(h.<span class="built_in">back</span>() - h[h.<span class="built_in">size</span>() - <span class="number">2</span>], p - h.<span class="built_in">back</span>()) &gt;= <span class="number">0</span>) {</span><br><span class="line">            h.<span class="built_in">pop_back</span>();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        l.<span class="built_in">push_back</span>(p);</span><br><span class="line">        h.<span class="built_in">push_back</span>(p);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    std::<span class="built_in">reverse</span>(h.<span class="built_in">begin</span>(), h.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">    h.<span class="built_in">insert</span>(h.<span class="built_in">end</span>(), l.<span class="built_in">begin</span>() + <span class="number">1</span>, l.<span class="built_in">end</span>() - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sgn</span><span class="params">(Point p)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (p.<span class="built_in">y</span>() &gt; <span class="number">0</span> || (p.<span class="built_in">y</span>() == <span class="number">0</span> &amp;&amp; p.<span class="built_in">x</span>() &lt; <span class="number">0</span>)) {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="11A-多项式相关（Poly-with-Z）"><a href="#11A-多项式相关（Poly-with-Z）" class="headerlink" title="11A - 多项式相关（Poly, with. Z）"></a>11A - 多项式相关（Poly, with. Z）</h2><p><a href="https://atcoder.jp/contests/arc155/submissions/38664055">2023-02-06</a></p>
<p>长度过长，点击查看</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; rev;</span><br><span class="line">std::vector&lt;Z&gt; roots{<span class="number">0</span>, <span class="number">1</span>};</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dft</span><span class="params">(std::vector&lt;Z&gt; &amp;a)</span> </span>{</span><br><span class="line">    <span class="type">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">int</span>(rev.<span class="built_in">size</span>()) != n) {</span><br><span class="line">        <span class="type">int</span> k = __builtin_ctz(n) - <span class="number">1</span>;</span><br><span class="line">        rev.<span class="built_in">resize</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            rev[i] = rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span> | (i &amp; <span class="number">1</span>) &lt;&lt; k;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">        <span class="keyword">if</span> (rev[i] &lt; i) {</span><br><span class="line">            std::<span class="built_in">swap</span>(a[i], a[rev[i]]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">int</span>(roots.<span class="built_in">size</span>()) &lt; n) {</span><br><span class="line">        <span class="type">int</span> k = __builtin_ctz(roots.<span class="built_in">size</span>());</span><br><span class="line">        roots.<span class="built_in">resize</span>(n);</span><br><span class="line">        <span class="keyword">while</span> ((<span class="number">1</span> &lt;&lt; k) &lt; n) {</span><br><span class="line">            Z e = <span class="built_in">power</span>(<span class="built_in">Z</span>(<span class="number">3</span>), (P - <span class="number">1</span>) &gt;&gt; (k + <span class="number">1</span>));</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span> &lt;&lt; (k - <span class="number">1</span>); i &lt; (<span class="number">1</span> &lt;&lt; k); i++) {</span><br><span class="line">                roots[<span class="number">2</span> * i] = roots[i];</span><br><span class="line">                roots[<span class="number">2</span> * i + <span class="number">1</span>] = roots[i] * e;</span><br><span class="line">            }</span><br><span class="line">            k++;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt; n; k *= <span class="number">2</span>) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">2</span> * k) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; k; j++) {</span><br><span class="line">                Z u = a[i + j];</span><br><span class="line">                Z v = a[i + j + k] * roots[k + j];</span><br><span class="line">                a[i + j] = u + v;</span><br><span class="line">                a[i + j + k] = u - v;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">idft</span><span class="params">(std::vector&lt;Z&gt; &amp;a)</span> </span>{</span><br><span class="line">    <span class="type">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">    std::<span class="built_in">reverse</span>(a.<span class="built_in">begin</span>() + <span class="number">1</span>, a.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">dft</span>(a);</span><br><span class="line">    Z inv = (<span class="number">1</span> - P) / n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">        a[i] *= inv;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Poly</span> {</span><br><span class="line">    std::vector&lt;Z&gt; a;</span><br><span class="line">    <span class="built_in">Poly</span>() {}</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Poly</span><span class="params">(<span class="type">int</span> size, std::function&lt;Z(<span class="type">int</span>)&gt; f = [](<span class="type">int</span>) { <span class="keyword">return</span> <span class="number">0</span>; })</span> : a(size) {</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) {</span><br><span class="line">            a[i] = <span class="built_in">f</span>(i);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">Poly</span>(<span class="type">const</span> std::vector&lt;Z&gt; &amp;a) : <span class="built_in">a</span>(a) {}</span><br><span class="line">    <span class="built_in">Poly</span>(<span class="type">const</span> std::initializer_list&lt;Z&gt; &amp;a) : <span class="built_in">a</span>(a) {}</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span> <span class="type">const</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> a.<span class="built_in">size</span>();</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">resize</span><span class="params">(<span class="type">int</span> n)</span> </span>{</span><br><span class="line">        a.<span class="built_in">resize</span>(n);</span><br><span class="line">    }</span><br><span class="line">    Z <span class="keyword">operator</span>[](<span class="type">int</span> idx) <span class="type">const</span> {</span><br><span class="line">        <span class="keyword">if</span> (idx &lt; <span class="built_in">size</span>()) {</span><br><span class="line">            <span class="keyword">return</span> a[idx];</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    Z &amp;<span class="keyword">operator</span>[](<span class="type">int</span> idx) {</span><br><span class="line">        <span class="keyword">return</span> a[idx];</span><br><span class="line">    }</span><br><span class="line">    <span class="function">Poly <span class="title">mulxk</span><span class="params">(<span class="type">int</span> k)</span> <span class="type">const</span> </span>{</span><br><span class="line">        <span class="keyword">auto</span> b = a;</span><br><span class="line">        b.<span class="built_in">insert</span>(b.<span class="built_in">begin</span>(), k, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Poly</span>(b);</span><br><span class="line">    }</span><br><span class="line">    <span class="function">Poly <span class="title">modxk</span><span class="params">(<span class="type">int</span> k)</span> <span class="type">const</span> </span>{</span><br><span class="line">        k = std::<span class="built_in">min</span>(k, <span class="built_in">size</span>());</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Poly</span>(std::<span class="built_in">vector</span>&lt;Z&gt;(a.<span class="built_in">begin</span>(), a.<span class="built_in">begin</span>() + k));</span><br><span class="line">    }</span><br><span class="line">    <span class="function">Poly <span class="title">divxk</span><span class="params">(<span class="type">int</span> k)</span> <span class="type">const</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">size</span>() &lt;= k) {</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Poly</span>();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Poly</span>(std::<span class="built_in">vector</span>&lt;Z&gt;(a.<span class="built_in">begin</span>() + k, a.<span class="built_in">end</span>()));</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">friend</span> Poly <span class="keyword">operator</span>+(<span class="type">const</span> Poly &amp;a, <span class="type">const</span> Poly &amp;b) {</span><br><span class="line">        <span class="function">std::vector&lt;Z&gt; <span class="title">res</span><span class="params">(std::max(a.size(), b.size()))</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">int</span>(res.<span class="built_in">size</span>()); i++) {</span><br><span class="line">            res[i] = a[i] + b[i];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Poly</span>(res);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">friend</span> Poly <span class="keyword">operator</span>-(<span class="type">const</span> Poly &amp;a, <span class="type">const</span> Poly &amp;b) {</span><br><span class="line">        <span class="function">std::vector&lt;Z&gt; <span class="title">res</span><span class="params">(std::max(a.size(), b.size()))</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">int</span>(res.<span class="built_in">size</span>()); i++) {</span><br><span class="line">            res[i] = a[i] - b[i];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Poly</span>(res);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">friend</span> Poly <span class="keyword">operator</span>-(<span class="type">const</span> Poly &amp;a) {</span><br><span class="line">        <span class="function">std::vector&lt;Z&gt; <span class="title">res</span><span class="params">(a.size())</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">int</span>(res.<span class="built_in">size</span>()); i++) {</span><br><span class="line">            res[i] = -a[i];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Poly</span>(res);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">friend</span> Poly <span class="keyword">operator</span>*(Poly a, Poly b) {</span><br><span class="line">        <span class="keyword">if</span> (a.<span class="built_in">size</span>() == <span class="number">0</span> || b.<span class="built_in">size</span>() == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Poly</span>();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (a.<span class="built_in">size</span>() &lt; b.<span class="built_in">size</span>()) {</span><br><span class="line">            std::<span class="built_in">swap</span>(a, b);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (b.<span class="built_in">size</span>() &lt; <span class="number">128</span>) {</span><br><span class="line">            <span class="function">Poly <span class="title">c</span><span class="params">(a.size() + b.size() - <span class="number">1</span>)</span></span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++) {</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; b.<span class="built_in">size</span>(); j++) {</span><br><span class="line">                    c[i + j] += a[i] * b[j];</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> sz = <span class="number">1</span>, tot = a.<span class="built_in">size</span>() + b.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (sz &lt; tot) {</span><br><span class="line">            sz *= <span class="number">2</span>;</span><br><span class="line">        }</span><br><span class="line">        a.a.<span class="built_in">resize</span>(sz);</span><br><span class="line">        b.a.<span class="built_in">resize</span>(sz);</span><br><span class="line">        <span class="built_in">dft</span>(a.a);</span><br><span class="line">        <span class="built_in">dft</span>(b.a);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; sz; ++i) {</span><br><span class="line">            a.a[i] = a[i] * b[i];</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">idft</span>(a.a);</span><br><span class="line">        a.<span class="built_in">resize</span>(tot);</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">friend</span> Poly <span class="keyword">operator</span>*(Z a, Poly b) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">int</span>(b.<span class="built_in">size</span>()); i++) {</span><br><span class="line">            b[i] *= a;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">friend</span> Poly <span class="keyword">operator</span>*(Poly a, Z b) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">int</span>(a.<span class="built_in">size</span>()); i++) {</span><br><span class="line">            a[i] *= b;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    }</span><br><span class="line">    Poly &amp;<span class="keyword">operator</span>+=(Poly b) {</span><br><span class="line">        <span class="built_in">return</span> (*<span class="keyword">this</span>) = (*<span class="keyword">this</span>) + b;</span><br><span class="line">    }</span><br><span class="line">    Poly &amp;<span class="keyword">operator</span>-=(Poly b) {</span><br><span class="line">        <span class="built_in">return</span> (*<span class="keyword">this</span>) = (*<span class="keyword">this</span>) - b;</span><br><span class="line">    }</span><br><span class="line">    Poly &amp;<span class="keyword">operator</span>*=(Poly b) {</span><br><span class="line">        <span class="built_in">return</span> (*<span class="keyword">this</span>) = (*<span class="keyword">this</span>) * b;</span><br><span class="line">    }</span><br><span class="line">    Poly &amp;<span class="keyword">operator</span>*=(Z b) {</span><br><span class="line">        <span class="built_in">return</span> (*<span class="keyword">this</span>) = (*<span class="keyword">this</span>) * b;</span><br><span class="line">    }</span><br><span class="line">    <span class="function">Poly <span class="title">deriv</span><span class="params">()</span> <span class="type">const</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (a.<span class="built_in">empty</span>()) {</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Poly</span>();</span><br><span class="line">        }</span><br><span class="line">        <span class="function">std::vector&lt;Z&gt; <span class="title">res</span><span class="params">(size() - <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>() - <span class="number">1</span>; ++i) {</span><br><span class="line">            res[i] = (i + <span class="number">1</span>) * a[i + <span class="number">1</span>];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Poly</span>(res);</span><br><span class="line">    }</span><br><span class="line">    <span class="function">Poly <span class="title">integr</span><span class="params">()</span> <span class="type">const</span> </span>{</span><br><span class="line">        <span class="function">std::vector&lt;Z&gt; <span class="title">res</span><span class="params">(size() + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>(); ++i) {</span><br><span class="line">            res[i + <span class="number">1</span>] = a[i] / (i + <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Poly</span>(res);</span><br><span class="line">    }</span><br><span class="line">    <span class="function">Poly <span class="title">inv</span><span class="params">(<span class="type">int</span> m)</span> <span class="type">const</span> </span>{</span><br><span class="line">        Poly x{a[<span class="number">0</span>].<span class="built_in">inv</span>()};</span><br><span class="line">        <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (k &lt; m) {</span><br><span class="line">            k *= <span class="number">2</span>;</span><br><span class="line">            x = (x * (Poly{<span class="number">2</span>} - <span class="built_in">modxk</span>(k) * x)).<span class="built_in">modxk</span>(k);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> x.<span class="built_in">modxk</span>(m);</span><br><span class="line">    }</span><br><span class="line">    <span class="function">Poly <span class="title">log</span><span class="params">(<span class="type">int</span> m)</span> <span class="type">const</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">deriv</span>() * <span class="built_in">inv</span>(m)).<span class="built_in">integr</span>().<span class="built_in">modxk</span>(m);</span><br><span class="line">    }</span><br><span class="line">    <span class="function">Poly <span class="title">exp</span><span class="params">(<span class="type">int</span> m)</span> <span class="type">const</span> </span>{</span><br><span class="line">        Poly x{<span class="number">1</span>};</span><br><span class="line">        <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (k &lt; m) {</span><br><span class="line">            k *= <span class="number">2</span>;</span><br><span class="line">            x = (x * (Poly{<span class="number">1</span>} - x.<span class="built_in">log</span>(k) + <span class="built_in">modxk</span>(k))).<span class="built_in">modxk</span>(k);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> x.<span class="built_in">modxk</span>(m);</span><br><span class="line">    }</span><br><span class="line">    <span class="function">Poly <span class="title">pow</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> m)</span> <span class="type">const</span> </span>{</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; <span class="built_in">size</span>() &amp;&amp; a[i].<span class="built_in">val</span>() == <span class="number">0</span>) {</span><br><span class="line">            i++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="built_in">size</span>() || <span class="number">1LL</span> * i * k &gt;= m) {</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Poly</span>(std::<span class="built_in">vector</span>&lt;Z&gt;(m));</span><br><span class="line">        }</span><br><span class="line">        Z v = a[i];</span><br><span class="line">        <span class="keyword">auto</span> f = <span class="built_in">divxk</span>(i) * v.<span class="built_in">inv</span>();</span><br><span class="line">        <span class="keyword">return</span> (f.<span class="built_in">log</span>(m - i * k) * k).<span class="built_in">exp</span>(m - i * k).<span class="built_in">mulxk</span>(i * k) * <span class="built_in">power</span>(v, k);</span><br><span class="line">    }</span><br><span class="line">    <span class="function">Poly <span class="title">sqrt</span><span class="params">(<span class="type">int</span> m)</span> <span class="type">const</span> </span>{</span><br><span class="line">        Poly x{<span class="number">1</span>};</span><br><span class="line">        <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (k &lt; m) {</span><br><span class="line">            k *= <span class="number">2</span>;</span><br><span class="line">            x = (x + (<span class="built_in">modxk</span>(k) * x.<span class="built_in">inv</span>(k)).<span class="built_in">modxk</span>(k)) * ((P + <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> x.<span class="built_in">modxk</span>(m);</span><br><span class="line">    }</span><br><span class="line">    <span class="function">Poly <span class="title">mulT</span><span class="params">(Poly b)</span> <span class="type">const</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (b.<span class="built_in">size</span>() == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Poly</span>();</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> n = b.<span class="built_in">size</span>();</span><br><span class="line">        std::<span class="built_in">reverse</span>(b.a.<span class="built_in">begin</span>(), b.a.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> ((*<span class="keyword">this</span>) * b).<span class="built_in">divxk</span>(n - <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function">std::vector&lt;Z&gt; <span class="title">eval</span><span class="params">(std::vector&lt;Z&gt; x)</span> <span class="type">const</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">size</span>() == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> std::<span class="built_in">vector</span>&lt;Z&gt;(x.<span class="built_in">size</span>(), <span class="number">0</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = std::<span class="built_in">max</span>(<span class="built_in">int</span>(x.<span class="built_in">size</span>()), <span class="built_in">size</span>());</span><br><span class="line">        <span class="function">std::vector&lt;Poly&gt; <span class="title">q</span><span class="params">(<span class="number">4</span> * n)</span></span>;</span><br><span class="line">        <span class="function">std::vector&lt;Z&gt; <span class="title">ans</span><span class="params">(x.size())</span></span>;</span><br><span class="line">        x.<span class="built_in">resize</span>(n);</span><br><span class="line">        std::function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)&gt; build = [&amp;](<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r) {</span><br><span class="line">            <span class="keyword">if</span> (r - l == <span class="number">1</span>) {</span><br><span class="line">                q[p] = Poly{<span class="number">1</span>, -x[l]};</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">                <span class="built_in">build</span>(<span class="number">2</span> * p, l, m);</span><br><span class="line">                <span class="built_in">build</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r);</span><br><span class="line">                q[p] = q[<span class="number">2</span> * p] * q[<span class="number">2</span> * p + <span class="number">1</span>];</span><br><span class="line">            }</span><br><span class="line">        };</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">0</span>, n);</span><br><span class="line">        std::function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>, <span class="type">const</span> Poly &amp;)&gt; work = [&amp;](<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">const</span> Poly &amp;num) {</span><br><span class="line">            <span class="keyword">if</span> (r - l == <span class="number">1</span>) {</span><br><span class="line">                <span class="keyword">if</span> (l &lt; <span class="built_in">int</span>(ans.<span class="built_in">size</span>())) {</span><br><span class="line">                    ans[l] = num[<span class="number">0</span>];</span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">                <span class="built_in">work</span>(<span class="number">2</span> * p, l, m, num.<span class="built_in">mulT</span>(q[<span class="number">2</span> * p + <span class="number">1</span>]).<span class="built_in">modxk</span>(m - l));</span><br><span class="line">                <span class="built_in">work</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, num.<span class="built_in">mulT</span>(q[<span class="number">2</span> * p]).<span class="built_in">modxk</span>(r - m));</span><br><span class="line">            }</span><br><span class="line">        };</span><br><span class="line">        <span class="built_in">work</span>(<span class="number">1</span>, <span class="number">0</span>, n, <span class="built_in">mulT</span>(q[<span class="number">1</span>].<span class="built_in">inv</span>(n)));</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure>
<h2 id="11B-多项式相关（Poly-with-MInt-amp-MLong）"><a href="#11B-多项式相关（Poly-with-MInt-amp-MLong）" class="headerlink" title="11B - 多项式相关（Poly, with. MInt \& MLong）"></a>11B - 多项式相关（Poly, with. MInt \&amp; MLong）</h2><p><a href="https://atcoder.jp/contests/arc163/submissions/45737810">2023-09-20</a></p>
<p>长度过长，点击查看</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; rev;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> P&gt;</span><br><span class="line">std::vector&lt;MInt&lt;P&gt;&gt; roots{<span class="number">0</span>, <span class="number">1</span>};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="type">int</span> P&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> MInt&lt;P&gt; <span class="title">findPrimitiveRoot</span><span class="params">()</span> </span>{</span><br><span class="line">    MInt&lt;P&gt; i = <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> k = __builtin_ctz(P - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) {</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">power</span>(i, (P - <span class="number">1</span>) / <span class="number">2</span>) != <span class="number">1</span>) {</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        i += <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">power</span>(i, (P - <span class="number">1</span>) &gt;&gt; k);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> P&gt;</span><br><span class="line"><span class="keyword">constexpr</span> MInt&lt;P&gt; primitiveRoot = <span class="built_in">findPrimitiveRoot</span>&lt;P&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="keyword">constexpr</span> MInt&lt;<span class="number">998244353</span>&gt; primitiveRoot&lt;<span class="number">998244353</span>&gt; {<span class="number">31</span>};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="type">int</span> P&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="type">void</span> <span class="title">dft</span><span class="params">(std::vector&lt;MInt&lt;P&gt;&gt; &amp;a)</span> </span>{</span><br><span class="line">    <span class="type">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">int</span>(rev.<span class="built_in">size</span>()) != n) {</span><br><span class="line">        <span class="type">int</span> k = __builtin_ctz(n) - <span class="number">1</span>;</span><br><span class="line">        rev.<span class="built_in">resize</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            rev[i] = rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span> | (i &amp; <span class="number">1</span>) &lt;&lt; k;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">        <span class="keyword">if</span> (rev[i] &lt; i) {</span><br><span class="line">            std::<span class="built_in">swap</span>(a[i], a[rev[i]]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (roots&lt;P&gt;.<span class="built_in">size</span>() &lt; n) {</span><br><span class="line">        <span class="type">int</span> k = __builtin_ctz(roots&lt;P&gt;.<span class="built_in">size</span>());</span><br><span class="line">        roots&lt;P&gt;.<span class="built_in">resize</span>(n);</span><br><span class="line">        <span class="keyword">while</span> ((<span class="number">1</span> &lt;&lt; k) &lt; n) {</span><br><span class="line">            <span class="keyword">auto</span> e = <span class="built_in">power</span>(primitiveRoot&lt;P&gt;, <span class="number">1</span> &lt;&lt; (__builtin_ctz(P - <span class="number">1</span>) - k - <span class="number">1</span>));</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span> &lt;&lt; (k - <span class="number">1</span>); i &lt; (<span class="number">1</span> &lt;&lt; k); i++) {</span><br><span class="line">                roots&lt;P&gt;[<span class="number">2</span> * i] = roots&lt;P&gt;[i];</span><br><span class="line">                roots&lt;P&gt;[<span class="number">2</span> * i + <span class="number">1</span>] = roots&lt;P&gt;[i] * e;</span><br><span class="line">            }</span><br><span class="line">            k++;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt; n; k *= <span class="number">2</span>) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">2</span> * k) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; k; j++) {</span><br><span class="line">                MInt&lt;P&gt; u = a[i + j];</span><br><span class="line">                MInt&lt;P&gt; v = a[i + j + k] * roots&lt;P&gt;[k + j];</span><br><span class="line">                a[i + j] = u + v;</span><br><span class="line">                a[i + j + k] = u - v;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="type">int</span> P&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="type">void</span> <span class="title">idft</span><span class="params">(std::vector&lt;MInt&lt;P&gt;&gt; &amp;a)</span> </span>{</span><br><span class="line">    <span class="type">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">    std::<span class="built_in">reverse</span>(a.<span class="built_in">begin</span>() + <span class="number">1</span>, a.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">dft</span>(a);</span><br><span class="line">    MInt&lt;P&gt; inv = (<span class="number">1</span> - P) / n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">        a[i] *= inv;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> P = <span class="number">998244353</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> Poly : <span class="keyword">public</span> std::vector&lt;MInt&lt;P&gt;&gt; {</span><br><span class="line">    <span class="keyword">using</span> Value = MInt&lt;P&gt;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Poly</span>() : std::<span class="built_in">vector</span>&lt;Value&gt;() {}</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="keyword">constexpr</span> <span class="title">Poly</span><span class="params">(<span class="type">int</span> n)</span> : std::vector&lt;Value&gt;(n) {</span>}</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="keyword">constexpr</span> <span class="title">Poly</span><span class="params">(<span class="type">const</span> std::vector&lt;Value&gt; &amp;a)</span> : std::vector&lt;Value&gt;(a) {</span>}</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="title">Poly</span><span class="params">(<span class="type">const</span> std::initializer_list&lt;Value&gt; &amp;a)</span> : std::vector&lt;Value&gt;(a) {</span>}</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">InputIt</span>, <span class="keyword">class</span> = std::_RequireInputIter&lt;InputIt&gt;&gt;</span><br><span class="line">    <span class="keyword">explicit</span> <span class="keyword">constexpr</span> <span class="built_in">Poly</span>(InputIt first, InputIt last) : std::<span class="built_in">vector</span>&lt;Value&gt;(first, last) {}</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">class</span> F&gt;</span><br><span class="line">    <span class="keyword">explicit</span> <span class="keyword">constexpr</span> <span class="built_in">Poly</span>(<span class="type">int</span> n, F f) : std::<span class="built_in">vector</span>&lt;Value&gt;(n) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            (*<span class="keyword">this</span>)[i] = <span class="built_in">f</span>(i);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> Poly <span class="title">shift</span><span class="params">(<span class="type">int</span> k)</span> <span class="type">const</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (k &gt;= <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">auto</span> b = *<span class="keyword">this</span>;</span><br><span class="line">            b.<span class="built_in">insert</span>(b.<span class="built_in">begin</span>(), k, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> b;</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;<span class="built_in">size</span>() &lt;= -k) {</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Poly</span>();</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Poly</span>(<span class="keyword">this</span>-&gt;<span class="built_in">begin</span>() + (-k), <span class="keyword">this</span>-&gt;<span class="built_in">end</span>());</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> Poly <span class="title">trunc</span><span class="params">(<span class="type">int</span> k)</span> <span class="type">const</span> </span>{</span><br><span class="line">        Poly f = *<span class="keyword">this</span>;</span><br><span class="line">        f.<span class="built_in">resize</span>(k);</span><br><span class="line">        <span class="keyword">return</span> f;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">friend</span> Poly <span class="keyword">operator</span>+(<span class="type">const</span> Poly &amp;a, <span class="type">const</span> Poly &amp;b) {</span><br><span class="line">        <span class="function">Poly <span class="title">res</span><span class="params">(std::max(a.size(), b.size()))</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++) {</span><br><span class="line">            res[i] += a[i];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; b.<span class="built_in">size</span>(); i++) {</span><br><span class="line">            res[i] += b[i];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">friend</span> Poly <span class="keyword">operator</span>-(<span class="type">const</span> Poly &amp;a, <span class="type">const</span> Poly &amp;b) {</span><br><span class="line">        <span class="function">Poly <span class="title">res</span><span class="params">(std::max(a.size(), b.size()))</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++) {</span><br><span class="line">            res[i] += a[i];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; b.<span class="built_in">size</span>(); i++) {</span><br><span class="line">            res[i] -= b[i];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">friend</span> Poly <span class="keyword">operator</span>-(<span class="type">const</span> Poly &amp;a) {</span><br><span class="line">        <span class="function">std::vector&lt;Value&gt; <span class="title">res</span><span class="params">(a.size())</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">int</span>(res.<span class="built_in">size</span>()); i++) {</span><br><span class="line">            res[i] = -a[i];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Poly</span>(res);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">friend</span> Poly <span class="keyword">operator</span>*(Poly a, Poly b) {</span><br><span class="line">        <span class="keyword">if</span> (a.<span class="built_in">size</span>() == <span class="number">0</span> || b.<span class="built_in">size</span>() == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Poly</span>();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (a.<span class="built_in">size</span>() &lt; b.<span class="built_in">size</span>()) {</span><br><span class="line">            std::<span class="built_in">swap</span>(a, b);</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> n = <span class="number">1</span>, tot = a.<span class="built_in">size</span>() + b.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (n &lt; tot) {</span><br><span class="line">            n *= <span class="number">2</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (((P - <span class="number">1</span>) &amp; (n - <span class="number">1</span>)) != <span class="number">0</span> || b.<span class="built_in">size</span>() &lt; <span class="number">128</span>) {</span><br><span class="line">            <span class="function">Poly <span class="title">c</span><span class="params">(a.size() + b.size() - <span class="number">1</span>)</span></span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++) {</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; b.<span class="built_in">size</span>(); j++) {</span><br><span class="line">                    c[i + j] += a[i] * b[j];</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        }</span><br><span class="line">        a.<span class="built_in">resize</span>(n);</span><br><span class="line">        b.<span class="built_in">resize</span>(n);</span><br><span class="line">        <span class="built_in">dft</span>(a);</span><br><span class="line">        <span class="built_in">dft</span>(b);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) {</span><br><span class="line">            a[i] *= b[i];</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">idft</span>(a);</span><br><span class="line">        a.<span class="built_in">resize</span>(tot);</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">friend</span> Poly <span class="keyword">operator</span>*(Value a, Poly b) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">int</span>(b.<span class="built_in">size</span>()); i++) {</span><br><span class="line">            b[i] *= a;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">friend</span> Poly <span class="keyword">operator</span>*(Poly a, Value b) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">int</span>(a.<span class="built_in">size</span>()); i++) {</span><br><span class="line">            a[i] *= b;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">friend</span> Poly <span class="keyword">operator</span>/(Poly a, Value b) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">int</span>(a.<span class="built_in">size</span>()); i++) {</span><br><span class="line">            a[i] /= b;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">constexpr</span> Poly &amp;<span class="keyword">operator</span>+=(Poly b) {</span><br><span class="line">        <span class="built_in">return</span> (*<span class="keyword">this</span>) = (*<span class="keyword">this</span>) + b;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">constexpr</span> Poly &amp;<span class="keyword">operator</span>-=(Poly b) {</span><br><span class="line">        <span class="built_in">return</span> (*<span class="keyword">this</span>) = (*<span class="keyword">this</span>) - b;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">constexpr</span> Poly &amp;<span class="keyword">operator</span>*=(Poly b) {</span><br><span class="line">        <span class="built_in">return</span> (*<span class="keyword">this</span>) = (*<span class="keyword">this</span>) * b;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">constexpr</span> Poly &amp;<span class="keyword">operator</span>*=(Value b) {</span><br><span class="line">        <span class="built_in">return</span> (*<span class="keyword">this</span>) = (*<span class="keyword">this</span>) * b;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">constexpr</span> Poly &amp;<span class="keyword">operator</span>/=(Value b) {</span><br><span class="line">        <span class="built_in">return</span> (*<span class="keyword">this</span>) = (*<span class="keyword">this</span>) / b;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> Poly <span class="title">deriv</span><span class="params">()</span> <span class="type">const</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;<span class="built_in">empty</span>()) {</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Poly</span>();</span><br><span class="line">        }</span><br><span class="line">        <span class="function">Poly <span class="title">res</span><span class="params">(<span class="keyword">this</span>-&gt;size() - <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;<span class="built_in">size</span>() - <span class="number">1</span>; ++i) {</span><br><span class="line">            res[i] = (i + <span class="number">1</span>) * (*<span class="keyword">this</span>)[i + <span class="number">1</span>];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> Poly <span class="title">integr</span><span class="params">()</span> <span class="type">const</span> </span>{</span><br><span class="line">        <span class="function">Poly <span class="title">res</span><span class="params">(<span class="keyword">this</span>-&gt;size() + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;<span class="built_in">size</span>(); ++i) {</span><br><span class="line">            res[i + <span class="number">1</span>] = (*<span class="keyword">this</span>)[i] / (i + <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> Poly <span class="title">inv</span><span class="params">(<span class="type">int</span> m)</span> <span class="type">const</span> </span>{</span><br><span class="line">        Poly x{(*<span class="keyword">this</span>)[<span class="number">0</span>].<span class="built_in">inv</span>()};</span><br><span class="line">        <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (k &lt; m) {</span><br><span class="line">            k *= <span class="number">2</span>;</span><br><span class="line">            x = (x * (Poly{<span class="number">2</span>} - <span class="built_in">trunc</span>(k) * x)).<span class="built_in">trunc</span>(k);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> x.<span class="built_in">trunc</span>(m);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> Poly <span class="title">log</span><span class="params">(<span class="type">int</span> m)</span> <span class="type">const</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">deriv</span>() * <span class="built_in">inv</span>(m)).<span class="built_in">integr</span>().<span class="built_in">trunc</span>(m);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> Poly <span class="title">exp</span><span class="params">(<span class="type">int</span> m)</span> <span class="type">const</span> </span>{</span><br><span class="line">        Poly x{<span class="number">1</span>};</span><br><span class="line">        <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (k &lt; m) {</span><br><span class="line">            k *= <span class="number">2</span>;</span><br><span class="line">            x = (x * (Poly{<span class="number">1</span>} - x.<span class="built_in">log</span>(k) + <span class="built_in">trunc</span>(k))).<span class="built_in">trunc</span>(k);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> x.<span class="built_in">trunc</span>(m);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> Poly <span class="title">pow</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> m)</span> <span class="type">const</span> </span>{</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; <span class="keyword">this</span>-&gt;<span class="built_in">size</span>() &amp;&amp; (*<span class="keyword">this</span>)[i] == <span class="number">0</span>) {</span><br><span class="line">            i++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="keyword">this</span>-&gt;<span class="built_in">size</span>() || <span class="number">1LL</span> * i * k &gt;= m) {</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Poly</span>(m);</span><br><span class="line">        }</span><br><span class="line">        Value v = (*<span class="keyword">this</span>)[i];</span><br><span class="line">        <span class="keyword">auto</span> f = <span class="built_in">shift</span>(-i) * v.<span class="built_in">inv</span>();</span><br><span class="line">        <span class="keyword">return</span> (f.<span class="built_in">log</span>(m - i * k) * k).<span class="built_in">exp</span>(m - i * k).<span class="built_in">shift</span>(i * k) * <span class="built_in">power</span>(v, k);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> Poly <span class="title">sqrt</span><span class="params">(<span class="type">int</span> m)</span> <span class="type">const</span> </span>{</span><br><span class="line">        Poly x{<span class="number">1</span>};</span><br><span class="line">        <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (k &lt; m) {</span><br><span class="line">            k *= <span class="number">2</span>;</span><br><span class="line">            x = (x + (<span class="built_in">trunc</span>(k) * x.<span class="built_in">inv</span>(k)).<span class="built_in">trunc</span>(k)) * CInv&lt;<span class="number">2</span>, P&gt;;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> x.<span class="built_in">trunc</span>(m);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> Poly <span class="title">mulT</span><span class="params">(Poly b)</span> <span class="type">const</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (b.<span class="built_in">size</span>() == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Poly</span>();</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> n = b.<span class="built_in">size</span>();</span><br><span class="line">        std::<span class="built_in">reverse</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> ((*<span class="keyword">this</span>) * b).<span class="built_in">shift</span>(-(n - <span class="number">1</span>));</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> std::vector&lt;Value&gt; <span class="title">eval</span><span class="params">(std::vector&lt;Value&gt; x)</span> <span class="type">const</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;<span class="built_in">size</span>() == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> std::<span class="built_in">vector</span>&lt;Value&gt;(x.<span class="built_in">size</span>(), <span class="number">0</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = std::<span class="built_in">max</span>(x.<span class="built_in">size</span>(), <span class="keyword">this</span>-&gt;<span class="built_in">size</span>());</span><br><span class="line">        <span class="function">std::vector&lt;Poly&gt; <span class="title">q</span><span class="params">(<span class="number">4</span> * n)</span></span>;</span><br><span class="line">        <span class="function">std::vector&lt;Value&gt; <span class="title">ans</span><span class="params">(x.size())</span></span>;</span><br><span class="line">        x.<span class="built_in">resize</span>(n);</span><br><span class="line">        std::function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)&gt; build = [&amp;](<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r) {</span><br><span class="line">            <span class="keyword">if</span> (r - l == <span class="number">1</span>) {</span><br><span class="line">                q[p] = Poly{<span class="number">1</span>, -x[l]};</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">                <span class="built_in">build</span>(<span class="number">2</span> * p, l, m);</span><br><span class="line">                <span class="built_in">build</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r);</span><br><span class="line">                q[p] = q[<span class="number">2</span> * p] * q[<span class="number">2</span> * p + <span class="number">1</span>];</span><br><span class="line">            }</span><br><span class="line">        };</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">0</span>, n);</span><br><span class="line">        std::function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>, <span class="type">const</span> Poly &amp;)&gt; work = [&amp;](<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">const</span> Poly &amp;num) {</span><br><span class="line">            <span class="keyword">if</span> (r - l == <span class="number">1</span>) {</span><br><span class="line">                <span class="keyword">if</span> (l &lt; <span class="built_in">int</span>(ans.<span class="built_in">size</span>())) {</span><br><span class="line">                    ans[l] = num[<span class="number">0</span>];</span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">                <span class="built_in">work</span>(<span class="number">2</span> * p, l, m, num.<span class="built_in">mulT</span>(q[<span class="number">2</span> * p + <span class="number">1</span>]).<span class="built_in">resize</span>(m - l));</span><br><span class="line">                <span class="built_in">work</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, num.<span class="built_in">mulT</span>(q[<span class="number">2</span> * p]).<span class="built_in">resize</span>(r - m));</span><br><span class="line">            }</span><br><span class="line">        };</span><br><span class="line">        <span class="built_in">work</span>(<span class="number">1</span>, <span class="number">0</span>, n, <span class="built_in">mulT</span>(q[<span class="number">1</span>].<span class="built_in">inv</span>(n)));</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="type">int</span> P </span>= <span class="number">998244353</span>&gt;</span><br><span class="line"><span class="function">Poly&lt;P&gt; <span class="title">berlekampMassey</span><span class="params">(<span class="type">const</span> Poly&lt;P&gt; &amp;s)</span> </span>{</span><br><span class="line">    Poly&lt;P&gt; c;</span><br><span class="line">    Poly&lt;P&gt; oldC;</span><br><span class="line">    <span class="type">int</span> f = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) {</span><br><span class="line">        <span class="keyword">auto</span> delta = s[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= c.<span class="built_in">size</span>(); j++) {</span><br><span class="line">            delta -= c[j - <span class="number">1</span>] * s[i - j];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (delta == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (f == <span class="number">-1</span>) {</span><br><span class="line">            c.<span class="built_in">resize</span>(i + <span class="number">1</span>);</span><br><span class="line">            f = i;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">auto</span> d = oldC;</span><br><span class="line">            d *= <span class="number">-1</span>;</span><br><span class="line">            d.<span class="built_in">insert</span>(d.<span class="built_in">begin</span>(), <span class="number">1</span>);</span><br><span class="line">            MInt&lt;P&gt; df1 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= d.<span class="built_in">size</span>(); j++) {</span><br><span class="line">                df1 += d[j - <span class="number">1</span>] * s[f + <span class="number">1</span> - j];</span><br><span class="line">            }</span><br><span class="line">            <span class="built_in">assert</span>(df1 != <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">auto</span> coef = delta / df1;</span><br><span class="line">            d *= coef;</span><br><span class="line">            <span class="function">Poly&lt;P&gt; <span class="title">zeros</span><span class="params">(i - f - <span class="number">1</span>)</span></span>;</span><br><span class="line">            zeros.<span class="built_in">insert</span>(zeros.<span class="built_in">end</span>(), d.<span class="built_in">begin</span>(), d.<span class="built_in">end</span>());</span><br><span class="line">            d = zeros;</span><br><span class="line">            <span class="keyword">auto</span> temp = c;</span><br><span class="line">            c += d;</span><br><span class="line">            <span class="keyword">if</span> (i - temp.<span class="built_in">size</span>() &gt; f - oldC.<span class="built_in">size</span>()) {</span><br><span class="line">                oldC = temp;</span><br><span class="line">                f = i;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    c *= <span class="number">-1</span>;</span><br><span class="line">    c.<span class="built_in">insert</span>(c.<span class="built_in">begin</span>(), <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="type">int</span> P </span>= <span class="number">998244353</span>&gt;</span><br><span class="line"><span class="function">MInt&lt;P&gt; <span class="title">linearRecurrence</span><span class="params">(Poly&lt;P&gt; p, Poly&lt;P&gt; q, i64 n)</span> </span>{</span><br><span class="line">    <span class="type">int</span> m = q.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">auto</span> newq = q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i += <span class="number">2</span>) {</span><br><span class="line">            newq[i] *= <span class="number">-1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">auto</span> newp = p * newq;</span><br><span class="line">        newq = q * newq;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) {</span><br><span class="line">            p[i] = newp[i * <span class="number">2</span> + n % <span class="number">2</span>];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; i++) {</span><br><span class="line">            q[i] = newq[i * <span class="number">2</span>];</span><br><span class="line">        }</span><br><span class="line">        n /= <span class="number">2</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> p[<span class="number">0</span>] / q[<span class="number">0</span>];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Comb</span> {</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;Z&gt; _fac;</span><br><span class="line">    std::vector&lt;Z&gt; _invfac;</span><br><span class="line">    std::vector&lt;Z&gt; _inv;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Comb</span>() : n{<span class="number">0</span>}, _fac{<span class="number">1</span>}, _invfac{<span class="number">1</span>}, _inv{<span class="number">0</span>} {}</span><br><span class="line">    <span class="built_in">Comb</span>(<span class="type">int</span> n) : <span class="built_in">Comb</span>() {</span><br><span class="line">        <span class="built_in">init</span>(n);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> m)</span> </span>{</span><br><span class="line">        m = std::<span class="built_in">min</span>(m, Z::<span class="built_in">getMod</span>() - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (m &lt;= n) <span class="keyword">return</span>;</span><br><span class="line">        _fac.<span class="built_in">resize</span>(m + <span class="number">1</span>);</span><br><span class="line">        _invfac.<span class="built_in">resize</span>(m + <span class="number">1</span>);</span><br><span class="line">        _inv.<span class="built_in">resize</span>(m + <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n + <span class="number">1</span>; i &lt;= m; i++) {</span><br><span class="line">            _fac[i] = _fac[i - <span class="number">1</span>] * i;</span><br><span class="line">        }</span><br><span class="line">        _invfac[m] = _fac[m].<span class="built_in">inv</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = m; i &gt; n; i--) {</span><br><span class="line">            _invfac[i - <span class="number">1</span>] = _invfac[i] * i;</span><br><span class="line">            _inv[i] = _invfac[i] * _fac[i - <span class="number">1</span>];</span><br><span class="line">        }</span><br><span class="line">        n = m;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function">Z <span class="title">fac</span><span class="params">(<span class="type">int</span> m)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (m &gt; n) <span class="built_in">init</span>(<span class="number">2</span> * m);</span><br><span class="line">        <span class="keyword">return</span> _fac[m];</span><br><span class="line">    }</span><br><span class="line">    <span class="function">Z <span class="title">invfac</span><span class="params">(<span class="type">int</span> m)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (m &gt; n) <span class="built_in">init</span>(<span class="number">2</span> * m);</span><br><span class="line">        <span class="keyword">return</span> _invfac[m];</span><br><span class="line">    }</span><br><span class="line">    <span class="function">Z <span class="title">inv</span><span class="params">(<span class="type">int</span> m)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (m &gt; n) <span class="built_in">init</span>(<span class="number">2</span> * m);</span><br><span class="line">        <span class="keyword">return</span> _inv[m];</span><br><span class="line">    }</span><br><span class="line">    <span class="function">Z <span class="title">binom</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (n &lt; m || m &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">fac</span>(n) * <span class="built_in">invfac</span>(m) * <span class="built_in">invfac</span>(n - m);</span><br><span class="line">    }</span><br><span class="line">} comb;</span><br><span class="line"></span><br><span class="line"><span class="function">Poly&lt;P&gt; <span class="title">get</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Poly</span>(n + <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (m % <span class="number">2</span> == <span class="number">1</span>) {</span><br><span class="line">        <span class="keyword">auto</span> f = <span class="built_in">get</span>(n, m - <span class="number">1</span>);</span><br><span class="line">        Z p = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) {</span><br><span class="line">            f[n - i] += comb.<span class="built_in">binom</span>(n, i) * p;</span><br><span class="line">            p *= m;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> f;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">auto</span> f = <span class="built_in">get</span>(n, m / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">auto</span> fm = f;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) {</span><br><span class="line">        fm[i] *= comb.<span class="built_in">fac</span>(i);</span><br><span class="line">    }</span><br><span class="line">    <span class="function">Poly <span class="title">pw</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    pw[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) {</span><br><span class="line">        pw[i] = pw[i - <span class="number">1</span>] * (m / <span class="number">2</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) {</span><br><span class="line">        pw[i] *= comb.<span class="built_in">invfac</span>(i);</span><br><span class="line">    }</span><br><span class="line">    fm = fm.<span class="built_in">mulT</span>(pw);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) {</span><br><span class="line">        fm[i] *= comb.<span class="built_in">invfac</span>(i);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> f + fm;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="四、数据结构"><a href="#四、数据结构" class="headerlink" title="四、数据结构"></a>四、数据结构</h1><h2 id="01A-树状数组（Fenwick-旧版）"><a href="#01A-树状数组（Fenwick-旧版）" class="headerlink" title="01A - 树状数组（Fenwick 旧版）"></a>01A - 树状数组（Fenwick 旧版）</h2><p><a href="https://ac.nowcoder.com/acm/contest/view-submission?submissionId=63382128">2023-08-11</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Fenwick</span> {</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;T&gt; a;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Fenwick</span>(<span class="type">int</span> n = <span class="number">0</span>) {</span><br><span class="line">        <span class="built_in">init</span>(n);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        a.<span class="built_in">assign</span>(n, <span class="built_in">T</span>());</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, T v)</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = x + <span class="number">1</span>; i &lt;= n; i += i &amp; -i) {</span><br><span class="line">            a[i - <span class="number">1</span>] += v;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function">T <span class="title">sum</span><span class="params">(<span class="type">int</span> x)</span> </span>{</span><br><span class="line">        <span class="keyword">auto</span> ans = <span class="built_in">T</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = x; i &gt; <span class="number">0</span>; i -= i &amp; -i) {</span><br><span class="line">            ans += a[i - <span class="number">1</span>];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function">T <span class="title">rangeSum</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>(r) - <span class="built_in">sum</span>(l);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">kth</span><span class="params">(T k)</span> </span>{</span><br><span class="line">        <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span> &lt;&lt; std::__lg(n); i; i /= <span class="number">2</span>) {</span><br><span class="line">            <span class="keyword">if</span> (x + i &lt;= n &amp;&amp; k &gt;= a[x + i - <span class="number">1</span>]) {</span><br><span class="line">                x += i;</span><br><span class="line">                k -= a[x - <span class="number">1</span>];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure>
<h2 id="01B-树状数组（Fenwick-新版）"><a href="#01B-树状数组（Fenwick-新版）" class="headerlink" title="01B - 树状数组（Fenwick 新版）"></a>01B - 树状数组（Fenwick 新版）</h2><p><a href="https://codeforces.com/contest/1915/submission/239262801">2023-12-28</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Fenwick</span> {</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;T&gt; a;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Fenwick</span>(<span class="type">int</span> n_ = <span class="number">0</span>) {</span><br><span class="line">        <span class="built_in">init</span>(n_);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n_)</span> </span>{</span><br><span class="line">        n = n_;</span><br><span class="line">        a.<span class="built_in">assign</span>(n, T{});</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">const</span> T &amp;v)</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = x + <span class="number">1</span>; i &lt;= n; i += i &amp; -i) {</span><br><span class="line">            a[i - <span class="number">1</span>] = a[i - <span class="number">1</span>] + v;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function">T <span class="title">sum</span><span class="params">(<span class="type">int</span> x)</span> </span>{</span><br><span class="line">        T ans{};</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = x; i &gt; <span class="number">0</span>; i -= i &amp; -i) {</span><br><span class="line">            ans = ans + a[i - <span class="number">1</span>];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function">T <span class="title">rangeSum</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>(r) - <span class="built_in">sum</span>(l);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">select</span><span class="params">(<span class="type">const</span> T &amp;k)</span> </span>{</span><br><span class="line">        <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">        T cur{};</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span> &lt;&lt; std::__lg(n); i; i /= <span class="number">2</span>) {</span><br><span class="line">            <span class="keyword">if</span> (x + i &lt;= n &amp;&amp; cur + a[x + i - <span class="number">1</span>] &lt;= k) {</span><br><span class="line">                x += i;</span><br><span class="line">                cur = cur + a[x - <span class="number">1</span>];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure>
<h2 id="02-并查集（DSU）"><a href="#02-并查集（DSU）" class="headerlink" title="02 - 并查集（DSU）"></a>02 - 并查集（DSU）</h2><p><a href="https://ac.nowcoder.com/acm/contest/view-submission?submissionId=63239142">2023-08-04</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">DSU</span> {</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; f, siz;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">DSU</span>() {}</span><br><span class="line">    <span class="built_in">DSU</span>(<span class="type">int</span> n) {</span><br><span class="line">        <span class="built_in">init</span>(n);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>{</span><br><span class="line">        f.<span class="built_in">resize</span>(n);</span><br><span class="line">        std::<span class="built_in">iota</span>(f.<span class="built_in">begin</span>(), f.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">        siz.<span class="built_in">assign</span>(n, <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>{</span><br><span class="line">        <span class="keyword">while</span> (x != f[x]) {</span><br><span class="line">            x = f[x] = f[f[x]];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">same</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">find</span>(x) == <span class="built_in">find</span>(y);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>{</span><br><span class="line">        x = <span class="built_in">find</span>(x);</span><br><span class="line">        y = <span class="built_in">find</span>(y);</span><br><span class="line">        <span class="keyword">if</span> (x == y) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">        siz[x] += siz[y];</span><br><span class="line">        f[y] = x;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">(<span class="type">int</span> x)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> siz[<span class="built_in">find</span>(x)];</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure>
<h2 id="03A-线段树（SegmentTree-基础区间加乘）"><a href="#03A-线段树（SegmentTree-基础区间加乘）" class="headerlink" title="03A - 线段树（SegmentTree 基础区间加乘）"></a>03A - 线段树（SegmentTree 基础区间加乘）</h2><p><a href="https://cf.dianhsu.com/gym/104417/submission/223800089">2023-10-18</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">SegmentTree</span> {</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; tag, sum;</span><br><span class="line">    <span class="built_in">SegmentTree</span>(<span class="type">int</span> n_) : <span class="built_in">n</span>(n_), <span class="built_in">tag</span>(<span class="number">4</span> * n, <span class="number">1</span>), <span class="built_in">sum</span>(<span class="number">4</span> * n) {}</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pull</span><span class="params">(<span class="type">int</span> p)</span> </span>{</span><br><span class="line">        sum[p] = (sum[<span class="number">2</span> * p] + sum[<span class="number">2</span> * p + <span class="number">1</span>]) % P;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">mul</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> v)</span> </span>{</span><br><span class="line">        tag[p] = <span class="number">1LL</span> * tag[p] * v % P;</span><br><span class="line">        sum[p] = <span class="number">1LL</span> * sum[p] * v % P;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> p)</span> </span>{</span><br><span class="line">        <span class="built_in">mul</span>(<span class="number">2</span> * p, tag[p]);</span><br><span class="line">        <span class="built_in">mul</span>(<span class="number">2</span> * p + <span class="number">1</span>, tag[p]);</span><br><span class="line">        tag[p] = <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= y || r &lt;= x) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y) {</span><br><span class="line">            <span class="keyword">return</span> sum[p];</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">push</span>(p);</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">query</span>(<span class="number">2</span> * p, l, m, x, y) + <span class="built_in">query</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y)) % P;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(<span class="number">1</span>, <span class="number">0</span>, n, x, y);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rangeMul</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> v)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= y || r &lt;= x) {</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y) {</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">mul</span>(p, v);</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">push</span>(p);</span><br><span class="line">        <span class="built_in">rangeMul</span>(<span class="number">2</span> * p, l, m, x, y, v);</span><br><span class="line">        <span class="built_in">rangeMul</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y, v);</span><br><span class="line">        <span class="built_in">pull</span>(p);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rangeMul</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> v)</span> </span>{</span><br><span class="line">        <span class="built_in">rangeMul</span>(<span class="number">1</span>, <span class="number">0</span>, n, x, y, v);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> v)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (r - l == <span class="number">1</span>) {</span><br><span class="line">            sum[p] = (sum[p] + v) % P;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">push</span>(p);</span><br><span class="line">        <span class="keyword">if</span> (x &lt; m) {</span><br><span class="line">            <span class="built_in">add</span>(<span class="number">2</span> * p, l, m, x, v);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="built_in">add</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, v);</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">pull</span>(p);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> v)</span> </span>{</span><br><span class="line">        <span class="built_in">add</span>(<span class="number">1</span>, <span class="number">0</span>, n, x, v);</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure>
<h2 id="03B-线段树（SegmentTree-Info-查找前驱后继）"><a href="#03B-线段树（SegmentTree-Info-查找前驱后继）" class="headerlink" title="03B - 线段树（SegmentTree+Info 查找前驱后继）"></a>03B - 线段树（SegmentTree+Info 查找前驱后继）</h2><p><a href="https://ac.nowcoder.com/acm/contest/view-submission?submissionId=63382128">2023-08-11</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">Info</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SegmentTree</span> {</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;Info&gt; info;</span><br><span class="line">    <span class="built_in">SegmentTree</span>() : <span class="built_in">n</span>(<span class="number">0</span>) {}</span><br><span class="line">    <span class="built_in">SegmentTree</span>(<span class="type">int</span> n_, Info v_ = <span class="built_in">Info</span>()) {</span><br><span class="line">        <span class="built_in">init</span>(n_, v_);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function">    <span class="title">SegmentTree</span><span class="params">(std::vector&lt;T&gt; init_)</span> </span>{</span><br><span class="line">        <span class="built_in">init</span>(init_);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n_, Info v_ = Info())</span> </span>{</span><br><span class="line">        <span class="built_in">init</span>(std::<span class="built_in">vector</span>(n_, v_));</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function">    <span class="type">void</span> <span class="title">init</span><span class="params">(std::vector&lt;T&gt; init_)</span> </span>{</span><br><span class="line">        n = init_.<span class="built_in">size</span>();</span><br><span class="line">        info.<span class="built_in">assign</span>(<span class="number">4</span> &lt;&lt; std::__lg(n), <span class="built_in">Info</span>());</span><br><span class="line">        std::function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)&gt; build = [&amp;](<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r) {</span><br><span class="line">            <span class="keyword">if</span> (r - l == <span class="number">1</span>) {</span><br><span class="line">                info[p] = init_[l];</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">            <span class="built_in">build</span>(<span class="number">2</span> * p, l, m);</span><br><span class="line">            <span class="built_in">build</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r);</span><br><span class="line">            <span class="built_in">pull</span>(p);</span><br><span class="line">        };</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">0</span>, n);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pull</span><span class="params">(<span class="type">int</span> p)</span> </span>{</span><br><span class="line">        info[p] = info[<span class="number">2</span> * p] + info[<span class="number">2</span> * p + <span class="number">1</span>];</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">const</span> Info &amp;v)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (r - l == <span class="number">1</span>) {</span><br><span class="line">            info[p] = v;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; m) {</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">2</span> * p, l, m, x, v);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, v);</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">pull</span>(p);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> p, <span class="type">const</span> Info &amp;v)</span> </span>{</span><br><span class="line">        <span class="built_in">modify</span>(<span class="number">1</span>, <span class="number">0</span>, n, p, v);</span><br><span class="line">    }</span><br><span class="line">    <span class="function">Info <span class="title">rangeQuery</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= y || r &lt;= x) {</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Info</span>();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y) {</span><br><span class="line">            <span class="keyword">return</span> info[p];</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rangeQuery</span>(<span class="number">2</span> * p, l, m, x, y) + <span class="built_in">rangeQuery</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y);</span><br><span class="line">    }</span><br><span class="line">    <span class="function">Info <span class="title">rangeQuery</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rangeQuery</span>(<span class="number">1</span>, <span class="number">0</span>, n, l, r);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> F&gt;</span></span><br><span class="line"><span class="function">    <span class="type">int</span> <span class="title">findFirst</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y, F pred)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= y || r &lt;= x || !<span class="built_in">pred</span>(info[p])) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (r - l == <span class="number">1</span>) {</span><br><span class="line">            <span class="keyword">return</span> l;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> res = <span class="built_in">findFirst</span>(<span class="number">2</span> * p, l, m, x, y, pred);</span><br><span class="line">        <span class="keyword">if</span> (res == <span class="number">-1</span>) {</span><br><span class="line">            res = <span class="built_in">findFirst</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y, pred);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> F&gt;</span></span><br><span class="line"><span class="function">    <span class="type">int</span> <span class="title">findFirst</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, F pred)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">findFirst</span>(<span class="number">1</span>, <span class="number">0</span>, n, l, r, pred);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> F&gt;</span></span><br><span class="line"><span class="function">    <span class="type">int</span> <span class="title">findLast</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y, F pred)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= y || r &lt;= x || !<span class="built_in">pred</span>(info[p])) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (r - l == <span class="number">1</span>) {</span><br><span class="line">            <span class="keyword">return</span> l;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> res = <span class="built_in">findLast</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y, pred);</span><br><span class="line">        <span class="keyword">if</span> (res == <span class="number">-1</span>) {</span><br><span class="line">            res = <span class="built_in">findLast</span>(<span class="number">2</span> * p, l, m, x, y, pred);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> F&gt;</span></span><br><span class="line"><span class="function">    <span class="type">int</span> <span class="title">findLast</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, F pred)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">findLast</span>(<span class="number">1</span>, <span class="number">0</span>, n, l, r, pred);</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Info</span> {</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    i64 sum = <span class="number">0</span>;</span><br><span class="line">    i64 ans = <span class="number">0</span>;</span><br><span class="line">};</span><br><span class="line">Info <span class="keyword">operator</span>+(Info a, Info b) {</span><br><span class="line">    Info c;</span><br><span class="line">    c.cnt = a.cnt + b.cnt;</span><br><span class="line">    c.sum = a.sum + b.sum;</span><br><span class="line">    c.ans = a.ans + b.ans + a.cnt * b.sum - a.sum * b.cnt;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="03C-线段树（SegmentTree-Info-Merge-区间合并）"><a href="#03C-线段树（SegmentTree-Info-Merge-区间合并）" class="headerlink" title="03C - 线段树（SegmentTree+Info+Merge 区间合并）"></a>03C - 线段树（SegmentTree+Info+Merge 区间合并）</h2><p><a href="https://codeforces.com/contest/1672/submission/154766851">2022-04-23</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">Info</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SegmentTree</span> {</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;Info&gt; info;</span><br><span class="line">    <span class="built_in">SegmentTree</span>() : <span class="built_in">n</span>(<span class="number">0</span>) {}</span><br><span class="line">    <span class="built_in">SegmentTree</span>(<span class="type">int</span> n_, Info v_ = <span class="built_in">Info</span>()) {</span><br><span class="line">        <span class="built_in">init</span>(n_, v_);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function">    <span class="title">SegmentTree</span><span class="params">(std::vector&lt;T&gt; init_)</span> </span>{</span><br><span class="line">        <span class="built_in">init</span>(init_);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n_, Info v_ = Info())</span> </span>{</span><br><span class="line">        <span class="built_in">init</span>(std::<span class="built_in">vector</span>(n_, v_));</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function">    <span class="type">void</span> <span class="title">init</span><span class="params">(std::vector&lt;T&gt; init_)</span> </span>{</span><br><span class="line">        n = init_.<span class="built_in">size</span>();</span><br><span class="line">        info.<span class="built_in">assign</span>(<span class="number">4</span> &lt;&lt; std::__lg(n), <span class="built_in">Info</span>());</span><br><span class="line">        std::function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)&gt; build = [&amp;](<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r) {</span><br><span class="line">            <span class="keyword">if</span> (r - l == <span class="number">1</span>) {</span><br><span class="line">                info[p] = init_[l];</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">            <span class="built_in">build</span>(<span class="number">2</span> * p, l, m);</span><br><span class="line">            <span class="built_in">build</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r);</span><br><span class="line">            <span class="built_in">pull</span>(p);</span><br><span class="line">        };</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">0</span>, n);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pull</span><span class="params">(<span class="type">int</span> p)</span> </span>{</span><br><span class="line">        info[p] = info[<span class="number">2</span> * p] + info[<span class="number">2</span> * p + <span class="number">1</span>];</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">const</span> Info &amp;v)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (r - l == <span class="number">1</span>) {</span><br><span class="line">            info[p] = v;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; m) {</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">2</span> * p, l, m, x, v);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, v);</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">pull</span>(p);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> p, <span class="type">const</span> Info &amp;v)</span> </span>{</span><br><span class="line">        <span class="built_in">modify</span>(<span class="number">1</span>, <span class="number">0</span>, n, p, v);</span><br><span class="line">    }</span><br><span class="line">    <span class="function">Info <span class="title">rangeQuery</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= y || r &lt;= x) {</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Info</span>();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y) {</span><br><span class="line">            <span class="keyword">return</span> info[p];</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rangeQuery</span>(<span class="number">2</span> * p, l, m, x, y) + <span class="built_in">rangeQuery</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y);</span><br><span class="line">    }</span><br><span class="line">    <span class="function">Info <span class="title">rangeQuery</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rangeQuery</span>(<span class="number">1</span>, <span class="number">0</span>, n, l, r);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> F&gt;</span></span><br><span class="line"><span class="function">    <span class="type">int</span> <span class="title">findFirst</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y, F pred)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= y || r &lt;= x || !<span class="built_in">pred</span>(info[p])) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (r - l == <span class="number">1</span>) {</span><br><span class="line">            <span class="keyword">return</span> l;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> res = <span class="built_in">findFirst</span>(<span class="number">2</span> * p, l, m, x, y, pred);</span><br><span class="line">        <span class="keyword">if</span> (res == <span class="number">-1</span>) {</span><br><span class="line">            res = <span class="built_in">findFirst</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y, pred);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> F&gt;</span></span><br><span class="line"><span class="function">    <span class="type">int</span> <span class="title">findFirst</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, F pred)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">findFirst</span>(<span class="number">1</span>, <span class="number">0</span>, n, l, r, pred);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> F&gt;</span></span><br><span class="line"><span class="function">    <span class="type">int</span> <span class="title">findLast</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y, F pred)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= y || r &lt;= x || !<span class="built_in">pred</span>(info[p])) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (r - l == <span class="number">1</span>) {</span><br><span class="line">            <span class="keyword">return</span> l;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> res = <span class="built_in">findLast</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y, pred);</span><br><span class="line">        <span class="keyword">if</span> (res == <span class="number">-1</span>) {</span><br><span class="line">            res = <span class="built_in">findLast</span>(<span class="number">2</span> * p, l, m, x, y, pred);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> F&gt;</span></span><br><span class="line"><span class="function">    <span class="type">int</span> <span class="title">findLast</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, F pred)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">findLast</span>(<span class="number">1</span>, <span class="number">0</span>, n, l, r, pred);</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Info</span> {</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">Info <span class="keyword">operator</span>+(Info a, Info b) {</span><br><span class="line">    <span class="keyword">if</span> (a.x == b.x) {</span><br><span class="line">        <span class="keyword">return</span> {a.x, a.cnt + b.cnt};</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (a.cnt &gt; b.cnt) {</span><br><span class="line">        <span class="keyword">return</span> {a.x, a.cnt - b.cnt};</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> {b.x, b.cnt - a.cnt};</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="04A-懒标记线段树（LazySegmentTree-基础区间修改）"><a href="#04A-懒标记线段树（LazySegmentTree-基础区间修改）" class="headerlink" title="04A - 懒标记线段树（LazySegmentTree 基础区间修改）"></a>04A - 懒标记线段树（LazySegmentTree 基础区间修改）</h2><p><a href="https://ac.nowcoder.com/acm/contest/view-submission?submissionId=62804432">2023-07-17</a></p>
<p>长度过长，点击查看</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">Info</span>, <span class="keyword">class</span> <span class="title class_">Tag</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LazySegmentTree</span> {</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;Info&gt; info;</span><br><span class="line">    std::vector&lt;Tag&gt; tag;</span><br><span class="line">    <span class="built_in">LazySegmentTree</span>(<span class="type">int</span> n) : <span class="built_in">n</span>(n), <span class="built_in">info</span>(<span class="number">4</span> &lt;&lt; std::__lg(n)), <span class="built_in">tag</span>(<span class="number">4</span> &lt;&lt; std::__lg(n)) {}</span><br><span class="line">    <span class="built_in">LazySegmentTree</span>(std::vector&lt;Info&gt; init) : <span class="built_in">LazySegmentTree</span>(init.<span class="built_in">size</span>()) {</span><br><span class="line">        std::function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)&gt; build = [&amp;](<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r) {</span><br><span class="line">            <span class="keyword">if</span> (r - l == <span class="number">1</span>) {</span><br><span class="line">                info[p] = init[l];</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">            <span class="built_in">build</span>(<span class="number">2</span> * p, l, m);</span><br><span class="line">            <span class="built_in">build</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r);</span><br><span class="line">            <span class="built_in">pull</span>(p);</span><br><span class="line">        };</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">0</span>, n);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pull</span><span class="params">(<span class="type">int</span> p)</span> </span>{</span><br><span class="line">        info[p] = info[<span class="number">2</span> * p] + info[<span class="number">2</span> * p + <span class="number">1</span>];</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">apply</span><span class="params">(<span class="type">int</span> p, <span class="type">const</span> Tag &amp;v)</span> </span>{</span><br><span class="line">        info[p].<span class="built_in">apply</span>(v);</span><br><span class="line">        tag[p].<span class="built_in">apply</span>(v);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> p)</span> </span>{</span><br><span class="line">        <span class="built_in">apply</span>(<span class="number">2</span> * p, tag[p]);</span><br><span class="line">        <span class="built_in">apply</span>(<span class="number">2</span> * p + <span class="number">1</span>, tag[p]);</span><br><span class="line">        tag[p] = <span class="built_in">Tag</span>();</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">const</span> Info &amp;v)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (r - l == <span class="number">1</span>) {</span><br><span class="line">            info[p] = v;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">push</span>(p);</span><br><span class="line">        <span class="keyword">if</span> (x &lt; m) {</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">2</span> * p, l, m, x, v);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, v);</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">pull</span>(p);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> p, <span class="type">const</span> Info &amp;v)</span> </span>{</span><br><span class="line">        <span class="built_in">modify</span>(<span class="number">1</span>, <span class="number">0</span>, n, p, v);</span><br><span class="line">    }</span><br><span class="line">    <span class="function">Info <span class="title">rangeQuery</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= y || r &lt;= x) {</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Info</span>();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y) {</span><br><span class="line">            <span class="keyword">return</span> info[p];</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">push</span>(p);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rangeQuery</span>(<span class="number">2</span> * p, l, m, x, y) + <span class="built_in">rangeQuery</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y);</span><br><span class="line">    }</span><br><span class="line">    <span class="function">Info <span class="title">rangeQuery</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rangeQuery</span>(<span class="number">1</span>, <span class="number">0</span>, n, l, r);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rangeApply</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">const</span> Tag &amp;v)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= y || r &lt;= x) {</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y) {</span><br><span class="line">            <span class="built_in">apply</span>(p, v);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">push</span>(p);</span><br><span class="line">        <span class="built_in">rangeApply</span>(<span class="number">2</span> * p, l, m, x, y, v);</span><br><span class="line">        <span class="built_in">rangeApply</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y, v);</span><br><span class="line">        <span class="built_in">pull</span>(p);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rangeApply</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">const</span> Tag &amp;v)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rangeApply</span>(<span class="number">1</span>, <span class="number">0</span>, n, l, r, v);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">half</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (info[p].act == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> ((info[p].min + <span class="number">1</span>) / <span class="number">2</span> == (info[p].max + <span class="number">1</span>) / <span class="number">2</span>) {</span><br><span class="line">            <span class="built_in">apply</span>(p, {-(info[p].min + <span class="number">1</span>) / <span class="number">2</span>});</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">push</span>(p);</span><br><span class="line">        <span class="built_in">half</span>(<span class="number">2</span> * p, l, m);</span><br><span class="line">        <span class="built_in">half</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r);</span><br><span class="line">        <span class="built_in">pull</span>(p);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">half</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="built_in">half</span>(<span class="number">1</span>, <span class="number">0</span>, n);</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> i64 inf = <span class="number">1E18</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Tag</span> {</span><br><span class="line">    i64 add = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">apply</span><span class="params">(Tag t)</span> </span>{</span><br><span class="line">        add += t.add;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Info</span> {</span><br><span class="line">    i64 min = inf;</span><br><span class="line">    i64 max = -inf;</span><br><span class="line">    i64 sum = <span class="number">0</span>;</span><br><span class="line">    i64 act = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">apply</span><span class="params">(Tag t)</span> </span>{</span><br><span class="line">        min += t.add;</span><br><span class="line">        max += t.add;</span><br><span class="line">        sum += act * t.add;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">Info <span class="keyword">operator</span>+(Info a, Info b) {</span><br><span class="line">    Info c;</span><br><span class="line">    c.min = std::<span class="built_in">min</span>(a.min, b.min);</span><br><span class="line">    c.max = std::<span class="built_in">max</span>(a.max, b.max);</span><br><span class="line">    c.sum = a.sum + b.sum;</span><br><span class="line">    c.act = a.act + b.act;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="04B-懒标记线段树（LazySegmentTree-查找前驱后继）"><a href="#04B-懒标记线段树（LazySegmentTree-查找前驱后继）" class="headerlink" title="04B - 懒标记线段树（LazySegmentTree 查找前驱后继）"></a>04B - 懒标记线段树（LazySegmentTree 查找前驱后继）</h2><p><a href="https://ac.nowcoder.com/acm/contest/view-submission?submissionId=62804432">2023-07-17</a></p>
<p>长度过长，点击查看</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">Info</span>, <span class="keyword">class</span> <span class="title class_">Tag</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LazySegmentTree</span> {</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;Info&gt; info;</span><br><span class="line">    std::vector&lt;Tag&gt; tag;</span><br><span class="line">    <span class="built_in">LazySegmentTree</span>() : <span class="built_in">n</span>(<span class="number">0</span>) {}</span><br><span class="line">    <span class="built_in">LazySegmentTree</span>(<span class="type">int</span> n_, Info v_ = <span class="built_in">Info</span>()) {</span><br><span class="line">        <span class="built_in">init</span>(n_, v_);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function">    <span class="title">LazySegmentTree</span><span class="params">(std::vector&lt;T&gt; init_)</span> </span>{</span><br><span class="line">        <span class="built_in">init</span>(init_);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n_, Info v_ = Info())</span> </span>{</span><br><span class="line">        <span class="built_in">init</span>(std::<span class="built_in">vector</span>(n_, v_));</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function">    <span class="type">void</span> <span class="title">init</span><span class="params">(std::vector&lt;T&gt; init_)</span> </span>{</span><br><span class="line">        n = init_.<span class="built_in">size</span>();</span><br><span class="line">        info.<span class="built_in">assign</span>(<span class="number">4</span> &lt;&lt; std::__lg(n), <span class="built_in">Info</span>());</span><br><span class="line">        tag.<span class="built_in">assign</span>(<span class="number">4</span> &lt;&lt; std::__lg(n), <span class="built_in">Tag</span>());</span><br><span class="line">        std::function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)&gt; build = [&amp;](<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r) {</span><br><span class="line">            <span class="keyword">if</span> (r - l == <span class="number">1</span>) {</span><br><span class="line">                info[p] = init_[l];</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">            <span class="built_in">build</span>(<span class="number">2</span> * p, l, m);</span><br><span class="line">            <span class="built_in">build</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r);</span><br><span class="line">            <span class="built_in">pull</span>(p);</span><br><span class="line">        };</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">0</span>, n);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pull</span><span class="params">(<span class="type">int</span> p)</span> </span>{</span><br><span class="line">        info[p] = info[<span class="number">2</span> * p] + info[<span class="number">2</span> * p + <span class="number">1</span>];</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">apply</span><span class="params">(<span class="type">int</span> p, <span class="type">const</span> Tag &amp;v)</span> </span>{</span><br><span class="line">        info[p].<span class="built_in">apply</span>(v);</span><br><span class="line">        tag[p].<span class="built_in">apply</span>(v);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> p)</span> </span>{</span><br><span class="line">        <span class="built_in">apply</span>(<span class="number">2</span> * p, tag[p]);</span><br><span class="line">        <span class="built_in">apply</span>(<span class="number">2</span> * p + <span class="number">1</span>, tag[p]);</span><br><span class="line">        tag[p] = <span class="built_in">Tag</span>();</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">const</span> Info &amp;v)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (r - l == <span class="number">1</span>) {</span><br><span class="line">            info[p] = v;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">push</span>(p);</span><br><span class="line">        <span class="keyword">if</span> (x &lt; m) {</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">2</span> * p, l, m, x, v);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, v);</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">pull</span>(p);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> p, <span class="type">const</span> Info &amp;v)</span> </span>{</span><br><span class="line">        <span class="built_in">modify</span>(<span class="number">1</span>, <span class="number">0</span>, n, p, v);</span><br><span class="line">    }</span><br><span class="line">    <span class="function">Info <span class="title">rangeQuery</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= y || r &lt;= x) {</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Info</span>();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y) {</span><br><span class="line">            <span class="keyword">return</span> info[p];</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">push</span>(p);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rangeQuery</span>(<span class="number">2</span> * p, l, m, x, y) + <span class="built_in">rangeQuery</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y);</span><br><span class="line">    }</span><br><span class="line">    <span class="function">Info <span class="title">rangeQuery</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rangeQuery</span>(<span class="number">1</span>, <span class="number">0</span>, n, l, r);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rangeApply</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">const</span> Tag &amp;v)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= y || r &lt;= x) {</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y) {</span><br><span class="line">            <span class="built_in">apply</span>(p, v);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">push</span>(p);</span><br><span class="line">        <span class="built_in">rangeApply</span>(<span class="number">2</span> * p, l, m, x, y, v);</span><br><span class="line">        <span class="built_in">rangeApply</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y, v);</span><br><span class="line">        <span class="built_in">pull</span>(p);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rangeApply</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">const</span> Tag &amp;v)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rangeApply</span>(<span class="number">1</span>, <span class="number">0</span>, n, l, r, v);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> F&gt;</span></span><br><span class="line"><span class="function">    <span class="type">int</span> <span class="title">findFirst</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y, F pred)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= y || r &lt;= x || !<span class="built_in">pred</span>(info[p])) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (r - l == <span class="number">1</span>) {</span><br><span class="line">            <span class="keyword">return</span> l;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">push</span>(p);</span><br><span class="line">        <span class="type">int</span> res = <span class="built_in">findFirst</span>(<span class="number">2</span> * p, l, m, x, y, pred);</span><br><span class="line">        <span class="keyword">if</span> (res == <span class="number">-1</span>) {</span><br><span class="line">            res = <span class="built_in">findFirst</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y, pred);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> F&gt;</span></span><br><span class="line"><span class="function">    <span class="type">int</span> <span class="title">findFirst</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, F pred)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">findFirst</span>(<span class="number">1</span>, <span class="number">0</span>, n, l, r, pred);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> F&gt;</span></span><br><span class="line"><span class="function">    <span class="type">int</span> <span class="title">findLast</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y, F pred)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= y || r &lt;= x || !<span class="built_in">pred</span>(info[p])) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (r - l == <span class="number">1</span>) {</span><br><span class="line">            <span class="keyword">return</span> l;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">push</span>(p);</span><br><span class="line">        <span class="type">int</span> res = <span class="built_in">findLast</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y, pred);</span><br><span class="line">        <span class="keyword">if</span> (res == <span class="number">-1</span>) {</span><br><span class="line">            res = <span class="built_in">findLast</span>(<span class="number">2</span> * p, l, m, x, y, pred);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> F&gt;</span></span><br><span class="line"><span class="function">    <span class="type">int</span> <span class="title">findLast</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, F pred)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">findLast</span>(<span class="number">1</span>, <span class="number">0</span>, n, l, r, pred);</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Tag</span> {</span><br><span class="line">    i64 a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">apply</span><span class="params">(Tag t)</span> </span>{</span><br><span class="line">        a = std::<span class="built_in">min</span>(a, b + t.a);</span><br><span class="line">        b += t.b;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> k;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Info</span> {</span><br><span class="line">    i64 x = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">apply</span><span class="params">(Tag t)</span> </span>{</span><br><span class="line">        x += t.a;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) {</span><br><span class="line">            x = (x % k + k) % k;</span><br><span class="line">        }</span><br><span class="line">        x += t.b - t.a;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line">Info <span class="keyword">operator</span>+(Info a, Info b) {</span><br><span class="line">    <span class="keyword">return</span> {a.x + b.x};</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="04C-懒标记线段树（LazySegmentTree-二分修改）"><a href="#04C-懒标记线段树（LazySegmentTree-二分修改）" class="headerlink" title="04C - 懒标记线段树（LazySegmentTree 二分修改）"></a>04C - 懒标记线段树（LazySegmentTree 二分修改）</h2><p><a href="https://atcoder.jp/contests/joi2023yo2/submissions/39363123">2023-03-03</a></p>
<p>长度过长，点击查看</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> inf = <span class="number">1E9</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">Info</span>, <span class="keyword">class</span> <span class="title class_">Tag</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LazySegmentTree</span> {</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;Info&gt; info;</span><br><span class="line">    std::vector&lt;Tag&gt; tag;</span><br><span class="line">    <span class="built_in">LazySegmentTree</span>(<span class="type">int</span> n) : <span class="built_in">n</span>(n), <span class="built_in">info</span>(<span class="number">4</span> &lt;&lt; std::__lg(n)), <span class="built_in">tag</span>(<span class="number">4</span> &lt;&lt; std::__lg(n)) {}</span><br><span class="line">    <span class="built_in">LazySegmentTree</span>(std::vector&lt;Info&gt; init) : <span class="built_in">LazySegmentTree</span>(init.<span class="built_in">size</span>()) {</span><br><span class="line">        std::function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)&gt; build = [&amp;](<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r) {</span><br><span class="line">            <span class="keyword">if</span> (r - l == <span class="number">1</span>) {</span><br><span class="line">                info[p] = init[l];</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">            <span class="built_in">build</span>(<span class="number">2</span> * p, l, m);</span><br><span class="line">            <span class="built_in">build</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r);</span><br><span class="line">            <span class="built_in">pull</span>(p);</span><br><span class="line">        };</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">0</span>, n);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pull</span><span class="params">(<span class="type">int</span> p)</span> </span>{</span><br><span class="line">        info[p] = info[<span class="number">2</span> * p] + info[<span class="number">2</span> * p + <span class="number">1</span>];</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">apply</span><span class="params">(<span class="type">int</span> p, <span class="type">const</span> Tag &amp;v)</span> </span>{</span><br><span class="line">        info[p].<span class="built_in">apply</span>(v);</span><br><span class="line">        tag[p].<span class="built_in">apply</span>(v);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> p)</span> </span>{</span><br><span class="line">        <span class="built_in">apply</span>(<span class="number">2</span> * p, tag[p]);</span><br><span class="line">        <span class="built_in">apply</span>(<span class="number">2</span> * p + <span class="number">1</span>, tag[p]);</span><br><span class="line">        tag[p] = <span class="built_in">Tag</span>();</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">const</span> Info &amp;v)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (r - l == <span class="number">1</span>) {</span><br><span class="line">            info[p] = v;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">push</span>(p);</span><br><span class="line">        <span class="keyword">if</span> (x &lt; m) {</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">2</span> * p, l, m, x, v);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, v);</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">pull</span>(p);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> p, <span class="type">const</span> Info &amp;v)</span> </span>{</span><br><span class="line">        <span class="built_in">modify</span>(<span class="number">1</span>, <span class="number">0</span>, n, p, v);</span><br><span class="line">    }</span><br><span class="line">    <span class="function">Info <span class="title">rangeQuery</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= y || r &lt;= x) {</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Info</span>();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y) {</span><br><span class="line">            <span class="keyword">return</span> info[p];</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">push</span>(p);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rangeQuery</span>(<span class="number">2</span> * p, l, m, x, y) + <span class="built_in">rangeQuery</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y);</span><br><span class="line">    }</span><br><span class="line">    <span class="function">Info <span class="title">rangeQuery</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rangeQuery</span>(<span class="number">1</span>, <span class="number">0</span>, n, l, r);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rangeApply</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">const</span> Tag &amp;v)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= y || r &lt;= x) {</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y) {</span><br><span class="line">            <span class="built_in">apply</span>(p, v);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">push</span>(p);</span><br><span class="line">        <span class="built_in">rangeApply</span>(<span class="number">2</span> * p, l, m, x, y, v);</span><br><span class="line">        <span class="built_in">rangeApply</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y, v);</span><br><span class="line">        <span class="built_in">pull</span>(p);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rangeApply</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">const</span> Tag &amp;v)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rangeApply</span>(<span class="number">1</span>, <span class="number">0</span>, n, l, r, v);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">maintainL</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> pre)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (info[p].difl &gt; <span class="number">0</span> &amp;&amp; info[p].maxlowl &lt; pre) {</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (r - l == <span class="number">1</span>) {</span><br><span class="line">            info[p].max = info[p].maxlowl;</span><br><span class="line">            info[p].maxl = info[p].maxr = l;</span><br><span class="line">            info[p].maxlowl = info[p].maxlowr = -inf;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">push</span>(p);</span><br><span class="line">        <span class="built_in">maintainL</span>(<span class="number">2</span> * p, l, m, pre);</span><br><span class="line">        pre = std::<span class="built_in">max</span>(pre, info[<span class="number">2</span> * p].max);</span><br><span class="line">        <span class="built_in">maintainL</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, pre);</span><br><span class="line">        <span class="built_in">pull</span>(p);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">maintainL</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="built_in">maintainL</span>(<span class="number">1</span>, <span class="number">0</span>, n, <span class="number">-1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">maintainR</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> suf)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (info[p].difr &gt; <span class="number">0</span> &amp;&amp; info[p].maxlowr &lt; suf) {</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (r - l == <span class="number">1</span>) {</span><br><span class="line">            info[p].max = info[p].maxlowl;</span><br><span class="line">            info[p].maxl = info[p].maxr = l;</span><br><span class="line">            info[p].maxlowl = info[p].maxlowr = -inf;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">push</span>(p);</span><br><span class="line">        <span class="built_in">maintainR</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, suf);</span><br><span class="line">        suf = std::<span class="built_in">max</span>(suf, info[<span class="number">2</span> * p + <span class="number">1</span>].max);</span><br><span class="line">        <span class="built_in">maintainR</span>(<span class="number">2</span> * p, l, m, suf);</span><br><span class="line">        <span class="built_in">pull</span>(p);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">maintainR</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="built_in">maintainR</span>(<span class="number">1</span>, <span class="number">0</span>, n, <span class="number">-1</span>);</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Tag</span> {</span><br><span class="line">    <span class="type">int</span> add = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">apply</span><span class="params">(Tag t)</span> &amp; </span>{</span><br><span class="line">        add += t.add;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Info</span> {</span><br><span class="line">    <span class="type">int</span> max = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> maxl = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> maxr = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> difl = inf;</span><br><span class="line">    <span class="type">int</span> difr = inf;</span><br><span class="line">    <span class="type">int</span> maxlowl = -inf;</span><br><span class="line">    <span class="type">int</span> maxlowr = -inf;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">apply</span><span class="params">(Tag t)</span> &amp; </span>{</span><br><span class="line">        <span class="keyword">if</span> (max != <span class="number">-1</span>) {</span><br><span class="line">            max += t.add;</span><br><span class="line">        }</span><br><span class="line">        difl += t.add;</span><br><span class="line">        difr += t.add;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">Info <span class="keyword">operator</span>+(Info a, Info b) {</span><br><span class="line">    Info c;</span><br><span class="line">    <span class="keyword">if</span> (a.max &gt; b.max) {</span><br><span class="line">        c.max = a.max;</span><br><span class="line">        c.maxl = a.maxl;</span><br><span class="line">        c.maxr = a.maxr;</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (a.max &lt; b.max) {</span><br><span class="line">        c.max = b.max;</span><br><span class="line">        c.maxl = b.maxl;</span><br><span class="line">        c.maxr = b.maxr;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        c.max = a.max;</span><br><span class="line">        c.maxl = a.maxl;</span><br><span class="line">        c.maxr = b.maxr;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    c.difl = std::<span class="built_in">min</span>(a.difl, b.difl);</span><br><span class="line">    c.difr = std::<span class="built_in">min</span>(a.difr, b.difr);</span><br><span class="line">    <span class="keyword">if</span> (a.max != <span class="number">-1</span>) {</span><br><span class="line">        c.difl = std::<span class="built_in">min</span>(c.difl, a.max - b.maxlowl);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (b.max != <span class="number">-1</span>) {</span><br><span class="line">        c.difr = std::<span class="built_in">min</span>(c.difr, b.max - a.maxlowr);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (a.max == <span class="number">-1</span>) {</span><br><span class="line">        c.maxlowl = std::<span class="built_in">max</span>(a.maxlowl, b.maxlowl);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        c.maxlowl = a.maxlowl;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (b.max == <span class="number">-1</span>) {</span><br><span class="line">        c.maxlowr = std::<span class="built_in">max</span>(a.maxlowr, b.maxlowr);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        c.maxlowr = b.maxlowr;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="05A-取模类（MLong-amp-MInt）"><a href="#05A-取模类（MLong-amp-MInt）" class="headerlink" title="05A - 取模类（MLong \& MInt）"></a>05A - 取模类（MLong \&amp; MInt）</h2><p><a href="https://codeforces.com/contest/1697/submission/160317720">2022-06-12</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> P = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">using</span> i64 = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="comment">// assume -P &lt;= x &lt; 2P</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">norm</span><span class="params">(<span class="type">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) {</span><br><span class="line">        x += P;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= P) {</span><br><span class="line">        x -= P;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">power</span><span class="params">(T a, i64 b)</span> </span>{</span><br><span class="line">    T res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; b; b /= <span class="number">2</span>, a *= a) {</span><br><span class="line">        <span class="keyword">if</span> (b % <span class="number">2</span>) {</span><br><span class="line">            res *= a;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Z</span> {</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="built_in">Z</span>(<span class="type">int</span> x = <span class="number">0</span>) : <span class="built_in">x</span>(<span class="built_in">norm</span>(x)) {}</span><br><span class="line">    <span class="built_in">Z</span>(i64 x) : <span class="built_in">x</span>(<span class="built_in">norm</span>(x % P)) {}</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">val</span><span class="params">()</span> <span class="type">const</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    }</span><br><span class="line">    Z <span class="keyword">operator</span>-() <span class="type">const</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Z</span>(<span class="built_in">norm</span>(P - x));</span><br><span class="line">    }</span><br><span class="line">    <span class="function">Z <span class="title">inv</span><span class="params">()</span> <span class="type">const</span> </span>{</span><br><span class="line">        <span class="built_in">assert</span>(x != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">power</span>(*<span class="keyword">this</span>, P - <span class="number">2</span>);</span><br><span class="line">    }</span><br><span class="line">    Z &amp;<span class="keyword">operator</span>*=(<span class="type">const</span> Z &amp;rhs) {</span><br><span class="line">        x = <span class="built_in">i64</span>(x) * rhs.x % P;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line">    Z &amp;<span class="keyword">operator</span>+=(<span class="type">const</span> Z &amp;rhs) {</span><br><span class="line">        x = <span class="built_in">norm</span>(x + rhs.x);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line">    Z &amp;<span class="keyword">operator</span>-=(<span class="type">const</span> Z &amp;rhs) {</span><br><span class="line">        x = <span class="built_in">norm</span>(x - rhs.x);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line">    Z &amp;<span class="keyword">operator</span>/=(<span class="type">const</span> Z &amp;rhs) {</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> *= rhs.<span class="built_in">inv</span>();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">friend</span> Z <span class="keyword">operator</span>*(<span class="type">const</span> Z &amp;lhs, <span class="type">const</span> Z &amp;rhs) {</span><br><span class="line">        Z res = lhs;</span><br><span class="line">        res *= rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">friend</span> Z <span class="keyword">operator</span>+(<span class="type">const</span> Z &amp;lhs, <span class="type">const</span> Z &amp;rhs) {</span><br><span class="line">        Z res = lhs;</span><br><span class="line">        res += rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">friend</span> Z <span class="keyword">operator</span>-(<span class="type">const</span> Z &amp;lhs, <span class="type">const</span> Z &amp;rhs) {</span><br><span class="line">        Z res = lhs;</span><br><span class="line">        res -= rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">friend</span> Z <span class="keyword">operator</span>/(<span class="type">const</span> Z &amp;lhs, <span class="type">const</span> Z &amp;rhs) {</span><br><span class="line">        Z res = lhs;</span><br><span class="line">        res /= rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">friend</span> std::istream &amp;<span class="keyword">operator</span>&gt;&gt;(std::istream &amp;is, Z &amp;a) {</span><br><span class="line">        i64 v;</span><br><span class="line">        is &gt;&gt; v;</span><br><span class="line">        a = <span class="built_in">Z</span>(v);</span><br><span class="line">        <span class="keyword">return</span> is;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">friend</span> std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;os, <span class="type">const</span> Z &amp;a) {</span><br><span class="line">        <span class="keyword">return</span> os &lt;&lt; a.<span class="built_in">val</span>();</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure>
<h2 id="05B-取模类（MLong-amp-MInt-新版）"><a href="#05B-取模类（MLong-amp-MInt-新版）" class="headerlink" title="05B - 取模类（MLong \& MInt 新版）"></a>05B - 取模类（MLong \&amp; MInt 新版）</h2><p><a href="https://ac.nowcoder.com/acm/contest/view-submission?submissionId=63433564">2023-08-14</a></p>
<p>根据输入内容动态修改 MOD 的方法：<code>Z::setMod(p);</code> 。</p>
<p>长度过长，点击查看</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> T <span class="title">power</span><span class="params">(T a, i64 b)</span> </span>{</span><br><span class="line">    T res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; b; b /= <span class="number">2</span>, a *= a) {</span><br><span class="line">        <span class="keyword">if</span> (b % <span class="number">2</span>) {</span><br><span class="line">            res *= a;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> i64 <span class="title">mul</span><span class="params">(i64 a, i64 b, i64 p)</span> </span>{</span><br><span class="line">    i64 res = a * b - <span class="built_in">i64</span>(<span class="number">1.L</span> * a * b / p) * p;</span><br><span class="line">    res %= p;</span><br><span class="line">    <span class="keyword">if</span> (res &lt; <span class="number">0</span>) {</span><br><span class="line">        res += p;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">template</span>&lt;i64 P&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MLong</span> {</span><br><span class="line">    i64 x;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="title">MLong</span><span class="params">()</span> : x{</span>} {}</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="title">MLong</span><span class="params">(i64 x)</span> : x{</span><span class="built_in">norm</span>(x % <span class="built_in">getMod</span>())} {}</span><br><span class="line">    </span><br><span class="line">    <span class="type">static</span> i64 Mod;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="type">static</span> i64 <span class="title">getMod</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (P &gt; <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> P;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">return</span> Mod;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="type">static</span> <span class="type">void</span> <span class="title">setMod</span><span class="params">(i64 Mod_)</span> </span>{</span><br><span class="line">        Mod = Mod_;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> i64 <span class="title">norm</span><span class="params">(i64 x)</span> <span class="type">const</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) {</span><br><span class="line">            x += <span class="built_in">getMod</span>();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (x &gt;= <span class="built_in">getMod</span>()) {</span><br><span class="line">            x -= <span class="built_in">getMod</span>();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> i64 <span class="title">val</span><span class="params">()</span> <span class="type">const</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="keyword">constexpr</span> <span class="keyword">operator</span> <span class="title">i64</span><span class="params">()</span> <span class="type">const</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">constexpr</span> MLong <span class="keyword">operator</span>-() <span class="type">const</span> {</span><br><span class="line">        MLong res;</span><br><span class="line">        res.x = <span class="built_in">norm</span>(<span class="built_in">getMod</span>() - x);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> MLong <span class="title">inv</span><span class="params">()</span> <span class="type">const</span> </span>{</span><br><span class="line">        <span class="built_in">assert</span>(x != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">power</span>(*<span class="keyword">this</span>, <span class="built_in">getMod</span>() - <span class="number">2</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">constexpr</span> MLong &amp;<span class="keyword">operator</span>*=(MLong rhs) &amp; {</span><br><span class="line">        x = <span class="built_in">mul</span>(x, rhs.x, <span class="built_in">getMod</span>());</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">constexpr</span> MLong &amp;<span class="keyword">operator</span>+=(MLong rhs) &amp; {</span><br><span class="line">        x = <span class="built_in">norm</span>(x + rhs.x);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">constexpr</span> MLong &amp;<span class="keyword">operator</span>-=(MLong rhs) &amp; {</span><br><span class="line">        x = <span class="built_in">norm</span>(x - rhs.x);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">constexpr</span> MLong &amp;<span class="keyword">operator</span>/=(MLong rhs) &amp; {</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> *= rhs.<span class="built_in">inv</span>();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> MLong <span class="keyword">operator</span>*(MLong lhs, MLong rhs) {</span><br><span class="line">        MLong res = lhs;</span><br><span class="line">        res *= rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> MLong <span class="keyword">operator</span>+(MLong lhs, MLong rhs) {</span><br><span class="line">        MLong res = lhs;</span><br><span class="line">        res += rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> MLong <span class="keyword">operator</span>-(MLong lhs, MLong rhs) {</span><br><span class="line">        MLong res = lhs;</span><br><span class="line">        res -= rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> MLong <span class="keyword">operator</span>/(MLong lhs, MLong rhs) {</span><br><span class="line">        MLong res = lhs;</span><br><span class="line">        res /= rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> std::istream &amp;<span class="keyword">operator</span>&gt;&gt;(std::istream &amp;is, MLong &amp;a) {</span><br><span class="line">        i64 v;</span><br><span class="line">        is &gt;&gt; v;</span><br><span class="line">        a = <span class="built_in">MLong</span>(v);</span><br><span class="line">        <span class="keyword">return</span> is;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;os, <span class="type">const</span> MLong &amp;a) {</span><br><span class="line">        <span class="keyword">return</span> os &lt;&lt; a.<span class="built_in">val</span>();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> <span class="type">bool</span> <span class="keyword">operator</span>==(MLong lhs, MLong rhs) {</span><br><span class="line">        <span class="keyword">return</span> lhs.<span class="built_in">val</span>() == rhs.<span class="built_in">val</span>();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> <span class="type">bool</span> <span class="keyword">operator</span>!=(MLong lhs, MLong rhs) {</span><br><span class="line">        <span class="keyword">return</span> lhs.<span class="built_in">val</span>() != rhs.<span class="built_in">val</span>();</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line">i64 MLong&lt;<span class="number">0LL</span>&gt;::Mod = <span class="built_in">i64</span>(<span class="number">1E18</span>) + <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> P&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MInt</span> {</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="title">MInt</span><span class="params">()</span> : x{</span>} {}</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="title">MInt</span><span class="params">(i64 x)</span> : x{</span><span class="built_in">norm</span>(x % <span class="built_in">getMod</span>())} {}</span><br><span class="line">    </span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> Mod;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="type">static</span> <span class="type">int</span> <span class="title">getMod</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (P &gt; <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> P;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">return</span> Mod;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="type">static</span> <span class="type">void</span> <span class="title">setMod</span><span class="params">(<span class="type">int</span> Mod_)</span> </span>{</span><br><span class="line">        Mod = Mod_;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="type">int</span> <span class="title">norm</span><span class="params">(<span class="type">int</span> x)</span> <span class="type">const</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) {</span><br><span class="line">            x += <span class="built_in">getMod</span>();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (x &gt;= <span class="built_in">getMod</span>()) {</span><br><span class="line">            x -= <span class="built_in">getMod</span>();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="type">int</span> <span class="title">val</span><span class="params">()</span> <span class="type">const</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="keyword">constexpr</span> <span class="keyword">operator</span> <span class="title">int</span><span class="params">()</span> <span class="type">const</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">constexpr</span> MInt <span class="keyword">operator</span>-() <span class="type">const</span> {</span><br><span class="line">        MInt res;</span><br><span class="line">        res.x = <span class="built_in">norm</span>(<span class="built_in">getMod</span>() - x);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> MInt <span class="title">inv</span><span class="params">()</span> <span class="type">const</span> </span>{</span><br><span class="line">        <span class="built_in">assert</span>(x != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">power</span>(*<span class="keyword">this</span>, <span class="built_in">getMod</span>() - <span class="number">2</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">constexpr</span> MInt &amp;<span class="keyword">operator</span>*=(MInt rhs) &amp; {</span><br><span class="line">        x = <span class="number">1LL</span> * x * rhs.x % <span class="built_in">getMod</span>();</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">constexpr</span> MInt &amp;<span class="keyword">operator</span>+=(MInt rhs) &amp; {</span><br><span class="line">        x = <span class="built_in">norm</span>(x + rhs.x);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">constexpr</span> MInt &amp;<span class="keyword">operator</span>-=(MInt rhs) &amp; {</span><br><span class="line">        x = <span class="built_in">norm</span>(x - rhs.x);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">constexpr</span> MInt &amp;<span class="keyword">operator</span>/=(MInt rhs) &amp; {</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> *= rhs.<span class="built_in">inv</span>();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> MInt <span class="keyword">operator</span>*(MInt lhs, MInt rhs) {</span><br><span class="line">        MInt res = lhs;</span><br><span class="line">        res *= rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> MInt <span class="keyword">operator</span>+(MInt lhs, MInt rhs) {</span><br><span class="line">        MInt res = lhs;</span><br><span class="line">        res += rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> MInt <span class="keyword">operator</span>-(MInt lhs, MInt rhs) {</span><br><span class="line">        MInt res = lhs;</span><br><span class="line">        res -= rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> MInt <span class="keyword">operator</span>/(MInt lhs, MInt rhs) {</span><br><span class="line">        MInt res = lhs;</span><br><span class="line">        res /= rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> std::istream &amp;<span class="keyword">operator</span>&gt;&gt;(std::istream &amp;is, MInt &amp;a) {</span><br><span class="line">        i64 v;</span><br><span class="line">        is &gt;&gt; v;</span><br><span class="line">        a = <span class="built_in">MInt</span>(v);</span><br><span class="line">        <span class="keyword">return</span> is;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;os, <span class="type">const</span> MInt &amp;a) {</span><br><span class="line">        <span class="keyword">return</span> os &lt;&lt; a.<span class="built_in">val</span>();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> <span class="type">bool</span> <span class="keyword">operator</span>==(MInt lhs, MInt rhs) {</span><br><span class="line">        <span class="keyword">return</span> lhs.<span class="built_in">val</span>() == rhs.<span class="built_in">val</span>();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> <span class="type">bool</span> <span class="keyword">operator</span>!=(MInt lhs, MInt rhs) {</span><br><span class="line">        <span class="keyword">return</span> lhs.<span class="built_in">val</span>() != rhs.<span class="built_in">val</span>();</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="type">int</span> MInt&lt;<span class="number">0</span>&gt;::Mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> V, <span class="type">int</span> P&gt;</span><br><span class="line"><span class="keyword">constexpr</span> MInt&lt;P&gt; CInv = <span class="built_in">MInt</span>&lt;P&gt;(V).<span class="built_in">inv</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> P = <span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">using</span> Z = MInt&lt;P&gt;;</span><br></pre></td></tr></table></figure>
<h2 id="06-状压RMQ（RMQ）"><a href="#06-状压RMQ（RMQ）" class="headerlink" title="06 - 状压RMQ（RMQ）"></a>06 - 状压RMQ（RMQ）</h2><p><a href="https://atcoder.jp/contests/joi2022ho/submissions/39351739">2023-03-02</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>,</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Cmp</span> = std::less&lt;T&gt;&gt;</span><br><span class="line"><span class="keyword">struct</span> RMQ {</span><br><span class="line">    <span class="type">const</span> Cmp cmp = <span class="built_in">Cmp</span>();</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">unsigned</span> B = <span class="number">64</span>;</span><br><span class="line">    <span class="keyword">using</span> u64 = <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;std::vector&lt;T&gt;&gt; a;</span><br><span class="line">    std::vector&lt;T&gt; pre, suf, ini;</span><br><span class="line">    std::vector&lt;u64&gt; stk;</span><br><span class="line">    <span class="built_in">RMQ</span>() {}</span><br><span class="line">    <span class="built_in">RMQ</span>(<span class="type">const</span> std::vector&lt;T&gt; &amp;v) {</span><br><span class="line">        <span class="built_in">init</span>(v);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">const</span> std::vector&lt;T&gt; &amp;v)</span> </span>{</span><br><span class="line">        n = v.<span class="built_in">size</span>();</span><br><span class="line">        pre = suf = ini = v;</span><br><span class="line">        stk.<span class="built_in">resize</span>(n);</span><br><span class="line">        <span class="keyword">if</span> (!n) {</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> M = (n - <span class="number">1</span>) / B + <span class="number">1</span>;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> lg = std::__lg(M);</span><br><span class="line">        a.<span class="built_in">assign</span>(lg + <span class="number">1</span>, std::<span class="built_in">vector</span>&lt;T&gt;(M));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; i++) {</span><br><span class="line">            a[<span class="number">0</span>][i] = v[i * B];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; B &amp;&amp; i * B + j &lt; n; j++) {</span><br><span class="line">                a[<span class="number">0</span>][i] = std::<span class="built_in">min</span>(a[<span class="number">0</span>][i], v[i * B + j], cmp);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) {</span><br><span class="line">            <span class="keyword">if</span> (i % B) {</span><br><span class="line">                pre[i] = std::<span class="built_in">min</span>(pre[i], pre[i - <span class="number">1</span>], cmp);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) {</span><br><span class="line">            <span class="keyword">if</span> (i % B != B - <span class="number">1</span>) {</span><br><span class="line">                suf[i] = std::<span class="built_in">min</span>(suf[i], suf[i + <span class="number">1</span>], cmp);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; lg; j++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i + (<span class="number">2</span> &lt;&lt; j) &lt;= M; i++) {</span><br><span class="line">                a[j + <span class="number">1</span>][i] = std::<span class="built_in">min</span>(a[j][i], a[j][i + (<span class="number">1</span> &lt;&lt; j)], cmp);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; i++) {</span><br><span class="line">            <span class="type">const</span> <span class="type">int</span> l = i * B;</span><br><span class="line">            <span class="type">const</span> <span class="type">int</span> r = std::<span class="built_in">min</span>(<span class="number">1U</span> * n, l + B);</span><br><span class="line">            u64 s = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = l; j &lt; r; j++) {</span><br><span class="line">                <span class="keyword">while</span> (s &amp;&amp; <span class="built_in">cmp</span>(v[j], v[std::__lg(s) + l])) {</span><br><span class="line">                    s ^= <span class="number">1ULL</span> &lt;&lt; std::__lg(s);</span><br><span class="line">                }</span><br><span class="line">                s |= <span class="number">1ULL</span> &lt;&lt; (j - l);</span><br><span class="line">                stk[j] = s;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    } </span><br><span class="line">    <span class="function">T <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (l / B != (r - <span class="number">1</span>) / B) {</span><br><span class="line">            T ans = std::<span class="built_in">min</span>(suf[l], pre[r - <span class="number">1</span>], cmp);</span><br><span class="line">            l = l / B + <span class="number">1</span>;</span><br><span class="line">            r = r / B;</span><br><span class="line">            <span class="keyword">if</span> (l &lt; r) {</span><br><span class="line">                <span class="type">int</span> k = std::__lg(r - l);</span><br><span class="line">                ans = std::<span class="built_in">min</span>({ans, a[k][l], a[k][r - (<span class="number">1</span> &lt;&lt; k)]}, cmp);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="type">int</span> x = B * (l / B);</span><br><span class="line">            <span class="keyword">return</span> ini[__builtin_ctzll(stk[r - <span class="number">1</span>] &gt;&gt; (l - x)) + l];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure>
<h2 id="07-Splay"><a href="#07-Splay" class="headerlink" title="07 - Splay"></a>07 - Splay</h2><p><a href="https://atcoder.jp/contests/joi2023ho/submissions/38901674">2023-02-15</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> {</span><br><span class="line">    Node *l = <span class="literal">nullptr</span>;</span><br><span class="line">    Node *r = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    i64 sum = <span class="number">0</span>;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function">Node *<span class="title">add</span><span class="params">(Node *t, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> p, <span class="type">int</span> v)</span> </span>{</span><br><span class="line">    Node *x = <span class="keyword">new</span> Node;</span><br><span class="line">    <span class="keyword">if</span> (t) {</span><br><span class="line">        *x = *t;</span><br><span class="line">    }</span><br><span class="line">    x-&gt;cnt += <span class="number">1</span>;</span><br><span class="line">    x-&gt;sum += v;</span><br><span class="line">    <span class="keyword">if</span> (r - l == <span class="number">1</span>) {</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (p &lt; m) {</span><br><span class="line">        x-&gt;l = <span class="built_in">add</span>(x-&gt;l, l, m, p, v);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        x-&gt;r = <span class="built_in">add</span>(x-&gt;r, m, r, p, v);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(Node *tl, Node *tr, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (r &lt;= x) {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= x) {</span><br><span class="line">        <span class="type">int</span> cnt = (tr ? tr-&gt;cnt : <span class="number">0</span>) - (tl ? tl-&gt;cnt : <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (cnt == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (r - l == <span class="number">1</span>) {</span><br><span class="line">            <span class="keyword">return</span> l;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> res = <span class="built_in">find</span>(tl ? tl-&gt;l : tl, tr ? tr-&gt;l : tr, l, m, x);</span><br><span class="line">    <span class="keyword">if</span> (res == <span class="number">-1</span>) {</span><br><span class="line">        res = <span class="built_in">find</span>(tl ? tl-&gt;r : tl, tr ? tr-&gt;r : tr, m, r, x);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function">std::pair&lt;<span class="type">int</span>, i64&gt; <span class="title">get</span><span class="params">(Node *t, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= y || r &lt;= x || !t) {</span><br><span class="line">        <span class="keyword">return</span> {<span class="number">0</span>, <span class="number">0LL</span>};</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y) {</span><br><span class="line">        <span class="keyword">return</span> {t-&gt;cnt, t-&gt;sum};</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">auto</span> [cl, sl] = <span class="built_in">get</span>(t-&gt;l, l, m, x, y);</span><br><span class="line">    <span class="keyword">auto</span> [cr, sr] = <span class="built_in">get</span>(t-&gt;r, m, r, x, y);</span><br><span class="line">    <span class="keyword">return</span> {cl + cr, sl + sr};</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Tree</span> {</span><br><span class="line">    <span class="type">int</span> add = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> val = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> id = <span class="number">0</span>;</span><br><span class="line">    Tree *ch[<span class="number">2</span>] = {};</span><br><span class="line">    Tree *p = <span class="literal">nullptr</span>;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pos</span><span class="params">(Tree *t)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> t-&gt;p-&gt;ch[<span class="number">1</span>] == t;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(Tree *t, <span class="type">int</span> v)</span> </span>{</span><br><span class="line">    t-&gt;val += v;</span><br><span class="line">    t-&gt;add += v;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(Tree *t)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (t-&gt;ch[<span class="number">0</span>]) {</span><br><span class="line">        <span class="built_in">add</span>(t-&gt;ch[<span class="number">0</span>], t-&gt;add);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (t-&gt;ch[<span class="number">1</span>]) {</span><br><span class="line">        <span class="built_in">add</span>(t-&gt;ch[<span class="number">1</span>], t-&gt;add);</span><br><span class="line">    }</span><br><span class="line">    t-&gt;add = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(Tree *t)</span> </span>{</span><br><span class="line">    Tree *q = t-&gt;p;</span><br><span class="line">    <span class="type">int</span> x = !<span class="built_in">pos</span>(t);</span><br><span class="line">    q-&gt;ch[!x] = t-&gt;ch[x];</span><br><span class="line">    <span class="keyword">if</span> (t-&gt;ch[x]) t-&gt;ch[x]-&gt;p = q;</span><br><span class="line">    t-&gt;p = q-&gt;p;</span><br><span class="line">    <span class="keyword">if</span> (q-&gt;p) q-&gt;p-&gt;ch[<span class="built_in">pos</span>(q)] = t;</span><br><span class="line">    t-&gt;ch[x] = q;</span><br><span class="line">    q-&gt;p = t;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">splay</span><span class="params">(Tree *t)</span> </span>{</span><br><span class="line">    std::vector&lt;Tree *&gt; s;</span><br><span class="line">    <span class="keyword">for</span> (Tree *i = t; i-&gt;p; i = i-&gt;p) s.<span class="built_in">push_back</span>(i-&gt;p);</span><br><span class="line">    <span class="keyword">while</span> (!s.<span class="built_in">empty</span>()) {</span><br><span class="line">        <span class="built_in">push</span>(s.<span class="built_in">back</span>());</span><br><span class="line">        s.<span class="built_in">pop_back</span>();</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">push</span>(t);</span><br><span class="line">    <span class="keyword">while</span> (t-&gt;p) {</span><br><span class="line">        <span class="keyword">if</span> (t-&gt;p-&gt;p) {</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">pos</span>(t) == <span class="built_in">pos</span>(t-&gt;p)) <span class="built_in">rotate</span>(t-&gt;p);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">rotate</span>(t);</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">rotate</span>(t);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(Tree *&amp;t, Tree *x, Tree *p = <span class="literal">nullptr</span>)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (!t) {</span><br><span class="line">        t = x;</span><br><span class="line">        x-&gt;p = p;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">push</span>(t);</span><br><span class="line">    <span class="keyword">if</span> (x-&gt;val &lt; t-&gt;val) {</span><br><span class="line">        <span class="built_in">insert</span>(t-&gt;ch[<span class="number">0</span>], x, t);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="built_in">insert</span>(t-&gt;ch[<span class="number">1</span>], x, t);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(Tree *t)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (!t) {</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">push</span>(t);</span><br><span class="line">    <span class="built_in">dfs</span>(t-&gt;ch[<span class="number">0</span>]);</span><br><span class="line">    std::cerr &lt;&lt; t-&gt;val &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(t-&gt;ch[<span class="number">1</span>]);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function">std::pair&lt;Tree *, Tree *&gt; <span class="title">split</span><span class="params">(Tree *t, <span class="type">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (!t) {</span><br><span class="line">        <span class="keyword">return</span> {t, t};</span><br><span class="line">    }</span><br><span class="line">    Tree *v = <span class="literal">nullptr</span>;</span><br><span class="line">    Tree *j = t;</span><br><span class="line">    <span class="keyword">for</span> (Tree *i = t; i; ) {</span><br><span class="line">        <span class="built_in">push</span>(i);</span><br><span class="line">        j = i;</span><br><span class="line">        <span class="keyword">if</span> (i-&gt;val &gt;= x) {</span><br><span class="line">            v = i;</span><br><span class="line">            i = i-&gt;ch[<span class="number">0</span>];</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            i = i-&gt;ch[<span class="number">1</span>];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">splay</span>(j);</span><br><span class="line">    <span class="keyword">if</span> (!v) {</span><br><span class="line">        <span class="keyword">return</span> {j, <span class="literal">nullptr</span>};</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">splay</span>(v);</span><br><span class="line">    </span><br><span class="line">    Tree *u = v-&gt;ch[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (u) {</span><br><span class="line">        v-&gt;ch[<span class="number">0</span>] = u-&gt;p = <span class="literal">nullptr</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// std::cerr &lt;&lt; "split " &lt;&lt; x &lt;&lt; "\n";</span></span><br><span class="line">    <span class="comment">// dfs(u);</span></span><br><span class="line">    <span class="comment">// std::cerr &lt;&lt; "\n";</span></span><br><span class="line">    <span class="comment">// dfs(v);</span></span><br><span class="line">    <span class="comment">// std::cerr &lt;&lt; "\n";</span></span><br><span class="line">    <span class="keyword">return</span> {u, v};</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function">Tree *<span class="title">merge</span><span class="params">(Tree *l, Tree *r)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (!l) {</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (!r) {</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    }</span><br><span class="line">    Tree *i = l;</span><br><span class="line">    <span class="keyword">while</span> (i-&gt;ch[<span class="number">1</span>]) {</span><br><span class="line">        i = i-&gt;ch[<span class="number">1</span>];</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">splay</span>(i);</span><br><span class="line">    i-&gt;ch[<span class="number">1</span>] = r;</span><br><span class="line">    r-&gt;p = i;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p><a href="https://cf.dianhsu.com/gym/104479/submission/221036520">2023-09-30</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> {</span><br><span class="line">    Node *ch[<span class="number">2</span>], *p;</span><br><span class="line">    <span class="type">bool</span> rev;</span><br><span class="line">    <span class="type">int</span> siz = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">Node</span>() : ch{<span class="literal">nullptr</span>, <span class="literal">nullptr</span>}, <span class="built_in">p</span>(<span class="literal">nullptr</span>), <span class="built_in">rev</span>(<span class="literal">false</span>) {}</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reverse</span><span class="params">(Node *t)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (t) {</span><br><span class="line">        std::<span class="built_in">swap</span>(t-&gt;ch[<span class="number">0</span>], t-&gt;ch[<span class="number">1</span>]);</span><br><span class="line">        t-&gt;rev ^= <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(Node *t)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (t-&gt;rev) {</span><br><span class="line">        <span class="built_in">reverse</span>(t-&gt;ch[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">reverse</span>(t-&gt;ch[<span class="number">1</span>]);</span><br><span class="line">        t-&gt;rev = <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pull</span><span class="params">(Node *t)</span> </span>{</span><br><span class="line">    t-&gt;siz = (t-&gt;ch[<span class="number">0</span>] ? t-&gt;ch[<span class="number">0</span>]-&gt;siz : <span class="number">0</span>) + <span class="number">1</span> + (t-&gt;ch[<span class="number">1</span>] ? t-&gt;ch[<span class="number">1</span>]-&gt;siz : <span class="number">0</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isroot</span><span class="params">(Node *t)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> t-&gt;p == <span class="literal">nullptr</span> || (t-&gt;p-&gt;ch[<span class="number">0</span>] != t &amp;&amp; t-&gt;p-&gt;ch[<span class="number">1</span>] != t);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pos</span><span class="params">(Node *t)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> t-&gt;p-&gt;ch[<span class="number">1</span>] == t;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushAll</span><span class="params">(Node *t)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">isroot</span>(t)) {</span><br><span class="line">        <span class="built_in">pushAll</span>(t-&gt;p);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">push</span>(t);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(Node *t)</span> </span>{</span><br><span class="line">    Node *q = t-&gt;p;</span><br><span class="line">    <span class="type">int</span> x = !<span class="built_in">pos</span>(t);</span><br><span class="line">    q-&gt;ch[!x] = t-&gt;ch[x];</span><br><span class="line">    <span class="keyword">if</span> (t-&gt;ch[x]) {</span><br><span class="line">        t-&gt;ch[x]-&gt;p = q;</span><br><span class="line">    }</span><br><span class="line">    t-&gt;p = q-&gt;p;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">isroot</span>(q)) {</span><br><span class="line">        q-&gt;p-&gt;ch[<span class="built_in">pos</span>(q)] = t;</span><br><span class="line">    }</span><br><span class="line">    t-&gt;ch[x] = q;</span><br><span class="line">    q-&gt;p = t;</span><br><span class="line">    <span class="built_in">pull</span>(q);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">splay</span><span class="params">(Node *t)</span> </span>{</span><br><span class="line">    <span class="built_in">pushAll</span>(t);</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isroot</span>(t)) {</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">isroot</span>(t-&gt;p)) {</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">pos</span>(t) == <span class="built_in">pos</span>(t-&gt;p)) {</span><br><span class="line">                <span class="built_in">rotate</span>(t-&gt;p);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="built_in">rotate</span>(t);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">rotate</span>(t);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">pull</span>(t);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">access</span><span class="params">(Node *t)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span> (Node *i = t, *q = <span class="literal">nullptr</span>; i; q = i, i = i-&gt;p) {</span><br><span class="line">        <span class="built_in">splay</span>(i);</span><br><span class="line">        i-&gt;ch[<span class="number">1</span>] = q;</span><br><span class="line">        <span class="built_in">pull</span>(i);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">splay</span>(t);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">makeroot</span><span class="params">(Node *t)</span> </span>{</span><br><span class="line">    <span class="built_in">access</span>(t);</span><br><span class="line">    <span class="built_in">reverse</span>(t);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">link</span><span class="params">(Node *x, Node *y)</span> </span>{</span><br><span class="line">    <span class="built_in">makeroot</span>(x);</span><br><span class="line">    x-&gt;p = y;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">split</span><span class="params">(Node *x, Node *y)</span> </span>{</span><br><span class="line">    <span class="built_in">makeroot</span>(x);</span><br><span class="line">    <span class="built_in">access</span>(y);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cut</span><span class="params">(Node *x, Node *y)</span> </span>{</span><br><span class="line">    <span class="built_in">split</span>(x, y);</span><br><span class="line">    x-&gt;p = y-&gt;ch[<span class="number">0</span>] = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="built_in">pull</span>(y);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dist</span><span class="params">(Node *x, Node *y)</span> </span>{</span><br><span class="line">    <span class="built_in">split</span>(x, y);</span><br><span class="line">    <span class="keyword">return</span> y-&gt;siz - <span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p><a href="https://codeforces.com/contest/1942/submission/254202464">2024-03-30</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Matrix</span> : std::array&lt;std::array&lt;i64, 4&gt;, 4&gt; {</span><br><span class="line">    <span class="built_in">Matrix</span>(i64 v = <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) {</span><br><span class="line">                (*<span class="keyword">this</span>)[i][j] = (i == j ? v : inf);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"> </span><br><span class="line">Matrix <span class="keyword">operator</span>*(<span class="type">const</span> Matrix &amp;a, <span class="type">const</span> Matrix &amp;b) {</span><br><span class="line">    <span class="function">Matrix <span class="title">c</span><span class="params">(inf)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) {</span><br><span class="line">                c[i][k] = std::<span class="built_in">min</span>(c[i][k], a[i][j] + b[j][k]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        c[i][<span class="number">3</span>] = std::<span class="built_in">min</span>(c[i][<span class="number">3</span>], a[i][<span class="number">3</span>]);</span><br><span class="line">    }</span><br><span class="line">    c[<span class="number">3</span>][<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> {</span><br><span class="line">    Node *ch[<span class="number">2</span>], *p;</span><br><span class="line">    i64 sumg = <span class="number">0</span>;</span><br><span class="line">    i64 sumh = <span class="number">0</span>;</span><br><span class="line">    i64 sumb = <span class="number">0</span>;</span><br><span class="line">    i64 g = <span class="number">0</span>;</span><br><span class="line">    i64 h = <span class="number">0</span>;</span><br><span class="line">    i64 b = <span class="number">0</span>;</span><br><span class="line">    Matrix mat;</span><br><span class="line">    Matrix prd;</span><br><span class="line">    std::array&lt;i64, 4&gt; ans{};</span><br><span class="line">    <span class="built_in">Node</span>() : ch{<span class="literal">nullptr</span>, <span class="literal">nullptr</span>}, <span class="built_in">p</span>(<span class="literal">nullptr</span>) {}</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">()</span> </span>{</span><br><span class="line">        mat = <span class="built_in">Matrix</span>(inf);</span><br><span class="line">        mat[<span class="number">0</span>][<span class="number">0</span>] = b + h - g + sumg;</span><br><span class="line">        mat[<span class="number">1</span>][<span class="number">1</span>] = mat[<span class="number">1</span>][<span class="number">2</span>] = mat[<span class="number">1</span>][<span class="number">3</span>] = h + sumh;</span><br><span class="line">        mat[<span class="number">2</span>][<span class="number">0</span>] = mat[<span class="number">2</span>][<span class="number">1</span>] = mat[<span class="number">2</span>][<span class="number">2</span>] = mat[<span class="number">2</span>][<span class="number">3</span>] = b + h + sumb;</span><br><span class="line">        mat[<span class="number">3</span>][<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(Node *t)</span> </span>{</span><br><span class="line">    </span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pull</span><span class="params">(Node *t)</span> </span>{</span><br><span class="line">    t-&gt;prd = (t-&gt;ch[<span class="number">0</span>] ? t-&gt;ch[<span class="number">0</span>]-&gt;prd : <span class="built_in">Matrix</span>()) * t-&gt;mat * (t-&gt;ch[<span class="number">1</span>] ? t-&gt;ch[<span class="number">1</span>]-&gt;prd : <span class="built_in">Matrix</span>());</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isroot</span><span class="params">(Node *t)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> t-&gt;p == <span class="literal">nullptr</span> || (t-&gt;p-&gt;ch[<span class="number">0</span>] != t &amp;&amp; t-&gt;p-&gt;ch[<span class="number">1</span>] != t);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pos</span><span class="params">(Node *t)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> t-&gt;p-&gt;ch[<span class="number">1</span>] == t;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushAll</span><span class="params">(Node *t)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">isroot</span>(t)) {</span><br><span class="line">        <span class="built_in">pushAll</span>(t-&gt;p);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">push</span>(t);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(Node *t)</span> </span>{</span><br><span class="line">    Node *q = t-&gt;p;</span><br><span class="line">    <span class="type">int</span> x = !<span class="built_in">pos</span>(t);</span><br><span class="line">    q-&gt;ch[!x] = t-&gt;ch[x];</span><br><span class="line">    <span class="keyword">if</span> (t-&gt;ch[x]) {</span><br><span class="line">        t-&gt;ch[x]-&gt;p = q;</span><br><span class="line">    }</span><br><span class="line">    t-&gt;p = q-&gt;p;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">isroot</span>(q)) {</span><br><span class="line">        q-&gt;p-&gt;ch[<span class="built_in">pos</span>(q)] = t;</span><br><span class="line">    }</span><br><span class="line">    t-&gt;ch[x] = q;</span><br><span class="line">    q-&gt;p = t;</span><br><span class="line">    <span class="built_in">pull</span>(q);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">splay</span><span class="params">(Node *t)</span> </span>{</span><br><span class="line">    <span class="built_in">pushAll</span>(t);</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isroot</span>(t)) {</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">isroot</span>(t-&gt;p)) {</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">pos</span>(t) == <span class="built_in">pos</span>(t-&gt;p)) {</span><br><span class="line">                <span class="built_in">rotate</span>(t-&gt;p);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="built_in">rotate</span>(t);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">rotate</span>(t);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">pull</span>(t);</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function">std::array&lt;i64, 4&gt; <span class="title">get</span><span class="params">(Node *t)</span> </span>{</span><br><span class="line">    std::array&lt;i64, 4&gt; ans;</span><br><span class="line">    ans.<span class="built_in">fill</span>(inf);</span><br><span class="line">    ans[<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) {</span><br><span class="line">            ans[i] = std::<span class="built_in">min</span>(ans[i], t-&gt;prd[i][j]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">access</span><span class="params">(Node *t)</span> </span>{</span><br><span class="line">    std::array&lt;i64, 4&gt; old{};</span><br><span class="line">    <span class="keyword">for</span> (Node *i = t, *q = <span class="literal">nullptr</span>; i; q = i, i = i-&gt;p) {</span><br><span class="line">        <span class="built_in">splay</span>(i);</span><br><span class="line">        <span class="keyword">if</span> (i-&gt;ch[<span class="number">1</span>]) {</span><br><span class="line">            <span class="keyword">auto</span> res = <span class="built_in">get</span>(i-&gt;ch[<span class="number">1</span>]);</span><br><span class="line">            i-&gt;sumg += res[<span class="number">0</span>];</span><br><span class="line">            i-&gt;sumh += std::<span class="built_in">min</span>({res[<span class="number">1</span>], res[<span class="number">2</span>], res[<span class="number">3</span>]});</span><br><span class="line">            i-&gt;sumb += std::<span class="built_in">min</span>({res[<span class="number">0</span>], res[<span class="number">1</span>], res[<span class="number">2</span>], res[<span class="number">3</span>]});</span><br><span class="line">        }</span><br><span class="line">        i-&gt;ch[<span class="number">1</span>] = q;</span><br><span class="line">        i-&gt;sumg -= old[<span class="number">0</span>];</span><br><span class="line">        i-&gt;sumh -= std::<span class="built_in">min</span>({old[<span class="number">1</span>], old[<span class="number">2</span>], old[<span class="number">3</span>]});</span><br><span class="line">        i-&gt;sumb -= std::<span class="built_in">min</span>({old[<span class="number">0</span>], old[<span class="number">1</span>], old[<span class="number">2</span>], old[<span class="number">3</span>]});</span><br><span class="line">        old = <span class="built_in">get</span>(i);</span><br><span class="line">        i-&gt;<span class="built_in">update</span>();</span><br><span class="line">        <span class="built_in">pull</span>(i);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">splay</span>(t);</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="08-其他平衡树"><a href="#08-其他平衡树" class="headerlink" title="08 - 其他平衡树"></a>08 - 其他平衡树</h2><p><a href="https://ac.nowcoder.com/acm/contest/view-submission?submissionId=63246177">2023-08-04</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> {</span><br><span class="line">    Node *l = <span class="literal">nullptr</span>;</span><br><span class="line">    Node *r = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> sumodd = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Node</span>(Node *t) {</span><br><span class="line">        <span class="keyword">if</span> (t) {</span><br><span class="line">            *<span class="keyword">this</span> = *t;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function">Node *<span class="title">add</span><span class="params">(Node *t, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> v)</span> </span>{</span><br><span class="line">    t = <span class="keyword">new</span> <span class="built_in">Node</span>(t);</span><br><span class="line">    t-&gt;sum += v;</span><br><span class="line">    t-&gt;sumodd += (x % <span class="number">2</span>) * v;</span><br><span class="line">    <span class="keyword">if</span> (r - l == <span class="number">1</span>) {</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; m) {</span><br><span class="line">        t-&gt;l = <span class="built_in">add</span>(t-&gt;l, l, m, x, v);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        t-&gt;r = <span class="built_in">add</span>(t-&gt;r, m, r, x, v);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query1</span><span class="params">(Node *t1, Node *t2, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (r - l == <span class="number">1</span>) {</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> odd = (t1 &amp;&amp; t1-&gt;r ? t1-&gt;r-&gt;sumodd : <span class="number">0</span>) - (t2 &amp;&amp; t2-&gt;r ? t2-&gt;r-&gt;sumodd : <span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> cnt = (t1 &amp;&amp; t1-&gt;r ? t1-&gt;r-&gt;sum : <span class="number">0</span>) - (t2 &amp;&amp; t2-&gt;r ? t2-&gt;r-&gt;sum : <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (odd &gt; <span class="number">0</span> || cnt &gt; k) {</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query1</span>(t1 ? t1-&gt;r : t1, t2 ? t2-&gt;r : t2, m, r, k);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query1</span>(t1 ? t1-&gt;l : t1, t2 ? t2-&gt;l : t2, l, m, k - cnt);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function">std::array&lt;<span class="type">int</span>, 3&gt; <span class="title">query2</span><span class="params">(Node *t1, Node *t2, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (r - l == <span class="number">1</span>) {</span><br><span class="line">        <span class="type">int</span> cnt = (t1 ? t1-&gt;sumodd : <span class="number">0</span>) - (t2 ? t2-&gt;sumodd : <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> {l, cnt, k};</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> cnt = (t1 &amp;&amp; t1-&gt;r ? t1-&gt;r-&gt;sumodd : <span class="number">0</span>) - (t2 &amp;&amp; t2-&gt;r ? t2-&gt;r-&gt;sumodd : <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (cnt &gt; k) {</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query2</span>(t1 ? t1-&gt;r : t1, t2 ? t2-&gt;r : t2, m, r, k);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query2</span>(t1 ? t1-&gt;l : t1, t2 ? t2-&gt;l : t2, l, m, k - cnt);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p><a href="https://codeforces.com/contest/1864/submission/220558951">2023-08-26</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> {</span><br><span class="line">    Node *l = <span class="literal">nullptr</span>;</span><br><span class="line">    Node *r = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function">Node *<span class="title">add</span><span class="params">(Node *t, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (t) {</span><br><span class="line">        t = <span class="keyword">new</span> <span class="built_in">Node</span>(*t);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        t = <span class="keyword">new</span> Node;</span><br><span class="line">    }</span><br><span class="line">    t-&gt;cnt += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (r - l == <span class="number">1</span>) {</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; m) {</span><br><span class="line">        t-&gt;l = <span class="built_in">add</span>(t-&gt;l, l, m, x);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        t-&gt;r = <span class="built_in">add</span>(t-&gt;r, m, r, x);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(Node *t1, Node *t2, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x)</span> </span>{</span><br><span class="line">    <span class="type">int</span> cnt = (t2 ? t2-&gt;cnt : <span class="number">0</span>) - (t1 ? t1-&gt;cnt : <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (cnt == <span class="number">0</span> || l &gt;= x) {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (r - l == <span class="number">1</span>) {</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> res = <span class="built_in">query</span>(t1 ? t1-&gt;r : t1, t2 ? t2-&gt;r : t2, m, r, x);</span><br><span class="line">    <span class="keyword">if</span> (res == <span class="number">-1</span>) {</span><br><span class="line">        res = <span class="built_in">query</span>(t1 ? t1-&gt;l : t1, t2 ? t2-&gt;l : t2, l, m, x);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p><a href="https://codeforces.com/contest/38/submission/200537139">2023-04-03</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Info</span> {</span><br><span class="line">    <span class="type">int</span> imp = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> id = <span class="number">0</span>;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">Info <span class="keyword">operator</span>+(Info a, Info b) {</span><br><span class="line">    <span class="keyword">return</span> {std::<span class="built_in">max</span>(a.imp, b.imp), <span class="number">0</span>};</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> {</span><br><span class="line">    <span class="type">int</span> w = <span class="built_in">rng</span>();</span><br><span class="line">    Info info;</span><br><span class="line">    Info sum;</span><br><span class="line">    <span class="type">int</span> siz = <span class="number">1</span>;</span><br><span class="line">    Node *l = <span class="literal">nullptr</span>;</span><br><span class="line">    Node *r = <span class="literal">nullptr</span>;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pull</span><span class="params">(Node *t)</span> </span>{</span><br><span class="line">    t-&gt;sum = t-&gt;info;</span><br><span class="line">    t-&gt;siz = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (t-&gt;l) {</span><br><span class="line">        t-&gt;sum = t-&gt;l-&gt;sum + t-&gt;sum;</span><br><span class="line">        t-&gt;siz += t-&gt;l-&gt;siz;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (t-&gt;r) {</span><br><span class="line">        t-&gt;sum = t-&gt;sum + t-&gt;r-&gt;sum;</span><br><span class="line">        t-&gt;siz += t-&gt;r-&gt;siz;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function">std::pair&lt;Node *, Node *&gt; <span class="title">splitAt</span><span class="params">(Node *t, <span class="type">int</span> p)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (!t) {</span><br><span class="line">        <span class="keyword">return</span> {t, t};</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (p &lt;= (t-&gt;l ? t-&gt;l-&gt;siz : <span class="number">0</span>)) {</span><br><span class="line">        <span class="keyword">auto</span> [l, r] = <span class="built_in">splitAt</span>(t-&gt;l, p);</span><br><span class="line">        t-&gt;l = r;</span><br><span class="line">        <span class="built_in">pull</span>(t);</span><br><span class="line">        <span class="keyword">return</span> {l, t};</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">auto</span> [l, r] = <span class="built_in">splitAt</span>(t-&gt;r, p - <span class="number">1</span> - (t-&gt;l ? t-&gt;l-&gt;siz : <span class="number">0</span>));</span><br><span class="line">        t-&gt;r = l;</span><br><span class="line">        <span class="built_in">pull</span>(t);</span><br><span class="line">        <span class="keyword">return</span> {t, r};</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insertAt</span><span class="params">(Node *&amp;t, <span class="type">int</span> p, Node *x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (!t) {</span><br><span class="line">        t = x;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (x-&gt;w &lt; t-&gt;w) {</span><br><span class="line">        <span class="keyword">auto</span> [l, r] = <span class="built_in">splitAt</span>(t, p);</span><br><span class="line">        t = x;</span><br><span class="line">        t-&gt;l = l;</span><br><span class="line">        t-&gt;r = r;</span><br><span class="line">        <span class="built_in">pull</span>(t);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (p &lt;= (t-&gt;l ? t-&gt;l-&gt;siz : <span class="number">0</span>)) {</span><br><span class="line">        <span class="built_in">insertAt</span>(t-&gt;l, p, x);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="built_in">insertAt</span>(t-&gt;r, p - <span class="number">1</span> - (t-&gt;l ? t-&gt;l-&gt;siz : <span class="number">0</span>), x);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">pull</span>(t);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function">Node *<span class="title">merge</span><span class="params">(Node *a, Node *b)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (!a) {</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (!b) {</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (a-&gt;w &lt; b-&gt;w) {</span><br><span class="line">        a-&gt;r = <span class="built_in">merge</span>(a-&gt;r, b);</span><br><span class="line">        <span class="built_in">pull</span>(a);</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        b-&gt;l = <span class="built_in">merge</span>(a, b-&gt;l);</span><br><span class="line">        <span class="built_in">pull</span>(b);</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(Node *t, <span class="type">int</span> v)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (!t) {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (t-&gt;sum.imp &lt; v) {</span><br><span class="line">        <span class="keyword">return</span> t-&gt;siz;</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> res = <span class="built_in">query</span>(t-&gt;r, v);</span><br><span class="line">    <span class="keyword">if</span> (res != (t-&gt;r ? t-&gt;r-&gt;siz : <span class="number">0</span>)) {</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (t-&gt;info.imp &gt; v) {</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res + <span class="number">1</span> + <span class="built_in">query</span>(t-&gt;l, v);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(Node *t)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (!t) {</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">dfs</span>(t-&gt;l);</span><br><span class="line">    std::cout &lt;&lt; t-&gt;info.id &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(t-&gt;r);</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p><a href="https://ac.nowcoder.com/acm/contest/view-submission?submissionId=63162242">2023-07-31</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> {</span><br><span class="line">    Node *l = <span class="literal">nullptr</span>;</span><br><span class="line">    Node *r = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> cntnew = <span class="number">0</span>;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function">Node *<span class="title">add</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> isnew)</span> </span>{</span><br><span class="line">    Node *t = <span class="keyword">new</span> Node;</span><br><span class="line">    t-&gt;cnt = <span class="number">1</span>;</span><br><span class="line">    t-&gt;cntnew = isnew;</span><br><span class="line">    <span class="keyword">if</span> (r - l == <span class="number">1</span>) {</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; m) {</span><br><span class="line">        t-&gt;l = <span class="built_in">add</span>(l, m, x, isnew);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        t-&gt;r = <span class="built_in">add</span>(m, r, x, isnew);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Info</span> {</span><br><span class="line">    Node *t = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="type">int</span> psum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">bool</span> rev = <span class="literal">false</span>;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pull</span><span class="params">(Node *t)</span> </span>{</span><br><span class="line">    t-&gt;cnt = (t-&gt;l ? t-&gt;l-&gt;cnt : <span class="number">0</span>) + (t-&gt;r ? t-&gt;r-&gt;cnt : <span class="number">0</span>);</span><br><span class="line">    t-&gt;cntnew = (t-&gt;l ? t-&gt;l-&gt;cntnew : <span class="number">0</span>) + (t-&gt;r ? t-&gt;r-&gt;cntnew : <span class="number">0</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function">std::pair&lt;Node *, Node *&gt; <span class="title">split</span><span class="params">(Node *t, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">bool</span> rev)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (!t) {</span><br><span class="line">        <span class="keyword">return</span> {t, t};</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">return</span> {<span class="literal">nullptr</span>, t};</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (x == t-&gt;cnt) {</span><br><span class="line">        <span class="keyword">return</span> {t, <span class="literal">nullptr</span>};</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (r - l == <span class="number">1</span>) {</span><br><span class="line">        Node *t2 = <span class="keyword">new</span> Node;</span><br><span class="line">        t2-&gt;cnt = t-&gt;cnt - x;</span><br><span class="line">        t-&gt;cnt = x;</span><br><span class="line">        <span class="keyword">return</span> {t, t2};</span><br><span class="line">    }</span><br><span class="line">    Node *t2 = <span class="keyword">new</span> Node;</span><br><span class="line">    <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (!rev) {</span><br><span class="line">        <span class="keyword">if</span> (t-&gt;l &amp;&amp; x &lt;= t-&gt;l-&gt;cnt) {</span><br><span class="line">            std::<span class="built_in">tie</span>(t-&gt;l, t2-&gt;l) = <span class="built_in">split</span>(t-&gt;l, l, m, x, rev);</span><br><span class="line">            t2-&gt;r = t-&gt;r;</span><br><span class="line">            t-&gt;r = <span class="literal">nullptr</span>;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            std::<span class="built_in">tie</span>(t-&gt;r, t2-&gt;r) = <span class="built_in">split</span>(t-&gt;r, m, r, x - (t-&gt;l ? t-&gt;l-&gt;cnt : <span class="number">0</span>), rev);</span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">if</span> (t-&gt;r &amp;&amp; x &lt;= t-&gt;r-&gt;cnt) {</span><br><span class="line">            std::<span class="built_in">tie</span>(t-&gt;r, t2-&gt;r) = <span class="built_in">split</span>(t-&gt;r, m, r, x, rev);</span><br><span class="line">            t2-&gt;l = t-&gt;l;</span><br><span class="line">            t-&gt;l = <span class="literal">nullptr</span>;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            std::<span class="built_in">tie</span>(t-&gt;l, t2-&gt;l) = <span class="built_in">split</span>(t-&gt;l, l, m, x - (t-&gt;r ? t-&gt;r-&gt;cnt : <span class="number">0</span>), rev);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">pull</span>(t);</span><br><span class="line">    <span class="built_in">pull</span>(t2);</span><br><span class="line">    <span class="keyword">return</span> {t, t2};</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function">Node *<span class="title">merge</span><span class="params">(Node *t1, Node *t2, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (!t1) {</span><br><span class="line">        <span class="keyword">return</span> t2;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (!t2) {</span><br><span class="line">        <span class="keyword">return</span> t1;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (r - l == <span class="number">1</span>) {</span><br><span class="line">        t1-&gt;cnt += t2-&gt;cnt;</span><br><span class="line">        t1-&gt;cntnew += t2-&gt;cntnew;</span><br><span class="line">        <span class="keyword">delete</span> t2;</span><br><span class="line">        <span class="keyword">return</span> t1;</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">    t1-&gt;l = <span class="built_in">merge</span>(t1-&gt;l, t2-&gt;l, l, m);</span><br><span class="line">    t1-&gt;r = <span class="built_in">merge</span>(t1-&gt;r, t2-&gt;r, m, r);</span><br><span class="line">    <span class="keyword">delete</span> t2;</span><br><span class="line">    <span class="built_in">pull</span>(t1);</span><br><span class="line">    <span class="keyword">return</span> t1;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="09-分数四则运算（Frac）"><a href="#09-分数四则运算（Frac）" class="headerlink" title="09 - 分数四则运算（Frac）"></a>09 - 分数四则运算（Frac）</h2><p><a href="https://codeforces.com/contest/598/submission/203186397">2023-04-23</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Frac</span> {</span><br><span class="line">    T num;</span><br><span class="line">    T den;</span><br><span class="line">    <span class="built_in">Frac</span>(T num_, T den_) : <span class="built_in">num</span>(num_), <span class="built_in">den</span>(den_) {</span><br><span class="line">        <span class="keyword">if</span> (den &lt; <span class="number">0</span>) {</span><br><span class="line">            den = -den;</span><br><span class="line">            num = -num;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">Frac</span>() : <span class="built_in">Frac</span>(<span class="number">0</span>, <span class="number">1</span>) {}</span><br><span class="line">    <span class="built_in">Frac</span>(T num_) : <span class="built_in">Frac</span>(num_, <span class="number">1</span>) {}</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="keyword">operator</span> <span class="title">double</span><span class="params">()</span> <span class="type">const</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.</span> * num / den;</span><br><span class="line">    }</span><br><span class="line">    Frac &amp;<span class="keyword">operator</span>+=(<span class="type">const</span> Frac &amp;rhs) {</span><br><span class="line">        num = num * rhs.den + rhs.num * den;</span><br><span class="line">        den *= rhs.den;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line">    Frac &amp;<span class="keyword">operator</span>-=(<span class="type">const</span> Frac &amp;rhs) {</span><br><span class="line">        num = num * rhs.den - rhs.num * den;</span><br><span class="line">        den *= rhs.den;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line">    Frac &amp;<span class="keyword">operator</span>*=(<span class="type">const</span> Frac &amp;rhs) {</span><br><span class="line">        num *= rhs.num;</span><br><span class="line">        den *= rhs.den;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line">    Frac &amp;<span class="keyword">operator</span>/=(<span class="type">const</span> Frac &amp;rhs) {</span><br><span class="line">        num *= rhs.den;</span><br><span class="line">        den *= rhs.num;</span><br><span class="line">        <span class="keyword">if</span> (den &lt; <span class="number">0</span>) {</span><br><span class="line">            num = -num;</span><br><span class="line">            den = -den;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">friend</span> Frac <span class="keyword">operator</span>+(Frac lhs, <span class="type">const</span> Frac &amp;rhs) {</span><br><span class="line">        <span class="keyword">return</span> lhs += rhs;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">friend</span> Frac <span class="keyword">operator</span>-(Frac lhs, <span class="type">const</span> Frac &amp;rhs) {</span><br><span class="line">        <span class="keyword">return</span> lhs -= rhs;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">friend</span> Frac <span class="keyword">operator</span>*(Frac lhs, <span class="type">const</span> Frac &amp;rhs) {</span><br><span class="line">        <span class="keyword">return</span> lhs *= rhs;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">friend</span> Frac <span class="keyword">operator</span>/(Frac lhs, <span class="type">const</span> Frac &amp;rhs) {</span><br><span class="line">        <span class="keyword">return</span> lhs /= rhs;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">friend</span> Frac <span class="keyword">operator</span>-(<span class="type">const</span> Frac &amp;a) {</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Frac</span>(-a.num, a.den);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> Frac &amp;lhs, <span class="type">const</span> Frac &amp;rhs) {</span><br><span class="line">        <span class="keyword">return</span> lhs.num * rhs.den == rhs.num * lhs.den;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> Frac &amp;lhs, <span class="type">const</span> Frac &amp;rhs) {</span><br><span class="line">        <span class="keyword">return</span> lhs.num * rhs.den != rhs.num * lhs.den;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Frac &amp;lhs, <span class="type">const</span> Frac &amp;rhs) {</span><br><span class="line">        <span class="keyword">return</span> lhs.num * rhs.den &lt; rhs.num * lhs.den;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&gt;(<span class="type">const</span> Frac &amp;lhs, <span class="type">const</span> Frac &amp;rhs) {</span><br><span class="line">        <span class="keyword">return</span> lhs.num * rhs.den &gt; rhs.num * lhs.den;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;=(<span class="type">const</span> Frac &amp;lhs, <span class="type">const</span> Frac &amp;rhs) {</span><br><span class="line">        <span class="keyword">return</span> lhs.num * rhs.den &lt;= rhs.num * lhs.den;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&gt;=(<span class="type">const</span> Frac &amp;lhs, <span class="type">const</span> Frac &amp;rhs) {</span><br><span class="line">        <span class="keyword">return</span> lhs.num * rhs.den &gt;= rhs.num * lhs.den;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">friend</span> std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;os, Frac x) {</span><br><span class="line">        T g = std::<span class="built_in">gcd</span>(x.num, x.den);</span><br><span class="line">        <span class="keyword">if</span> (x.den == g) {</span><br><span class="line">            <span class="keyword">return</span> os &lt;&lt; x.num / g;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">return</span> os &lt;&lt; x.num / g &lt;&lt; <span class="string">"/"</span> &lt;&lt; x.den / g;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure>
<h2 id="10-线性基（Basis）"><a href="#10-线性基（Basis）" class="headerlink" title="10 - 线性基（Basis）"></a>10 - 线性基（Basis）</h2><p><a href="https://codeforces.com/contest/1902/submission/235594491">2023-12-03</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Basis</span> {</span><br><span class="line">    <span class="type">int</span> a[<span class="number">20</span>] {};</span><br><span class="line">    <span class="type">int</span> t[<span class="number">20</span>] {};</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Basis</span>() {</span><br><span class="line">        std::<span class="built_in">fill</span>(t, t + <span class="number">20</span>, <span class="number">-1</span>);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = <span class="number">1E9</span>)</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) {</span><br><span class="line">            <span class="keyword">if</span> (x &gt;&gt; i &amp; <span class="number">1</span>) {</span><br><span class="line">                <span class="keyword">if</span> (y &gt; t[i]) {</span><br><span class="line">                    std::<span class="built_in">swap</span>(a[i], x);</span><br><span class="line">                    std::<span class="built_in">swap</span>(t[i], y);</span><br><span class="line">                }</span><br><span class="line">                x ^= a[i];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = <span class="number">0</span>)</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) {</span><br><span class="line">            <span class="keyword">if</span> ((x &gt;&gt; i &amp; <span class="number">1</span>) &amp;&amp; t[i] &gt;= y) {</span><br><span class="line">                x ^= a[i];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> x == <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="五、字符串"><a href="#五、字符串" class="headerlink" title="五、字符串"></a>五、字符串</h1><h2 id="01A-马拉车（Manacher-旧版）"><a href="#01A-马拉车（Manacher-旧版）" class="headerlink" title="01A - 马拉车（Manacher 旧版）"></a>01A - 马拉车（Manacher 旧版）</h2><p><a href="https://codeforces.com/contest/1827/submission/205865086">2023-05-14</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">manacher</span><span class="params">(std::string s)</span> </span>{</span><br><span class="line">    std::string t = <span class="string">"#"</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> c : s) {</span><br><span class="line">        t += c;</span><br><span class="line">        t += <span class="string">'#'</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> n = t.<span class="built_in">size</span>();</span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">r</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">2</span> * j - i &gt;= <span class="number">0</span> &amp;&amp; j + r[j] &gt; i) {</span><br><span class="line">            r[i] = std::<span class="built_in">min</span>(r[<span class="number">2</span> * j - i], j + r[j] - i);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">while</span> (i - r[i] &gt;= <span class="number">0</span> &amp;&amp; i + r[i] &lt; n &amp;&amp; t[i - r[i]] == t[i + r[i]]) {</span><br><span class="line">            r[i] += <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (i + r[i] &gt; j + r[j]) {</span><br><span class="line">            j = i;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="01B-马拉车（Manacher-新版）"><a href="#01B-马拉车（Manacher-新版）" class="headerlink" title="01B - 马拉车（Manacher 新版）"></a>01B - 马拉车（Manacher 新版）</h2><p><a href="https://atcoder.jp/contests/abc349/submissions/52365777">2024-04-14</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">manacher</span><span class="params">(std::vector&lt;<span class="type">int</span>&gt; s)</span> </span>{</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; t{<span class="number">0</span>};</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> c : s) {</span><br><span class="line">        t.<span class="built_in">push_back</span>(c);</span><br><span class="line">        t.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> n = t.<span class="built_in">size</span>();</span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">r</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">2</span> * j - i &gt;= <span class="number">0</span> &amp;&amp; j + r[j] &gt; i) {</span><br><span class="line">            r[i] = std::<span class="built_in">min</span>(r[<span class="number">2</span> * j - i], j + r[j] - i);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">while</span> (i - r[i] &gt;= <span class="number">0</span> &amp;&amp; i + r[i] &lt; n &amp;&amp; t[i - r[i]] == t[i + r[i]]) {</span><br><span class="line">            r[i] += <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (i + r[i] &gt; j + r[j]) {</span><br><span class="line">            j = i;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="02-Z函数"><a href="#02-Z函数" class="headerlink" title="02 - Z函数"></a>02 - Z函数</h2><p><a href="https://ac.nowcoder.com/acm/contest/view-submission?submissionId=63378373">2023-08-11</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">zFunction</span><span class="params">(std::string s)</span> </span>{</span><br><span class="line">    <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">z</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    z[<span class="number">0</span>] = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">1</span>; i &lt; n; i++) {</span><br><span class="line">        z[i] = std::<span class="built_in">max</span>(<span class="number">0</span>, std::<span class="built_in">min</span>(j + z[j] - i, z[i - j]));</span><br><span class="line">        <span class="keyword">while</span> (i + z[i] &lt; n &amp;&amp; s[z[i]] == s[i + z[i]]) {</span><br><span class="line">            z[i]++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (i + z[i] &gt; j + z[j]) {</span><br><span class="line">            j = i;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="03-后缀数组（SA）"><a href="#03-后缀数组（SA）" class="headerlink" title="03 - 后缀数组（SA）"></a>03 - 后缀数组（SA）</h2><p><a href="https://atcoder.jp/contests/discovery2016-qual/submissions/39727257">2023-03-14</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">SuffixArray</span> {</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; sa, rk, lc;</span><br><span class="line">    <span class="built_in">SuffixArray</span>(<span class="type">const</span> std::string &amp;s) {</span><br><span class="line">        n = s.<span class="built_in">length</span>();</span><br><span class="line">        sa.<span class="built_in">resize</span>(n);</span><br><span class="line">        lc.<span class="built_in">resize</span>(n - <span class="number">1</span>);</span><br><span class="line">        rk.<span class="built_in">resize</span>(n);</span><br><span class="line">        std::<span class="built_in">iota</span>(sa.<span class="built_in">begin</span>(), sa.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">        std::<span class="built_in">sort</span>(sa.<span class="built_in">begin</span>(), sa.<span class="built_in">end</span>(), [&amp;](<span class="type">int</span> a, <span class="type">int</span> b) {<span class="keyword">return</span> s[a] &lt; s[b];});</span><br><span class="line">        rk[sa[<span class="number">0</span>]] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">            rk[sa[i]] = rk[sa[i - <span class="number">1</span>]] + (s[sa[i]] != s[sa[i - <span class="number">1</span>]]);</span><br><span class="line">        <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">        std::vector&lt;<span class="type">int</span>&gt; tmp, <span class="built_in">cnt</span>(n);</span><br><span class="line">        tmp.<span class="built_in">reserve</span>(n);</span><br><span class="line">        <span class="keyword">while</span> (rk[sa[n - <span class="number">1</span>]] &lt; n - <span class="number">1</span>) {</span><br><span class="line">            tmp.<span class="built_in">clear</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; ++i)</span><br><span class="line">                tmp.<span class="built_in">push_back</span>(n - k + i);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> i : sa)</span><br><span class="line">                <span class="keyword">if</span> (i &gt;= k)</span><br><span class="line">                    tmp.<span class="built_in">push_back</span>(i - k);</span><br><span class="line">            std::<span class="built_in">fill</span>(cnt.<span class="built_in">begin</span>(), cnt.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">                ++cnt[rk[i]];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">                cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">                sa[--cnt[rk[tmp[i]]]] = tmp[i];</span><br><span class="line">            std::<span class="built_in">swap</span>(rk, tmp);</span><br><span class="line">            rk[sa[<span class="number">0</span>]] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">                rk[sa[i]] = rk[sa[i - <span class="number">1</span>]] + (tmp[sa[i - <span class="number">1</span>]] &lt; tmp[sa[i]] || sa[i - <span class="number">1</span>] + k == n || tmp[sa[i - <span class="number">1</span>] + k] &lt; tmp[sa[i] + k]);</span><br><span class="line">            k *= <span class="number">2</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n; ++i) {</span><br><span class="line">            <span class="keyword">if</span> (rk[i] == <span class="number">0</span>) {</span><br><span class="line">                j = <span class="number">0</span>;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="keyword">for</span> (j -= j &gt; <span class="number">0</span>; i + j &lt; n &amp;&amp; sa[rk[i] - <span class="number">1</span>] + j &lt; n &amp;&amp; s[i + j] == s[sa[rk[i] - <span class="number">1</span>] + j]; )</span><br><span class="line">                    ++j;</span><br><span class="line">                lc[rk[i] - <span class="number">1</span>] = j;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure>
<h2 id="04A-后缀自动机（SuffixAutomaton-旧版）"><a href="#04A-后缀自动机（SuffixAutomaton-旧版）" class="headerlink" title="04A - 后缀自动机（SuffixAutomaton 旧版）"></a>04A - 后缀自动机（SuffixAutomaton 旧版）</h2><p><a href="https://ac.nowcoder.com/acm/contest/view-submission?submissionId=53409023&amp;returnHomeType=1&amp;uid=329687984">2022-08-17</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">SuffixAutomaton</span> {</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> ALPHABET_SIZE = <span class="number">26</span>, N = <span class="number">5e5</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span> {</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="type">int</span> link;</span><br><span class="line">        <span class="type">int</span> next[ALPHABET_SIZE];</span><br><span class="line">        <span class="built_in">Node</span>() : <span class="built_in">len</span>(<span class="number">0</span>), <span class="built_in">link</span>(<span class="number">0</span>), next{} {}</span><br><span class="line">    } t[<span class="number">2</span> * N];</span><br><span class="line">    <span class="type">int</span> cntNodes;</span><br><span class="line">    <span class="built_in">SuffixAutomaton</span>() {</span><br><span class="line">        cntNodes = <span class="number">1</span>;</span><br><span class="line">        std::<span class="built_in">fill</span>(t[<span class="number">0</span>].next, t[<span class="number">0</span>].next + ALPHABET_SIZE, <span class="number">1</span>);</span><br><span class="line">        t[<span class="number">0</span>].len = <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">extend</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> c)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (t[p].next[c]) {</span><br><span class="line">            <span class="type">int</span> q = t[p].next[c];</span><br><span class="line">            <span class="keyword">if</span> (t[q].len == t[p].len + <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> q;</span><br><span class="line">            <span class="type">int</span> r = ++cntNodes;</span><br><span class="line">            t[r].len = t[p].len + <span class="number">1</span>;</span><br><span class="line">            t[r].link = t[q].link;</span><br><span class="line">            std::<span class="built_in">copy</span>(t[q].next, t[q].next + ALPHABET_SIZE, t[r].next);</span><br><span class="line">            t[q].link = r;</span><br><span class="line">            <span class="keyword">while</span> (t[p].next[c] == q) {</span><br><span class="line">                t[p].next[c] = r;</span><br><span class="line">                p = t[p].link;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> r;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> cur = ++cntNodes;</span><br><span class="line">        t[cur].len = t[p].len + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (!t[p].next[c]) {</span><br><span class="line">            t[p].next[c] = cur;</span><br><span class="line">            p = t[p].link;</span><br><span class="line">        }</span><br><span class="line">        t[cur].link = <span class="built_in">extend</span>(p, c);</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure>
<h2 id="04B-后缀自动机（SAM-新版）"><a href="#04B-后缀自动机（SAM-新版）" class="headerlink" title="04B - 后缀自动机（SAM 新版）"></a>04B - 后缀自动机（SAM 新版）</h2><p><a href="https://cf.dianhsu.com/gym/104353/submission/207318083">2023-05-27</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">SAM</span> {</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> ALPHABET_SIZE = <span class="number">26</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span> {</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="type">int</span> link;</span><br><span class="line">        std::array&lt;<span class="type">int</span>, ALPHABET_SIZE&gt; next;</span><br><span class="line">        <span class="built_in">Node</span>() : len{}, link{}, next{} {}</span><br><span class="line">    };</span><br><span class="line">    std::vector&lt;Node&gt; t;</span><br><span class="line">    <span class="built_in">SAM</span>() {</span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>{</span><br><span class="line">        t.<span class="built_in">assign</span>(<span class="number">2</span>, <span class="built_in">Node</span>());</span><br><span class="line">        t[<span class="number">0</span>].next.<span class="built_in">fill</span>(<span class="number">1</span>);</span><br><span class="line">        t[<span class="number">0</span>].len = <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">newNode</span><span class="params">()</span> </span>{</span><br><span class="line">        t.<span class="built_in">emplace_back</span>();</span><br><span class="line">        <span class="keyword">return</span> t.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">extend</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> c)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (t[p].next[c]) {</span><br><span class="line">            <span class="type">int</span> q = t[p].next[c];</span><br><span class="line">            <span class="keyword">if</span> (t[q].len == t[p].len + <span class="number">1</span>) {</span><br><span class="line">                <span class="keyword">return</span> q;</span><br><span class="line">            }</span><br><span class="line">            <span class="type">int</span> r = <span class="built_in">newNode</span>();</span><br><span class="line">            t[r].len = t[p].len + <span class="number">1</span>;</span><br><span class="line">            t[r].link = t[q].link;</span><br><span class="line">            t[r].next = t[q].next;</span><br><span class="line">            t[q].link = r;</span><br><span class="line">            <span class="keyword">while</span> (t[p].next[c] == q) {</span><br><span class="line">                t[p].next[c] = r;</span><br><span class="line">                p = t[p].link;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> r;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> cur = <span class="built_in">newNode</span>();</span><br><span class="line">        t[cur].len = t[p].len + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (!t[p].next[c]) {</span><br><span class="line">            t[p].next[c] = cur;</span><br><span class="line">            p = t[p].link;</span><br><span class="line">        }</span><br><span class="line">        t[cur].link = <span class="built_in">extend</span>(p, c);</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">extend</span><span class="params">(<span class="type">int</span> p, <span class="type">char</span> c, <span class="type">char</span> offset = <span class="string">'a'</span>)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">extend</span>(p, c - offset);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">next</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> x)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> t[p].next[x];</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">next</span><span class="params">(<span class="type">int</span> p, <span class="type">char</span> c, <span class="type">char</span> offset = <span class="string">'a'</span>)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">next</span>(p, c - <span class="string">'a'</span>);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">link</span><span class="params">(<span class="type">int</span> p)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> t[p].link;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">len</span><span class="params">(<span class="type">int</span> p)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> t[p].len;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> t.<span class="built_in">size</span>();</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure>
<h2 id="05-回文自动机（PAM）"><a href="#05-回文自动机（PAM）" class="headerlink" title="05 - 回文自动机（PAM）"></a>05 - 回文自动机（PAM）</h2><p><a href="https://ac.nowcoder.com/acm/contest/view-submission?submissionId=62237107&amp;returnHomeType=1&amp;uid=329687984">2023-05-19</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">PAM</span> {</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> ALPHABET_SIZE = <span class="number">28</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span> {</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="type">int</span> link;</span><br><span class="line">        <span class="type">int</span> cnt;</span><br><span class="line">        std::array&lt;<span class="type">int</span>, ALPHABET_SIZE&gt; next;</span><br><span class="line">        <span class="built_in">Node</span>() : len{}, link{}, cnt{}, next{} {}</span><br><span class="line">    };</span><br><span class="line">    std::vector&lt;Node&gt; t;</span><br><span class="line">    <span class="type">int</span> suff;</span><br><span class="line">    std::string s;</span><br><span class="line">    <span class="built_in">PAM</span>() {</span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>{</span><br><span class="line">        t.<span class="built_in">assign</span>(<span class="number">2</span>, <span class="built_in">Node</span>());</span><br><span class="line">        t[<span class="number">0</span>].len = <span class="number">-1</span>;</span><br><span class="line">        suff = <span class="number">1</span>;</span><br><span class="line">        s.<span class="built_in">clear</span>();</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">newNode</span><span class="params">()</span> </span>{</span><br><span class="line">        t.<span class="built_in">emplace_back</span>();</span><br><span class="line">        <span class="keyword">return</span> t.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">add</span><span class="params">(<span class="type">char</span> c, <span class="type">char</span> offset = <span class="string">'a'</span>)</span> </span>{</span><br><span class="line">        <span class="type">int</span> pos = s.<span class="built_in">size</span>();</span><br><span class="line">        s += c;</span><br><span class="line">        <span class="type">int</span> let = c - offset;</span><br><span class="line">        <span class="type">int</span> cur = suff, curlen = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) {</span><br><span class="line">            curlen = t[cur].len;</span><br><span class="line">            <span class="keyword">if</span> (pos - <span class="number">1</span> - curlen &gt;= <span class="number">0</span> &amp;&amp; s[pos - <span class="number">1</span> - curlen] == s[pos])</span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            cur = t[cur].link;</span><br><span class="line">        }       </span><br><span class="line">        <span class="keyword">if</span> (t[cur].next[let]) {  </span><br><span class="line">            suff = t[cur].next[let];</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">         </span><br><span class="line">        <span class="type">int</span> num = <span class="built_in">newNode</span>();</span><br><span class="line">        suff = num;</span><br><span class="line">        t[num].len = t[cur].len + <span class="number">2</span>;</span><br><span class="line">        t[cur].next[let] = num;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (t[num].len == <span class="number">1</span>) {</span><br><span class="line">            t[num].link = <span class="number">1</span>;</span><br><span class="line">            t[num].cnt = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        }</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) {</span><br><span class="line">            cur = t[cur].link;</span><br><span class="line">            curlen = t[cur].len;</span><br><span class="line">            <span class="keyword">if</span> (pos - <span class="number">1</span> - curlen &gt;= <span class="number">0</span> &amp;&amp; s[pos - <span class="number">1</span> - curlen] == s[pos]) {</span><br><span class="line">                t[num].link = t[cur].next[let];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }       </span><br><span class="line">        }           </span><br><span class="line"> </span><br><span class="line">        t[num].cnt = <span class="number">1</span> + t[t[num].link].cnt;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"> </span><br><span class="line">PAM pam;</span><br></pre></td></tr></table></figure>
<h2 id="06A-AC自动机（AC-旧版）"><a href="#06A-AC自动机（AC-旧版）" class="headerlink" title="06A - AC自动机（AC 旧版）"></a>06A - AC自动机（AC 旧版）</h2><p><a href="https://codeforces.com/contest/710/submission/121661266">2021-07-07</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N = <span class="number">3e5</span> + <span class="number">30</span>, A = <span class="number">26</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> {</span><br><span class="line">    <span class="type">int</span> fail;</span><br><span class="line">    <span class="type">int</span> sum;</span><br><span class="line">    <span class="type">int</span> next[A];</span><br><span class="line">    <span class="built_in">Node</span>() : <span class="built_in">fail</span>(<span class="number">-1</span>), <span class="built_in">sum</span>(<span class="number">0</span>) {</span><br><span class="line">        std::<span class="built_in">memset</span>(next, <span class="number">-1</span>, <span class="built_in">sizeof</span>(next));</span><br><span class="line">    }</span><br><span class="line">} node[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> bin[N];</span><br><span class="line"><span class="type">int</span> nBin = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">newNode</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="type">int</span> p = nBin &gt; <span class="number">0</span> ? bin[--nBin] : cnt++;</span><br><span class="line">    node[p] = <span class="built_in">Node</span>();</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">AC</span> {</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; x;</span><br><span class="line">    <span class="built_in">AC</span>(AC &amp;&amp;a) : <span class="built_in">x</span>(std::<span class="built_in">move</span>(a.x)) {}</span><br><span class="line">    <span class="built_in">AC</span>(std::vector&lt;std::string&gt; s, std::vector&lt;<span class="type">int</span>&gt; w) {</span><br><span class="line">        x = {<span class="built_in">newNode</span>(), <span class="built_in">newNode</span>()};</span><br><span class="line">        std::<span class="built_in">fill</span>(node[x[<span class="number">0</span>]].next, node[x[<span class="number">0</span>]].next + A, x[<span class="number">1</span>]);</span><br><span class="line">        node[x[<span class="number">1</span>]].fail = x[<span class="number">0</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">int</span>(s.<span class="built_in">size</span>()); i++) {</span><br><span class="line">            <span class="type">int</span> p = x[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">int</span>(s[i].<span class="built_in">length</span>()); j++) {</span><br><span class="line">                <span class="type">int</span> c = s[i][j] - <span class="string">'a'</span>;</span><br><span class="line">                <span class="keyword">if</span> (node[p].next[c] == <span class="number">-1</span>) {</span><br><span class="line">                    <span class="type">int</span> u = <span class="built_in">newNode</span>();</span><br><span class="line">                    x.<span class="built_in">push_back</span>(u);</span><br><span class="line">                    node[p].next[c] = u;</span><br><span class="line">                }</span><br><span class="line">                p = node[p].next[c];</span><br><span class="line">            }</span><br><span class="line">            node[p].sum += w[i];</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        std::queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">        que.<span class="built_in">push</span>(x[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) {</span><br><span class="line">            <span class="type">int</span> u = que.<span class="built_in">front</span>();</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            node[u].sum += node[node[u].fail].sum;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> c = <span class="number">0</span>; c &lt; A; c++) {</span><br><span class="line">                <span class="keyword">if</span> (node[u].next[c] == <span class="number">-1</span>) {</span><br><span class="line">                    node[u].next[c] = node[node[u].fail].next[c];</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    node[node[u].next[c]].fail = node[node[u].fail].next[c];</span><br><span class="line">                    que.<span class="built_in">push</span>(node[u].next[c]);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    ~<span class="built_in">AC</span>() {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> p : x) {</span><br><span class="line">            bin[nBin++] = p;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="function">i64 <span class="title">query</span><span class="params">(<span class="type">const</span> std::string &amp;s)</span> <span class="type">const</span> </span>{</span><br><span class="line">        i64 ans = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> p = x[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">int</span>(s.<span class="built_in">length</span>()); i++)  {</span><br><span class="line">            <span class="type">int</span> c = s[i] - <span class="string">'a'</span>;</span><br><span class="line">            p = node[p].next[c];</span><br><span class="line">            ans += node[p].sum;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure>
<h2 id="06B-AC自动机（AhoCorasick-新版）"><a href="#06B-AC自动机（AhoCorasick-新版）" class="headerlink" title="06B - AC自动机（AhoCorasick 新版）"></a>06B - AC自动机（AhoCorasick 新版）</h2><p><a href="https://codeforces.com/contest/1801/submission/201155712">2023-04-07</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">AhoCorasick</span> {</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> ALPHABET = <span class="number">26</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span> {</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="type">int</span> link;</span><br><span class="line">        std::array&lt;<span class="type">int</span>, ALPHABET&gt; next;</span><br><span class="line">        <span class="built_in">Node</span>() : link{}, next{} {}</span><br><span class="line">    };</span><br><span class="line">    </span><br><span class="line">    std::vector&lt;Node&gt; t;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">AhoCorasick</span>() {</span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>{</span><br><span class="line">        t.<span class="built_in">assign</span>(<span class="number">2</span>, <span class="built_in">Node</span>());</span><br><span class="line">        t[<span class="number">0</span>].next.<span class="built_in">fill</span>(<span class="number">1</span>);</span><br><span class="line">        t[<span class="number">0</span>].len = <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">newNode</span><span class="params">()</span> </span>{</span><br><span class="line">        t.<span class="built_in">emplace_back</span>();</span><br><span class="line">        <span class="keyword">return</span> t.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> std::vector&lt;<span class="type">int</span>&gt; &amp;a)</span> </span>{</span><br><span class="line">        <span class="type">int</span> p = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> x : a) {</span><br><span class="line">            <span class="keyword">if</span> (t[p].next[x] == <span class="number">0</span>) {</span><br><span class="line">                t[p].next[x] = <span class="built_in">newNode</span>();</span><br><span class="line">                t[t[p].next[x]].len = t[p].len + <span class="number">1</span>;</span><br><span class="line">            }</span><br><span class="line">            p = t[p].next[x];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> std::string &amp;a, <span class="type">char</span> offset = <span class="string">'a'</span>)</span> </span>{</span><br><span class="line">        <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">b</span><span class="params">(a.size())</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++) {</span><br><span class="line">            b[i] = a[i] - offset;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">add</span>(b);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span> </span>{</span><br><span class="line">        std::queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) {</span><br><span class="line">            <span class="type">int</span> x = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ALPHABET; i++) {</span><br><span class="line">                <span class="keyword">if</span> (t[x].next[i] == <span class="number">0</span>) {</span><br><span class="line">                    t[x].next[i] = t[t[x].link].next[i];</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    t[t[x].next[i]].link = t[t[x].link].next[i];</span><br><span class="line">                    q.<span class="built_in">push</span>(t[x].next[i]);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">next</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> x)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> t[p].next[x];</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">next</span><span class="params">(<span class="type">int</span> p, <span class="type">char</span> c, <span class="type">char</span> offset = <span class="string">'a'</span>)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">next</span>(p, c - <span class="string">'a'</span>);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">link</span><span class="params">(<span class="type">int</span> p)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> t[p].link;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">len</span><span class="params">(<span class="type">int</span> p)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> t[p].len;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> t.<span class="built_in">size</span>();</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure>
<h2 id="06C-AC自动机（AhoCorasick-新新版）"><a href="#06C-AC自动机（AhoCorasick-新新版）" class="headerlink" title="06C - AC自动机（AhoCorasick 新新版）"></a>06C - AC自动机（AhoCorasick 新新版）</h2><p><a href="https://www.luogu.com.cn/record/155114676">2024-04-09</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">AhoCorasick</span> {</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> ALPHABET = <span class="number">26</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span> {</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="type">int</span> link;</span><br><span class="line">        std::array&lt;<span class="type">int</span>, ALPHABET&gt; next;</span><br><span class="line">        <span class="built_in">Node</span>() : len{<span class="number">0</span>}, link{<span class="number">0</span>}, next{} {}</span><br><span class="line">    };</span><br><span class="line">    </span><br><span class="line">    std::vector&lt;Node&gt; t;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">AhoCorasick</span>() {</span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>{</span><br><span class="line">        t.<span class="built_in">assign</span>(<span class="number">2</span>, <span class="built_in">Node</span>());</span><br><span class="line">        t[<span class="number">0</span>].next.<span class="built_in">fill</span>(<span class="number">1</span>);</span><br><span class="line">        t[<span class="number">0</span>].len = <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">newNode</span><span class="params">()</span> </span>{</span><br><span class="line">        t.<span class="built_in">emplace_back</span>();</span><br><span class="line">        <span class="keyword">return</span> t.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> std::string &amp;a)</span> </span>{</span><br><span class="line">        <span class="type">int</span> p = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> c : a) {</span><br><span class="line">            <span class="type">int</span> x = c - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span> (t[p].next[x] == <span class="number">0</span>) {</span><br><span class="line">                t[p].next[x] = <span class="built_in">newNode</span>();</span><br><span class="line">                t[t[p].next[x]].len = t[p].len + <span class="number">1</span>;</span><br><span class="line">            }</span><br><span class="line">            p = t[p].next[x];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span> </span>{</span><br><span class="line">        std::queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) {</span><br><span class="line">            <span class="type">int</span> x = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ALPHABET; i++) {</span><br><span class="line">                <span class="keyword">if</span> (t[x].next[i] == <span class="number">0</span>) {</span><br><span class="line">                    t[x].next[i] = t[t[x].link].next[i];</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    t[t[x].next[i]].link = t[t[x].link].next[i];</span><br><span class="line">                    q.<span class="built_in">push</span>(t[x].next[i]);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">next</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> x)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> t[p].next[x];</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">link</span><span class="params">(<span class="type">int</span> p)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> t[p].link;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">len</span><span class="params">(<span class="type">int</span> p)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> t[p].len;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> t.<span class="built_in">size</span>();</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure>
<h2 id="07-随机生成模底-字符串哈希（例题）"><a href="#07-随机生成模底-字符串哈希（例题）" class="headerlink" title="07 - 随机生成模底 字符串哈希（例题）"></a>07 - 随机生成模底 字符串哈希（例题）</h2><p><a href="https://codeforces.com/contest/1598/submission/160006998">2022-06-09</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> i64 = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isprime</span><span class="params">(<span class="type">int</span> n)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i * i &lt;= n; i++) {</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">findPrime</span><span class="params">(<span class="type">int</span> n)</span> </span>{</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isprime</span>(n)) {</span><br><span class="line">        n++;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> Hash = std::array&lt;<span class="type">int</span>, <span class="number">2</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="function">std::mt19937 <span class="title">rng</span><span class="params">(std::chrono::steady_clock::now().time_since_epoch().count())</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> P = <span class="built_in">findPrime</span>(<span class="built_in">rng</span>() % <span class="number">900000000</span> + <span class="number">100000000</span>);</span><br><span class="line">    </span><br><span class="line">    std::string s, x;</span><br><span class="line">    std::cin &gt;&gt; s &gt;&gt; x;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> n = s.<span class="built_in">length</span>();</span><br><span class="line">    <span class="type">int</span> m = x.<span class="built_in">length</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">h</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">p</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">        h[i + <span class="number">1</span>] = (<span class="number">10LL</span> * h[i] + s[i] - <span class="string">'0'</span>) % P;</span><br><span class="line">    }</span><br><span class="line">    p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">        p[i + <span class="number">1</span>] = <span class="number">10LL</span> * p[i] % P;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">auto</span> get = [&amp;](<span class="type">int</span> l, <span class="type">int</span> r) {</span><br><span class="line">        <span class="built_in">return</span> (h[r] + <span class="number">1LL</span> * (P - h[l]) * p[r - l]) % P;</span><br><span class="line">    };</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> px = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> c : x) {</span><br><span class="line">        px = (<span class="number">10LL</span> * px + c - <span class="string">'0'</span>) % P;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n - <span class="number">2</span> * (m - <span class="number">1</span>); i++) {</span><br><span class="line">        <span class="keyword">if</span> ((<span class="built_in">get</span>(i, i + m - <span class="number">1</span>) + <span class="built_in">get</span>(i + m - <span class="number">1</span>, i + <span class="number">2</span> * m - <span class="number">2</span>)) % P == px) {</span><br><span class="line">            std::cout &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; i + m - <span class="number">1</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">            std::cout &lt;&lt; i + m &lt;&lt; <span class="string">" "</span> &lt;&lt; i + <span class="number">2</span> * m - <span class="number">2</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">z</span><span class="params">(m + <span class="number">1</span>)</span>, <span class="title">f</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    z[<span class="number">0</span>] = m;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">-1</span>; i &lt; m; i++) {</span><br><span class="line">        <span class="keyword">if</span> (j != <span class="number">-1</span>) {</span><br><span class="line">            z[i] = std::<span class="built_in">max</span>(<span class="number">0</span>, std::<span class="built_in">min</span>(j + z[j] - i, z[i - j]));</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">while</span> (z[i] + i &lt; m &amp;&amp; x[z[i]] == x[z[i] + i]) {</span><br><span class="line">            z[i]++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">-1</span> || i + z[i] &gt; j + z[j]) {</span><br><span class="line">            j = i;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">-1</span>; i &lt; n; i++) {</span><br><span class="line">        <span class="keyword">if</span> (j != <span class="number">-1</span>) {</span><br><span class="line">            f[i] = std::<span class="built_in">max</span>(<span class="number">0</span>, std::<span class="built_in">min</span>(j + f[j] - i, z[i - j]));</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">while</span> (f[i] + i &lt; n &amp;&amp; f[i] &lt; m &amp;&amp; x[f[i]] == s[f[i] + i]) {</span><br><span class="line">            f[i]++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">-1</span> || i + f[i] &gt; j + f[j]) {</span><br><span class="line">            j = i;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i + m &lt;= n; i++) {</span><br><span class="line">        <span class="type">int</span> l = std::<span class="built_in">min</span>(m, f[i]);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> j : { m - l, m - l - <span class="number">1</span> }) {</span><br><span class="line">            <span class="keyword">if</span> (j &lt;= <span class="number">0</span>) {</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (j &lt;= i &amp;&amp; (<span class="built_in">get</span>(i - j, i) + <span class="built_in">get</span>(i, i + m)) % P == px) {</span><br><span class="line">                std::cout &lt;&lt; i - j + <span class="number">1</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; i &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">                std::cout &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; i + m &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (i + m + j &lt;= n &amp;&amp; (<span class="built_in">get</span>(i, i + m) + <span class="built_in">get</span>(i + m, i + m + j)) % P == px) {</span><br><span class="line">                std::cout &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; i + m &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">                std::cout &lt;&lt; i + m + <span class="number">1</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; i + m + j &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
</search>
